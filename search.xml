<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java八股文-消息队列学习记录2</title>
      <link href="/2023/12/27/java-ba-gu-wen-xiao-xi-dui-lie-xue-xi-ji-lu-2/"/>
      <url>/2023/12/27/java-ba-gu-wen-xiao-xi-dui-lie-xue-xi-ji-lu-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java八股文-消息队列学习记录2"><a href="#Java八股文-消息队列学习记录2" class="headerlink" title="Java八股文-消息队列学习记录2"></a>Java八股文-消息队列学习记录2</h1><h2 id="4-Kafka的特性"><a href="#4-Kafka的特性" class="headerlink" title="4.Kafka的特性"></a>4.Kafka的特性</h2><p>1.消息持久化</p><p>2.高吞吐 100万</p><p>3.扩展性强（动态），集群</p><p>4.多客户端支持（Java,Go,C++)</p><p>5.Kafka Stream  （流处理） 双十一</p><p>6.安全机制</p><p>7.数据备份</p><p>8.轻量级</p><p>9.消息压缩</p><h2 id="7-kafka中比较熟悉的参数"><a href="#7-kafka中比较熟悉的参数" class="headerlink" title="7.kafka中比较熟悉的参数"></a>7.kafka中比较熟悉的参数</h2><p>broker.id 每一个broker在集群中的唯一表示。</p><p>log.dirs  消息保存的路径。Kafka把所有消息都保存在磁盘上。</p><p>auto.create.topics.enable 是否允许自动创建主题</p><h2 id="11-kafka适合的场景"><a href="#11-kafka适合的场景" class="headerlink" title="11.kafka适合的场景"></a>11.kafka适合的场景</h2><p>限时订单不可以。没有对每条消息做限时的发送。RocketMQ可以</p><p>日志收集。很适合。并发量比较大。天生持久化，默认写磁盘。</p><p>消息系统。作为一款生产-消费的消息系统。</p><p>流式处理。Stream的流的组件。 Flink+Kakfa 做一个异步。</p><h2 id="13-为什么kafka不支持读写分离"><a href="#13-为什么kafka不支持读写分离" class="headerlink" title="13.为什么kafka不支持读写分离"></a>13.为什么kafka不支持读写分离</h2><p>支持主从，但不支持读写分离。主写从读</p><p>1.数据一致性问题</p><p>2.延时问题。redis是基于内存的，kafka是要写磁盘的</p><p>3.实现了主写从读后，实现不了负载均衡</p><p>4.不实现读写分离，架构简单，出错可能比较小</p><p>5.多副本的机制简单很多</p><h2 id="14-kafka是怎么做到消息顺序性的"><a href="#14-kafka是怎么做到消息顺序性的" class="headerlink" title="14.kafka是怎么做到消息顺序性的"></a>14.kafka是怎么做到消息顺序性的</h2><p>消息顺序 {1,2,3,4,5} 生产端肯定是单线程， 确定一个主题（只有一个分区partition),</p><p>保证一个主题里只有一个分区才可以。并且只有一个消费者。</p><h2 id="15-kafka为什么那么快"><a href="#15-kafka为什么那么快" class="headerlink" title="15.kafka为什么那么快"></a>15.kafka为什么那么快</h2><p>1.存储：文件存储。文件顺序读写。（接近于内存） </p><p>2.写入数据： 传统的4次拷贝，零拷贝技术，减少没有必要的拷贝。 sendfile。数据-&gt;网卡-&gt;DMA拷贝-&gt;网络socket缓冲区（本质就是内核的内存）-&gt;CPU拷贝-&gt;socket缓冲区（一般程序应用的内存）-&gt;CPU拷贝-&gt;磁盘缓冲区-&gt;DMA拷贝-&gt;磁盘。</p><p>4次拷贝：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240101193916944.png"></p><p>sendfile：文件描述符，在socket缓冲区中属于哪一段</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240101194334842.png"></p><p>节约了两次CPU拷贝，将socket缓冲区和磁盘缓冲区放一起。</p><p>3.批量处理，压缩，json的话7倍。</p><h2 id="16-如何解决重复消费"><a href="#16-如何解决重复消费" class="headerlink" title="16.如何解决重复消费"></a>16.如何解决重复消费</h2><p>去保证一个幂等性</p><p>1.MVCC多版本并发控制（生产的时候带上数据的版本号）</p><p>2.去重表的方案：A表里只有一个唯一字段id, try{  insert A –&gt;执行业务 } catch{异常不用抛出 ,吃掉异常}</p><h2 id="17-RocketMQ如何保证高可用"><a href="#17-RocketMQ如何保证高可用" class="headerlink" title="17.RocketMQ如何保证高可用"></a>17.RocketMQ如何保证高可用</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104095317236.png"></p><p>同步复制和异步刷盘。同步可以保证数据一定到从节点的内存。同步刷盘导致生产效率很低。</p><h2 id="18-RocketMQ中的存储机制了解吗"><a href="#18-RocketMQ中的存储机制了解吗" class="headerlink" title="18.RocketMQ中的存储机制了解吗"></a>18.RocketMQ中的存储机制了解吗</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104101000153.png"></p><p>即使是一万个主题，也只有一个commitLog,如果有很多commitLog会造成海量的IO切换。Kafka好像就是多个commitLog,RcoketMQ更适合电商场景。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104101135561.png"></p><h2 id="19-RocketMQ中性能比较高的原因"><a href="#19-RocketMQ中性能比较高的原因" class="headerlink" title="19.RocketMQ中性能比较高的原因"></a>19.RocketMQ中性能比较高的原因</h2><p>1.内部使用Netty这个高效的NIO通信框架</p><p>2.大量使用多线程和异步</p><p>3.采用零拷贝技术优化（MMAP） 性能提升50%</p><p>4.采用文件存储，顺序读写。接近内存的速度</p><p>5.锁优化（CAS机制无锁化）</p><p>6.存储设计：读写分离。</p><h2 id="20-如何设计一个消息队列"><a href="#20-如何设计一个消息队列" class="headerlink" title="20.如何设计一个消息队列"></a>20.如何设计一个消息队列</h2><p>存储：高可用-磁盘存储，顺序读写，零拷贝技术</p><p>可伸缩：分布式，参考Kafka,  broker  \topic\partition</p><p>消息的丢失：多主多从， 多副本，raft协议，一台主服务器宕机，选举机制。</p><p>消息重复设计</p><p>网络框架：Netty 高效的NIO框架。</p><h2 id="21-有几百万消息持续积压几个小时，如何解决"><a href="#21-有几百万消息持续积压几个小时，如何解决" class="headerlink" title="21.有几百万消息持续积压几个小时，如何解决"></a>21.有几百万消息持续积压几个小时，如何解决</h2><p>分析：消息积压–线上故障（消费者）</p><p>1.修复消费者。有可能消耗几个小时</p><p>临时扩容。 多搞几个消费者。把3个队列里的东西快速的放到30个队列里</p><h2 id="22-RocketMQ中Broker的部署方式"><a href="#22-RocketMQ中Broker的部署方式" class="headerlink" title="22.RocketMQ中Broker的部署方式"></a>22.RocketMQ中Broker的部署方式</h2><p>单机broker。</p><p>多Master。</p><p>多Master,多Slave.</p><h2 id="24-什么是路由注册，路由发现，路由剔除"><a href="#24-什么是路由注册，路由发现，路由剔除" class="headerlink" title="24.什么是路由注册，路由发现，路由剔除"></a>24.什么是路由注册，路由发现，路由剔除</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104104548063.png"></p><p>NameSever不会主动,每隔30秒Producer主动去拉。</p><p>路由就是broker.</p><h2 id="27-使用RocketMQ过程中遇到的问题"><a href="#27-使用RocketMQ过程中遇到的问题" class="headerlink" title="27.使用RocketMQ过程中遇到的问题"></a>27.使用RocketMQ过程中遇到的问题</h2><p>为了高可用，要搭建主从</p><p>消费者大于queue的数量，最后的消费者拿不到queue.一个queue不能给多个消费者消费。</p><h2 id="28-RocketMQ的总体架构，以及其中各个组件的功能"><a href="#28-RocketMQ的总体架构，以及其中各个组件的功能" class="headerlink" title="28.RocketMQ的总体架构，以及其中各个组件的功能"></a>28.RocketMQ的总体架构，以及其中各个组件的功能</h2><p>Netty负责网络通讯，store负责零拷贝存储。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104105756405.png"></p><h2 id="29-讲一讲RocketMQ中的分布式事务及其实现"><a href="#29-讲一讲RocketMQ中的分布式事务及其实现" class="headerlink" title="29.讲一讲RocketMQ中的分布式事务及其实现"></a>29.讲一讲RocketMQ中的分布式事务及其实现</h2><p>银行转账，A-&gt;B。</p><p>A账户 -100 SQL事务，B账户 +100 SQL事务</p><p>两阶段提交，半消息。MQ的消费者本身就会不断重试。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104110420703.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20240104110435196.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EffectiveJava读后感</title>
      <link href="/2023/12/25/effectivejava-du-hou-gan/"/>
      <url>/2023/12/25/effectivejava-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="EffectiveJava读后感"><a href="#EffectiveJava读后感" class="headerlink" title="EffectiveJava读后感"></a>EffectiveJava读后感</h1><h2 id="1-考虑以静态工厂方法代替构造函数"><a href="#1-考虑以静态工厂方法代替构造函数" class="headerlink" title="1.考虑以静态工厂方法代替构造函数"></a>1.考虑以静态工厂方法代替构造函数</h2><p>这个在实习项目中也用到过，比如XML的内部类里</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 红字发票     */</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedEInvoice</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 被红冲蓝字数电发票号码（备注）         */</span>        String OriginlInvoiceCode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 红字发票信息确认单编号         */</span>        String CreditNoteNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> RedEInvoice <span class="token function">getRedEInvoiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedEInvoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>因为红字发票类是内部类，外面拿不到。所以只能用这种getInstance的方法。</p><p>但其实这也不是静态方法，因为仍然是每次新构建对象。静态工厂应该只有一个对象。</p><h2 id="2-（用的不多？）面对许多构造函数参数时，考虑构建器"><a href="#2-（用的不多？）面对许多构造函数参数时，考虑构建器" class="headerlink" title="2.（用的不多？）面对许多构造函数参数时，考虑构建器"></a>2.（用的不多？）面对许多构造函数参数时，考虑构建器</h2><p>不想写一大堆不同的构造函数，又不想一个个调用set函数。可以考虑使用构建器，它既保证线程安全，又能提供较好的可读性。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Builder Pattern</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NutritionFacts</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servingSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> calories<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sodium<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> carbohydrate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Required parameters</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servingSize<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Optional parameters - initialized to default values</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> calories <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> fat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> sodium <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> carbohydrate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">int</span> servingSize<span class="token punctuation">,</span> <span class="token keyword">int</span> servings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>servingSize <span class="token operator">=</span> servingSize<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>servings <span class="token operator">=</span> servings<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">calories</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            calories <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">fat</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fat <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">sodium</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sodium <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">carbohydrate</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            carbohydrate <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> NutritionFacts <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">NutritionFacts</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        servingSize <span class="token operator">=</span> builder<span class="token punctuation">.</span>servingSize<span class="token punctuation">;</span>        servings <span class="token operator">=</span> builder<span class="token punctuation">.</span>servings<span class="token punctuation">;</span>        calories <span class="token operator">=</span> builder<span class="token punctuation">.</span>calories<span class="token punctuation">;</span>        fat <span class="token operator">=</span> builder<span class="token punctuation">.</span>fat<span class="token punctuation">;</span>        sodium <span class="token operator">=</span> builder<span class="token punctuation">.</span>sodium<span class="token punctuation">;</span>        carbohydrate <span class="token operator">=</span> builder<span class="token punctuation">.</span>carbohydrate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NutritionFacts cocaCola <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">calories</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sodium</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">carbohydrate</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-使用私有构造函数或枚举类型实现单例属性"><a href="#3-使用私有构造函数或枚举类型实现单例属性" class="headerlink" title="3.使用私有构造函数或枚举类型实现单例属性"></a>3.使用私有构造函数或枚举类型实现单例属性</h2><p>其中私有构造函数，其实还是要借助静态变量和静态函数。</p><h2 id="4-用私有构造函数保证不可实例化"><a href="#4-用私有构造函数保证不可实例化" class="headerlink" title="4.用私有构造函数保证不可实例化"></a>4.用私有构造函数保证不可实例化</h2><p>有些Java类我们不想实例化，只想调用它的静态方法，一般是对于一些工具类，如<code>java.lang.Math</code> 或 <code>java.util.Arrays</code>。</p><p>为了保证非实例化，我们可以将构造函数设为私有，这样使用者就没法实例化这个类了</p><h2 id="5-依赖注入优于硬连接资源"><a href="#5-依赖注入优于硬连接资源" class="headerlink" title="5.依赖注入优于硬连接资源"></a>5.依赖注入优于硬连接资源</h2><p>@Resource(name&#x3D;””)应该就是一种依赖注入，想注入啥就注入啥。</p><h2 id="6-避免创建不必要的对象"><a href="#6-避免创建不必要的对象" class="headerlink" title="6.避免创建不必要的对象"></a>6.避免创建不必要的对象</h2><p>下面语句会创建两个String对象：</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"bikini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// DON'T DO THIS!</span></code></pre><p>换一种写法就只会创建一个：</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"bikini"</span><span class="token punctuation">;</span></code></pre><p>也可以使用静态工厂来避免创建不必要的对象，如：<code>Boolean.valueOf(String)</code></p><p>也可以将创建的对象缓存以备复用。比如自动装箱。</p><h2 id="7-清除过时的对象引用"><a href="#7-清除过时的对象引用" class="headerlink" title="7.清除过时的对象引用"></a>7.清除过时的对象引用</h2><p>对于一个堆栈的实现，你不应该这样：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>应该要考虑把引用也删掉：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    elements<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Eliminate obsolete reference</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在被数组，MAP引用的时候这种情况容易发生。或者缓存忘记删除也会一直占用内存。</p><p>有两种解决办法：</p><ol><li><p>使用WeakHashMap。WeakHashMap当key没有再被外部引用时，条目会自动从WeakHashMap中删除。</p></li><li><p>采用缓存清除策略。典型的如LinkedHashMap实现的LRU。</p></li></ol><blockquote><p>WeakHashMap原理简析：</p><ol><li>添加entry时，设置entry为弱引用，指向这个entry的key，并将这个弱引用注册到referenceQueue上 </li><li>当key没有被外部引用时，GC触发时回收key，并导致entry（弱引用）被添加到referenceQueue中 。</li><li>当调用任意访问WeakHashMap的方法时，会触发expungeStaleEntries方法，将entry从WeakHashMap中移除。</li></ol></blockquote><h2 id="8-避免使用终结器和清除器"><a href="#8-避免使用终结器和清除器" class="headerlink" title="8.避免使用终结器和清除器"></a>8.避免使用终结器和清除器</h2><p>Finalizer和Cleaner通常是不必要、危险而且不可预测的。Finalizer在Java 9中已经被弃用，在后面的版本中用Cleaner替代Finalizer。前者比后者的危险小。</p><p>Finalizer和Cleaner不能被保证立即执行，它们的执行时间取决于具体的GC实现。而且使用它们会严重影响性能。</p><h2 id="9-使用-try-with-resources-优于-try-finally"><a href="#9-使用-try-with-resources-优于-try-finally" class="headerlink" title="9.使用 try-with-resources 优于 try-finally"></a>9.使用 try-with-resources 优于 try-finally</h2><p>用<code>try-finally</code>关闭资源，会使得代码可读性差，而且容易出错，特别是在关闭多个资源的时候。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// try-finally is ugly when used with more than one resource!</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>String src<span class="token punctuation">,</span> String dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果用<code>try-with-resources</code>就简单多了，且不易出错</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>String src<span class="token punctuation">,</span> String dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10-覆盖-equals-方法时应遵守通用约定"><a href="#10-覆盖-equals-方法时应遵守通用约定" class="headerlink" title="10.覆盖 equals 方法时应遵守通用约定"></a>10.覆盖 equals 方法时应遵守通用约定</h2><h2 id="11-当覆盖-equals-方法时，总要覆盖-hashCode-方法"><a href="#11-当覆盖-equals-方法时，总要覆盖-hashCode-方法" class="headerlink" title="11.当覆盖 equals 方法时，总要覆盖 hashCode 方法"></a>11.当覆盖 equals 方法时，总要覆盖 hashCode 方法</h2><p>当覆盖equals方法时，必须要覆盖hashCode方法。因为相等的对象必须要有相同的哈希码。</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>PhoneNumber<span class="token punctuation">,</span> String<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token number">707</span><span class="token punctuation">,</span> <span class="token number">867</span><span class="token punctuation">,</span> <span class="token number">5309</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Jenny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的例子执行后，你可能期望 <code>m.get(new PhoneNumber(707, 867,5309))</code> 返回”Jenny”，但是它返回 null。原因是用于检索的新对象虽然与旧对象相等，但是它们的哈希码不同，因此哈希码对应的哈希桶也不同，所以再也找不到了。</p><h2 id="12-始终覆盖-toString-方法"><a href="#12-始终覆盖-toString-方法" class="headerlink" title="12.始终覆盖 toString 方法"></a>12.始终覆盖 toString 方法</h2><h2 id="13-明智地覆盖-clone-方法"><a href="#13-明智地覆盖-clone-方法" class="headerlink" title="13.明智地覆盖 clone 方法"></a>13.明智地覆盖 clone 方法</h2><p>Object类中实现了clone方法，这个方法是native的，所做操作是<strong>浅拷贝</strong>，即把原对象完整拷贝过来并包括其中的引用。</p><p>我感觉还是用BeanUtils.copyProperties去复制属性比较好。</p><h2 id="14-考虑实现-Comparable-接口"><a href="#14-考虑实现-Comparable-接口" class="headerlink" title="14.考虑实现 Comparable 接口"></a>14.考虑实现 Comparable 接口</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你需要让类支持排序，那么就要实现<code>Comparable</code>接口。</p><p>或者实现<code>Comparator</code>接口</p><p>排序的另一种实现方式是实现<code>Comparator</code>接口，性能大概比<code>Comparable</code>慢10%，例如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Comparable with comparator construction methods</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Comparator<span class="token operator">&lt;</span>PhoneNumber<span class="token operator">></span> COMPARATOR <span class="token operator">=</span> <span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PhoneNumber pn<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pn<span class="token punctuation">.</span>areaCode<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">thenComparingInt</span><span class="token punctuation">(</span>pn <span class="token operator">-</span><span class="token operator">></span> pn<span class="token punctuation">.</span>prefix<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">thenComparingInt</span><span class="token punctuation">(</span>pn <span class="token operator">-</span><span class="token operator">></span> pn<span class="token punctuation">.</span>lineNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>PhoneNumber pn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> COMPARATOR<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有时人们会用计算差值的方法来实现<code>compare</code>方法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// BROKEN difference-based comparator - violates transitivity!</span><span class="token keyword">class</span> <span class="token class-name">DateWrap</span><span class="token punctuation">{</span>    Date date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> Comparator<span class="token operator">&lt;</span>DateWrap<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>DateWrap d1<span class="token punctuation">,</span> DateWrap d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> d2<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getTme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>但是这种做法是有缺陷的。在上例中，Date.getTime返回long型时间戳，两者的差值有可能溢出int。所以应该用Date类自带的比较方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Comparator based on static compare method s</span><span class="token keyword">static</span> Comparator<span class="token operator">&lt;</span>DateWrap<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>DateWrap d1<span class="token punctuation">,</span> DateWrap d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="15-尽量减少类和成员的可访问性"><a href="#15-尽量减少类和成员的可访问性" class="headerlink" title="15.尽量减少类和成员的可访问性"></a>15.尽量减少类和成员的可访问性</h2><p>对于成员（字段、方法、嵌套类和嵌套接口），存在四种访问级别，按可访问性从低到高分别是：</p><ol><li>私有（private）：成员只能从声明它的顶级类访问。</li><li>包级（package-private）：成员可以从声明它的类所在的包访问。不加修饰符时默认的访问级别。</li><li>保护（protected）：成员可以从声明它的类的子类和声明它的类所在的包访问。</li><li>公共（public）：成员可以从任意地方访问。</li></ol><table><thead><tr><th>修饰符</th><th>类内部</th><th>同个包（package)</th><th>子类</th><th>其他范围</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>无修饰符</td><td>Y</td><td>Y</td><td>Y or N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>需要特别说明“无修饰符”这个情况，子类能否访问父类中无修饰符的变量&#x2F;方法，取决于子类的位置。如果子类和父类在同一个包中，那么子类可以访问父类中的无修饰符的变量&#x2F;方法，否则不行。</p><h2 id="16-在公共类中，使用访问器方法，而不是公共字段"><a href="#16-在公共类中，使用访问器方法，而不是公共字段" class="headerlink" title="16.在公共类中，使用访问器方法，而不是公共字段"></a>16.在公共类中，使用访问器方法，而不是公共字段</h2><p>应该通过setter、getter方法访问。</p><h2 id="17-减少可变性"><a href="#17-减少可变性" class="headerlink" title="17.减少可变性"></a>17.减少可变性</h2><p>不可变类是实例不能被修改的类。Java中有很多不可变类，如String、Integer等。不可变类的优点是：简单、线程安全，可作为缓存共享。</p><p>不可变类的缺点是每个不同的值都需要一个单独的对象。这样会产生很多对象创建和回收的开销。解决办法是提供一个公共可变伴随类。例如String的公共可变伴随类就是StringBuilder，用后者处理多个字符串的拼接时可以减少对象创建数量。</p><h2 id="18-优先选择组合而不是继承"><a href="#18-优先选择组合而不是继承" class="headerlink" title="18.优先选择组合而不是继承"></a>18.优先选择组合而不是继承</h2><h2 id="19-继承要设计良好并且具有文档，否则禁止使用"><a href="#19-继承要设计良好并且具有文档，否则禁止使用" class="headerlink" title="19.继承要设计良好并且具有文档，否则禁止使用"></a>19.继承要设计良好并且具有文档，否则禁止使用</h2><h2 id="20-接口优于抽象类"><a href="#20-接口优于抽象类" class="headerlink" title="20.接口优于抽象类"></a>20.接口优于抽象类</h2><p>接口相对抽象类的优点是：</p><ol><li>一个类只能继承单个抽象类，却能实现多个接口。</li><li>接口的使用更加灵活，可以很容易对现有类进行改造，实现新的接口。</li><li>接口允许构造非层次化类型结构。示例如下，有一个歌手接口和一个歌曲作者接口：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span>     AudioClip <span class="token function">sing</span><span class="token punctuation">(</span>Song s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Songwriter</span> <span class="token punctuation">{</span>     Song <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">int</span> chartPosition<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>如果有人既是歌手，又是歌曲作者，那么我们通过创建一个新的接口就能很容易实现这个需求：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SingerSongwriter</span> <span class="token keyword">extends</span> <span class="token class-name">Singer</span><span class="token punctuation">,</span> Songwriter <span class="token punctuation">{</span>    AudioClip <span class="token function">strum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">actSensitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为了代码复用，可以为接口提供默认方法。但是默认方法有不少限制，例如编译器会阻止你提供一个与Object类中的方法重复的默认方法，而且接口不允许包含实例字段或非公共静态成员（私有静态方法除外）。</p><p>这时可以实现一个抽象骨架类来结合抽象类和接口的优点。例如Java类库中的AbstractList就是典型的抽象骨架类。抽象骨架类使用了设计模式中的<strong>模板模式</strong>。</p><p>在模板模式（Template Pattern）中，一个<strong>抽象类</strong>公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模板</span>   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//初始化游戏</span>      <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//开始游戏</span>      <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结束游戏</span>      <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你去继承Game类，然后重写其中的initialize(),startPlay(),endPlay()方法。但是最后调用play()函数的执行顺序肯定是按模版去走的。</p><h2 id="21-为后代设计接口"><a href="#21-为后代设计接口" class="headerlink" title="21.为后代设计接口"></a>21.为后代设计接口</h2><p>接口的默认方法可能不适用于后代，要谨慎。</p><h2 id="22-接口只用于定义类型"><a href="#22-接口只用于定义类型" class="headerlink" title="22.接口只用于定义类型"></a>22.接口只用于定义类型</h2><p>接口只应该用来定义类型，不要用来导出常量。</p><h2 id="23-类层次结构优于带标签的类"><a href="#23-类层次结构优于带标签的类" class="headerlink" title="23.类层次结构优于带标签的类"></a>23.类层次结构优于带标签的类</h2><p>类层次结构，三个类：图形，圆继承自图形，方形继承自图形</p><p>带标签的类：一个类大杂烩。</p><h2 id="24-静态成员类优于非静态成员类"><a href="#24-静态成员类优于非静态成员类" class="headerlink" title="24.静态成员类优于非静态成员类"></a>24.静态成员类优于非静态成员类</h2><p>嵌套类共有四种：静态成员类、非静态成员类、匿名类和局部类。它们各自有不同的适用场合。判断方法见如下流程图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/EffectiveJava%E8%AF%BB%E5%90%8E%E6%84%9F/image/image-20231225151348738.png"></p><p>每种嵌套类的常见例子总结如下：</p><ol><li>静态成员类：作为公共的辅助类，如Map中的Entry类。</li><li>非静态成员类：Map的entrySet、keySet方法返回的视图，List、Set中的迭代器。</li><li>匿名类：新建Comparable、Runnable接口实现类，可用lambda表达式替代。</li><li>局部类：与匿名类的区别仅为有名字，可重复使用。</li></ol><p>下面重点谈谈静态成员类和非静态成员类的取舍。如果成员类不需要访问外部实例，那么始终应该设置其为静态的。因为非静态的成员类会持有对外部类的引用，增加时间空间代价，而且会影响对外部类的垃圾回收。</p><h2 id="25-源文件仅限有单个顶层类"><a href="#25-源文件仅限有单个顶层类" class="headerlink" title="25.源文件仅限有单个顶层类"></a>25.源文件仅限有单个顶层类</h2><h2 id="26-不要使用原始类型"><a href="#26-不要使用原始类型" class="headerlink" title="26.不要使用原始类型"></a>26.不要使用原始类型</h2><p>例如，<code>List&lt;E&gt;</code> 对应的原始类型是 List。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unsafeAdd</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你想使用泛型，但不知道或不关心实际的类型参数是什么，那么可以使用问号代替。例如，泛型集合 <code>Set&lt;E&gt;</code> 的无界通配符类型是 <code>Set&lt;?&gt;</code>。它是最通用的参数化集合类型，能够容纳任何集合：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Uses unbounded wildcard type - typesafe and flexible</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">numElementsInCommon</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> s1<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><h2 id="27-消除-unchecked-警告"><a href="#27-消除-unchecked-警告" class="headerlink" title="27.消除 unchecked 警告"></a>27.消除 unchecked 警告</h2><p>使用泛型编程时，很容易看到unchecked编译器警告。我们应该尽可能消除这些警告。消除所有这些警告后，我们就能确保代码是类型安全的。</p><p>但有时警告无法消除，如果我们可以证明代码是类型安全的，可以通过SuppressWarnings(“unchecked”) 注解来抑制警告。</p><h2 id="28-list-优于数组"><a href="#28-list-优于数组" class="headerlink" title="28.list 优于数组"></a>28.list 优于数组</h2><h2 id="29-优先使用泛型类型"><a href="#29-优先使用泛型类型" class="headerlink" title="29.优先使用泛型类型"></a>29.优先使用泛型类型</h2><p>应该尽量在自己编写的类型中使用泛型，这会保证类型安全，并使代码更易使用。</p><p>下面我们通过例子来看下如何对一个现有类做泛型化改造。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>我们用适当的类型参数替换所有的 Object 类型，然后尝试编译修改后的程序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">[</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时生成一个错误,讲到不能创建一个非具体化类型的数组。因此我们修改为：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    elements <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="30-优先使用泛型方法"><a href="#30-优先使用泛型方法" class="headerlink" title="30.优先使用泛型方法"></a>30.优先使用泛型方法</h2><h2 id="31-使用有界通配符增加-API-的灵活性"><a href="#31-使用有界通配符增加-API-的灵活性" class="headerlink" title="31.使用有界通配符增加 API 的灵活性"></a>31.使用有界通配符增加 API 的灵活性</h2><p>考虑第29条中的堆栈类。我们创建一个<code>Stack&lt;Number&gt;</code>类型的堆栈，并在其中插入integer。</p><pre class=" language-java"><code class="language-java">Stack<span class="token operator">&lt;</span>Number<span class="token operator">></span> numberStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>numberStack<span class="token punctuation">.</span><span class="token function">pushAll</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个例子在直觉上似乎是没问题的。然而实际执行的时候会报错。</p><p>解决办法是使用带extends的有界通配符类型。下面代码表示泛型参数为E的子类型（包括E类型本身）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Wildcard type for a parameter that serves as an E producer</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> src<span class="token punctuation">)</span>        <span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解决办法是使用带super的有界通配符类型。下面例子表示泛型参数为E的超类（包括E类型本身）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Wildcard type for parameter that serves as an E consumer</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">popAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>总结上面例子的经验，就是生产者用extends通配符，消费者用super通配符。</p><h2 id="32-明智地合用泛型和可变参数"><a href="#32-明智地合用泛型和可变参数" class="headerlink" title="32.明智地合用泛型和可变参数"></a>32.明智地合用泛型和可变参数</h2><h2 id="33-考虑类型安全的异构容器"><a href="#33-考虑类型安全的异构容器" class="headerlink" title="33.考虑类型安全的异构容器"></a>33.考虑类型安全的异构容器</h2><p>泛型部分太难了呜呜呜。</p><h2 id="34-用枚举类型代替-Int-常量"><a href="#34-用枚举类型代替-Int-常量" class="headerlink" title="34.用枚举类型代替 Int 常量"></a>34.用枚举类型代替 Int 常量</h2><p>一般单独用一个临时的常数变量用Int，有多个类似的常量参数用枚举。</p><p>枚举类型相比int常量有不少优点，如：能提供类型安全性，能提供toString方法打印字符串，还允许添加任意方法和字段并实现任意接口，使得枚举成为功能齐全的抽象（富枚举类型）。</p><p>一般来说，枚举在性能上可与 int 常量相比，不过加载和初始化枚举类型需要花费空间和时间，实际应用中这一点可能不太明显。</p><h2 id="35-使用实例字段替代序数"><a href="#35-使用实例字段替代序数" class="headerlink" title="35.使用实例字段替代序数"></a>35.使用实例字段替代序数</h2><h2 id="36-用-EnumSet-替代位字段"><a href="#36-用-EnumSet-替代位字段" class="headerlink" title="36.用 EnumSet 替代位字段"></a>36.用 EnumSet 替代位字段</h2><h2 id="37-使用-EnumMap-替换序数索引"><a href="#37-使用-EnumMap-替换序数索引" class="headerlink" title="37.使用 EnumMap 替换序数索引"></a>37.使用 EnumMap 替换序数索引</h2><p><strong>用序数索引数组不如使用 EnumMap ，应尽量少使用 <code>ordinal()</code></strong> </p><h2 id="38-使用接口模拟可扩展枚举"><a href="#38-使用接口模拟可扩展枚举" class="headerlink" title="38.使用接口模拟可扩展枚举"></a>38.使用接口模拟可扩展枚举</h2><h2 id="39-注解优于命名模式"><a href="#39-注解优于命名模式" class="headerlink" title="39.注解优于命名模式"></a>39.注解优于命名模式</h2><h2 id="40-坚持使用-Override-注解"><a href="#40-坚持使用-Override-注解" class="headerlink" title="40.坚持使用 @Override 注解"></a>40.坚持使用 @Override 注解</h2><h2 id="41-使用标记接口定义类型"><a href="#41-使用标记接口定义类型" class="headerlink" title="41.使用标记接口定义类型"></a>41.使用标记接口定义类型</h2><h2 id="42-λ-表达式优于匿名类"><a href="#42-λ-表达式优于匿名类" class="headerlink" title="42.λ 表达式优于匿名类"></a>42.λ 表达式优于匿名类</h2><p>匿名类：</p><pre class=" language-javajava"><code class="language-javajava">// Anonymous class instance as a function object - obsolete!Collections.sort(words, new Comparator<String>() {    public int compare(String s1, String s2) {        return Integer.compare(s1.length(), s2.length());    }});</code></pre><p>lambda表达式</p><pre class=" language-javajava"><code class="language-javajava">Collections.sort(words,(s1, s2) -> Integer.compare(s1.length(), s2.length()));</code></pre><h2 id="43-方法引用优于-λ-表达式"><a href="#43-方法引用优于-λ-表达式" class="headerlink" title="43.方法引用优于 λ 表达式"></a>43.方法引用优于 λ 表达式</h2><p><strong>方法引用通常比lambda 表达式更简洁，应优先使用。</strong></p><p>下面一个程序的代码片段的功能是：如果数字 1 不在映射中，则将其与键关联，如果键已经存在，则将关联值递增：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> incr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> count <span class="token operator">+</span> incr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 Java 8 中，Integer类提供了一个静态方法 sum，它的作用完全相同，且更简单：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 lambda 表达式太长或太复杂，那么可以将代码从 lambda 表达式提取到一个新方法中，并以对该方法的引用替换 lambda 表达式。可以为该方法起一个好名字并将其文档化.</p><h2 id="44-优先使用标准函数式接口"><a href="#44-优先使用标准函数式接口" class="headerlink" title="44.优先使用标准函数式接口"></a>44.优先使用标准函数式接口</h2><p><strong>如果一个标准的函数式接口可以完成这项工作，那么你通常应该优先使用它，而不是使用专门构建的函数式接口。</strong></p><p><code>java.util.function</code> 中有 43 个接口。可以只用记住 6 个基本接口，其余的接口在需要时派生出来：</p><ol><li>Operator 接口：表示结果和参数类型相同的函数。（根据参数数量可分为一元、二元）</li><li>Predicate 接口：表示接受参数并返回布尔值的函数。</li><li>Function 接口：表示参数和返回类型不同的函数。</li><li>Supplier 接口：表示一个不接受参数并返回值的函数。</li><li>Consumer 接口：表示一个函数，该函数接受一个参数，但不返回任何内容，本质上是使用它的参数。</li></ol><p>六个基本的函数式接口总结如下：</p><table><thead><tr><th>接口</th><th>方法签名</th><th>例子</th></tr></thead><tbody><tr><td>UnaryOperator<T></td><td>T apply(T t)</td><td>String::toLowerCase</td></tr><tr><td>BinaryOperator<T></td><td>T apply(T t1, T t2)</td><td>BigInteger::add</td></tr><tr><td>Predicate<T></td><td>boolean test(T t)</td><td>Collection::isEmpty</td></tr><tr><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td><td>Arrays::asList</td></tr><tr><td>Supplier<T></td><td>T get()</td><td>Instant::now</td></tr><tr><td>Consumer<T></td><td>void accept(T t)</td><td>System.out::println</td></tr></tbody></table><h2 id="45-明智地使用流"><a href="#45-明智地使用流" class="headerlink" title="45.明智地使用流"></a>45.明智地使用流</h2><h2 id="46-在流中使用无副作用的函数"><a href="#46-在流中使用无副作用的函数" class="headerlink" title="46.在流中使用无副作用的函数"></a>46.在流中使用无副作用的函数</h2><h2 id="47-优先选择-Collection-而不是流作为返回类型"><a href="#47-优先选择-Collection-而不是流作为返回类型" class="headerlink" title="47.优先选择 Collection 而不是流作为返回类型"></a>47.优先选择 Collection 而不是流作为返回类型</h2><h2 id="48-谨慎使用并行流"><a href="#48-谨慎使用并行流" class="headerlink" title="48.谨慎使用并行流"></a>48.谨慎使用并行流</h2><p>并行性能带来明显性能提升的场合：</p><ol><li>ArrayList、HashMap、HashSet 和 ConcurrentHashMap 实例</li><li>数组</li><li>有界的IntStream和LongStream</li></ol><p>这些数据结构的共同之处是：</p><ol><li><p>可以被精确且廉价地分割成任意大小的子结构，这使得在并行线程之间划分工作变得很容易。</p></li><li><p>顺序处理时提供了良好的引用局部性（locality of reference）。引用局部性是指，当一个存储位置被处理器访问时，短时间内这个位置及附近位置被重复访问的趋势。良好的引用局部性可以充分利用处理器的多级缓存，带来性能提升。</p></li></ol><p><strong>绝大多数情况下，不要并行化流管道，除非通过测试证明它能保持计算的正确性以及提高性能。</strong></p><h2 id="49-检查参数的有效性"><a href="#49-检查参数的有效性" class="headerlink" title="49.检查参数的有效性"></a>49.检查参数的有效性</h2><p>一些非空的判断，大于等于0的判断等</p><h2 id="50-在需要时制作防御性拷贝"><a href="#50-在需要时制作防御性拷贝" class="headerlink" title="50.在需要时制作防御性拷贝"></a>50.在需要时制作防御性拷贝</h2><h2 id="51-仔细设计方法签名"><a href="#51-仔细设计方法签名" class="headerlink" title="51. 仔细设计方法签名"></a>51. 仔细设计方法签名</h2><p><strong>仔细选择方法名字</strong></p><p><strong>提供便利的方法不应做过了头。</strong> 太多的方法会使得类难以维护。</p><p><strong>避免长参数列表。</strong> 设定四个或更少的参数，有三种方法可以缩短过长的参数列表：</p><ol><li>将原方法分解为多个子方法。原方法的功能由多个字方法组合实现，这样每个子方法只需要参数的一个子集。</li><li>创建 helper 类来保存参数组。</li><li>从对象构建到方法调用都采用建造者模式。</li></ol><p><strong>对于方法的参数类型，优先选择接口而不是类</strong>。例如优先选择Map而不是HashMap作为方法的参数类型。</p><p><strong>对于方法的参数类型，优先选择双元素枚举类型而不是boolean</strong> 。枚举使代码更容易维护。此外，它们使以后添加更多选项变得更加容易。例如，你可能有一个Thermometer（温度计）类型与静态工厂，采用枚举：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> TemperatureScale <span class="token punctuation">{</span> FAHRENHEIT<span class="token punctuation">,</span> CELSIUS <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 华氏、摄氏</span></code></pre><p><code>Thermometer.newInstance(TemperatureScale.CELSIUS)</code> 不仅比 <code>Thermometer.newInstance(true)</code> 更有意义，而且你可以在将来的版本中向 TemperatureScale 添加 KELVIN（开尔文、热力学温标）。</p><h2 id="52-明智地使用重载overload"><a href="#52-明智地使用重载overload" class="headerlink" title="52. 明智地使用重载overload"></a>52. 明智地使用重载overload</h2><p>下面的程序是一个善意的尝试，根据一个 Collection 是 Set、List 还是其他的集合类型来进行分类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Broken! - What does this program print?</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionClassifier</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">classify</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Set"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">classify</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> lst<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"List"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">classify</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Unknown Collection"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> collections <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>BigInteger<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">:</span> collections<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">classify</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你期望的是：这个程序打印 Set、List 和 Unknown Collection，但结果是：它打印 Unknown Collection 三次。因为classify方法被重载，并且在编译时就决定了要调用哪个重载。</p><p>注意，<strong>重载（overload）方法的选择是静态的，而覆盖（override）方法的选择是动态的。</strong> </p><p>修复 CollectionClassifier 程序的最佳方法是用一个方法中用instanceof做类型判断：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">classify</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c <span class="token keyword">instanceof</span> <span class="token class-name">Set</span> <span class="token operator">?</span> <span class="token string">"Set"</span> <span class="token operator">:</span>c <span class="token keyword">instanceof</span> <span class="token class-name">List</span> <span class="token operator">?</span> <span class="token string">"List"</span> <span class="token operator">:</span> <span class="token string">"Unknown Collection"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>应该避免混淆重载的用法。最保守的策略是永远不生成具有相同参数数量的两个重载。或者为方法提供不同的名字，这样就可以不用重载。</p><h2 id="53-明智地使用可变参数"><a href="#53-明智地使用可变参数" class="headerlink" title="53.明智地使用可变参数"></a>53.明智地使用可变参数</h2><p>可变参数方法接受指定类型的零个或多个参数。可变参数的底层是一个数组。</p><p>一个简单的可变参数例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Simple use of varargs</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> arg<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>建议只对三个以上参数进行可变参数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>而且还要判断可变参数是否为null</p><h2 id="54-返回空集合或数组，而不是-null"><a href="#54-返回空集合或数组，而不是-null" class="headerlink" title="54.返回空集合或数组，而不是 null"></a>54.返回空集合或数组，而不是 null</h2><p>如果新创建空集合会损害性能，那么可以通过重复返回空的不可变集合来避免新的创建：</p><p>如果你创建零长度数组会损害性能，你可以重复返回相同的零长度数组：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Optimization - avoids allocating empty arrays</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Cheese<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_CHEESE_ARRAY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cheese</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> Cheese<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCheeses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cheesesInStock<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>EMPTY_CHEESE_ARRAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="55-明智地的返回-Optional"><a href="#55-明智地的返回-Optional" class="headerlink" title="55.明智地的返回 Optional"></a>55.明智地的返回 Optional</h2><p>不应该在除方法返回值以外的任何地方使用Optional</p><h2 id="56-为所有公开的-API-元素编写文档注释"><a href="#56-为所有公开的-API-元素编写文档注释" class="headerlink" title="56. 为所有公开的 API 元素编写文档注释"></a>56. 为所有公开的 API 元素编写文档注释</h2><p>方法的文档注释应该简洁地描述方法与其调用者之间的约定，包括： 1. 说明方法做了什么，而不是如何做。 2. 应列举方法所有的前置条件和后置条件。 3. 说明方法产生的副作用。如启动一个新的后台线程。 4. 应包含必要的@param、@return 和@throw注释。</p><h2 id="57-将局部变量的作用域最小化"><a href="#57-将局部变量的作用域最小化" class="headerlink" title="57.将局部变量的作用域最小化"></a>57.将局部变量的作用域最小化</h2><p>将局部变量的作用域最小化，最有效的办法就是在第一次使用它的地方声明。</p><h2 id="58-for-each-循环优于传统的-for-循环"><a href="#58-for-each-循环优于传统的-for-循环" class="headerlink" title="58.for-each 循环优于传统的 for 循环"></a>58.for-each 循环优于传统的 for 循环</h2><p>for-each:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// The preferred idiom for iterating over collections and arrays</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Element e <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// Do something with e</span><span class="token punctuation">}</span></code></pre><p>但是有三种情况不应该使用for-each：</p><ol><li>破坏性过滤：如果需要在遍历过程中删除元素，那么应该使用iterator和remove方法。Java 8中可以使用Collection类中提供的removeIf方法达到同样效果。</li><li>转换：如果需要在遍历List或者数组的时候替换其中部分元素的值，那么需要使用迭代器或者数组索引。</li><li>并行迭代：如果需要并行遍历多个容器，那么需要使用迭代器，自行控制迭代进度。</li></ol><h2 id="59-了解并使用库"><a href="#59-了解并使用库" class="headerlink" title="59. 了解并使用库"></a>59. 了解并使用库</h2><h2 id="60-若需要精确答案就应避免使用-float-和-double-类型"><a href="#60-若需要精确答案就应避免使用-float-和-double-类型" class="headerlink" title="60.若需要精确答案就应避免使用 float 和 double 类型"></a>60.若需要精确答案就应避免使用 float 和 double 类型</h2><h2 id="61-基本数据类型优于包装类"><a href="#61-基本数据类型优于包装类" class="headerlink" title="61.基本数据类型优于包装类"></a>61.基本数据类型优于包装类</h2><p>下列场合应该使用包装类型，而不能使用基本类型：</p><ol><li>作为容器中的元素、键和值。</li><li>参数化的类型和方法的类型参数。</li><li>在做反射方法调用时。</li></ol><h2 id="62-其他类型更合适时应避免使用字符串"><a href="#62-其他类型更合适时应避免使用字符串" class="headerlink" title="62.其他类型更合适时应避免使用字符串"></a>62.其他类型更合适时应避免使用字符串</h2><h2 id="63-当心字符串连接引起的性能问题"><a href="#63-当心字符串连接引起的性能问题" class="headerlink" title="63.当心字符串连接引起的性能问题"></a>63.当心字符串连接引起的性能问题</h2><h2 id="64-通过接口引用对象"><a href="#64-通过接口引用对象" class="headerlink" title="64.通过接口引用对象"></a>64.通过接口引用对象</h2><p>如果存在合适的接口类型，那么应该使用接口类型声明参数、返回值、变量和字段。下面例子遵循了这个准则：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Good - uses interface as type</span>Set<span class="token operator">&lt;</span>Son<span class="token operator">></span> sonSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="65-接口优于反射"><a href="#65-接口优于反射" class="headerlink" title="65. 接口优于反射"></a>65. 接口优于反射</h2><p>反射机制java.lang.reflect提供对任意类的编程访问。反射提供的功能包括：</p><ol><li>获取类的成员名、字段类型、方法签名。</li><li>构造类的实例，调用类的方法，访问类的字段。</li><li>允许一个类使用另一个编译时还不存在的类。</li></ol><p>但是反射也有一些缺点：</p><ol><li>失去了编译时类型检查的所有好处，包括异常检查。</li><li>执行反射访问时所需的代码比普通代码更加冗长。</li><li>反射方法调用比普通方法调用慢得多。</li></ol><p>对于许多程序，它们必须用到在编译时无法获取的类。这时可以用反射创建实例，并通过它们的接口或超类访问它们。</p><h2 id="66-明智地使用本地方法"><a href="#66-明智地使用本地方法" class="headerlink" title="66.明智地使用本地方法"></a>66.明智地使用本地方法</h2><h2 id="67-明智地进行优化"><a href="#67-明智地进行优化" class="headerlink" title="67.明智地进行优化"></a>67.明智地进行优化</h2><h2 id="68-遵守被广泛认可的命名约定"><a href="#68-遵守被广泛认可的命名约定" class="headerlink" title="68.遵守被广泛认可的命名约定"></a>68.遵守被广泛认可的命名约定</h2><h2 id="69-仅在有异常条件时使用异常"><a href="#69-仅在有异常条件时使用异常" class="headerlink" title="69.仅在有异常条件时使用异常"></a>69.仅在有异常条件时使用异常</h2><h2 id="70-对可恢复情况使用受检异常，对编程错误使用运行时异常"><a href="#70-对可恢复情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="70.对可恢复情况使用受检异常，对编程错误使用运行时异常"></a>70.对可恢复情况使用受检异常，对编程错误使用运行时异常</h2><p>Java 提供了三种可抛出项：受检异常（checked exception）、运行时异常（runtime exception）和错误（error）。</p><p>使用受检异常的情况是为了期望调用者能够从中恢复。其他两种可抛出项都是非受检的。</p><p>使用运行时异常来表示编程错误。 例如数组越界ArrayIndexOutOfBoundsException。如果对于选择受检异常还是运行时异常有疑问，那么推荐还是使用运行时异常。</p><p>错误保留给 JVM 使用，用于表示：资源不足、不可恢复故障或其他导致无法继续执行的条件。不要自己定义新的错误类型。</p><h2 id="71-避免不必要地使用受检异常"><a href="#71-避免不必要地使用受检异常" class="headerlink" title="71.避免不必要地使用受检异常"></a>71.避免不必要地使用受检异常</h2><h2 id="72-鼓励复用标准异常"><a href="#72-鼓励复用标准异常" class="headerlink" title="72.鼓励复用标准异常"></a>72.鼓励复用标准异常</h2><p>此表总结了最常见的可复用异常：</p><table><thead><tr><th>Exception</th><th>Occasion for Use</th></tr></thead><tbody><tr><td>IllegalArgumentException</td><td>非null参数值不合适</td></tr><tr><td>IllegalStateException</td><td>对象状态不适用于方法调用</td></tr><tr><td>NullPointerException</td><td>禁止参数为null时仍传入 null</td></tr><tr><td>IndexOutOfBoundsException</td><td>索引参数值超出范围</td></tr><tr><td>ConcurrentModificationException</td><td>在禁止并发修改对象的地方检测到并发修改</td></tr><tr><td>UnsupportedOperationException</td><td>对象不支持该方法调用</td></tr></tbody></table><h2 id="73-抛出与抽象级别相匹配的异常"><a href="#73-抛出与抽象级别相匹配的异常" class="headerlink" title="73.抛出与抽象级别相匹配的异常"></a>73.抛出与抽象级别相匹配的异常</h2><h2 id="74-为每个方法记录会抛出的所有异常"><a href="#74-为每个方法记录会抛出的所有异常" class="headerlink" title="74.为每个方法记录会抛出的所有异常"></a>74.为每个方法记录会抛出的所有异常</h2><h2 id="75-详细消息中应包含失败捕获的信息"><a href="#75-详细消息中应包含失败捕获的信息" class="headerlink" title="75.详细消息中应包含失败捕获的信息"></a>75.详细消息中应包含失败捕获的信息</h2><h2 id="76-尽力保证故障原子性"><a href="#76-尽力保证故障原子性" class="headerlink" title="76.尽力保证故障原子性"></a>76.尽力保证故障原子性</h2><h2 id="77-不要忽略异常"><a href="#77-不要忽略异常" class="headerlink" title="77.不要忽略异常"></a>77.不要忽略异常</h2><h2 id="78-对共享可变数据的同步访问"><a href="#78-对共享可变数据的同步访问" class="headerlink" title="78.对共享可变数据的同步访问"></a>78.对共享可变数据的同步访问</h2><p>volatile不保证变量读写的原子性，解决办法是使用原子变量。</p><h2 id="79-避免过度同步"><a href="#79-避免过度同步" class="headerlink" title="79.避免过度同步"></a>79.避免过度同步</h2><h2 id="80-Executor、task、stream优于直接使用线程"><a href="#80-Executor、task、stream优于直接使用线程" class="headerlink" title="80. Executor、task、stream优于直接使用线程"></a>80. Executor、task、stream优于直接使用线程</h2><h2 id="81-并发实用工具优于wait-notify"><a href="#81-并发实用工具优于wait-notify" class="headerlink" title="81.并发实用工具优于wait-notify"></a>81.并发实用工具优于wait-notify</h2><p>直接使用wait-notify就像使用“并发汇编语言”编程一样原始，你应该使用更高级别的并发实用工具。比如ConcurrentHashMap.</p><p>对于间隔计时，始终使用 System.nanoTime 而不是 System.currentTimeMillis。 System.nanoTime 不仅更准确和精确，而且不受系统实时时钟调整的影响。</p><h2 id="82-使线程安全文档化"><a href="#82-使线程安全文档化" class="headerlink" title="82.使线程安全文档化"></a>82.使线程安全文档化</h2><h2 id="83-明智地使用延迟初始化"><a href="#83-明智地使用延迟初始化" class="headerlink" title="83.明智地使用延迟初始化"></a>83.明智地使用延迟初始化</h2><p>在多线程竞争的情况下，使用延迟初始化容易导致错误。</p><h2 id="84-不要依赖线程调度器"><a href="#84-不要依赖线程调度器" class="headerlink" title="84.不要依赖线程调度器"></a>84.不要依赖线程调度器</h2><p>任何依赖线程调度器来保证正确性或性能的程序都无法保证可移植性。</p><h2 id="85-优先选择-Java-序列化的替代方案"><a href="#85-优先选择-Java-序列化的替代方案" class="headerlink" title="85.优先选择 Java 序列化的替代方案"></a>85.优先选择 Java 序列化的替代方案</h2><p>用于取代Java序列化，领先的跨平台结构化数据是JSON和<strong>Protobuf</strong></p><h2 id="86-非常谨慎地实现Serializable"><a href="#86-非常谨慎地实现Serializable" class="headerlink" title="86.非常谨慎地实现Serializable"></a>86.非常谨慎地实现Serializable</h2><p>实现Serializable接口会带来以下代价： 1. 一旦类的实现被发布，它就会降低更改该类实现的灵活性。需要永远支持序列化的形式。 2. 增加了出现 bug 和安全漏洞的可能性。 3. 它增加了与发布类的新版本相关的测试负担</p><h2 id="87-考虑使用自定义序列化形式"><a href="#87-考虑使用自定义序列化形式" class="headerlink" title="87.考虑使用自定义序列化形式"></a>87.考虑使用自定义序列化形式</h2><p>transient<strong>修饰符表示要从类的默认序列化中省略该实例字段</strong></p><h2 id="88-防御性地编写readObject方法"><a href="#88-防御性地编写readObject方法" class="headerlink" title="88.防御性地编写readObject方法"></a>88.防御性地编写readObject方法</h2><h2 id="89-对于实例控制，枚举类型优于readResolve"><a href="#89-对于实例控制，枚举类型优于readResolve" class="headerlink" title="89. 对于实例控制，枚举类型优于readResolve"></a>89. 对于实例控制，枚举类型优于readResolve</h2><h2 id="90-考虑以序列化代理代替序列化实例"><a href="#90-考虑以序列化代理代替序列化实例" class="headerlink" title="90. 考虑以序列化代理代替序列化实例"></a>90. 考虑以序列化代理代替序列化实例</h2>]]></content>
      
      
      <categories>
          
          <category> Effective-Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis原理篇-黑马</title>
      <link href="/2023/12/16/redis-yuan-li-pian-hei-ma/"/>
      <url>/2023/12/16/redis-yuan-li-pian-hei-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis原理篇-黑马"><a href="#Redis原理篇-黑马" class="headerlink" title="Redis原理篇-黑马"></a>Redis原理篇-黑马</h1><p>参考文章：<a href="https://blog.csdn.net/2301_77450803/article/details/130691756">https://blog.csdn.net/2301_77450803/article/details/130691756</a></p><h2 id="动态字符串-SDS"><a href="#动态字符串-SDS" class="headerlink" title="动态字符串-SDS"></a>动态字符串-SDS</h2><p>C语言字符串存在很多问题：获取字符串长度的需要通过运算,非二进制安全,不可修改</p><p>SDS是一个结构体：当flag&#x3D;1时，为uint8_t的类型</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121214640627.png"></p><p>假如我们要给SDS追加一段字符串“,Amy”，这里首先会申请新内存空间：</p><p>如果新字符串小于1M，则新空间为扩展后字符串长度的两倍+1；</p><p>如果新字符串大于1M，则新空间为扩展后字符串长度+1M+1。称为<strong>内存预分配</strong></p><p>SDS的优点：</p><p>①获取字符串长度的时间复杂度为O(1)</p><p>②支持动态扩容</p><p>③减少内存分配次数</p><p>④二进制安全</p><h2 id="IntSet"><a href="#IntSet" class="headerlink" title="IntSet"></a>IntSet</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121215423558.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121215504565.png"></p><p>先把20放到合适的位置，再放10，再放5.</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121215554724.png"></p><p>Intset的一些特点：</p><p>①Redis会确保Intset中的元素唯一、有序</p><p>②具备类型升级机制，可以节省内存空间</p><p>③底层采用二分查找方式来查询</p><h2 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121220939065.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121220320505.png"></p><p>uDict采用渐进式rehash，每次访问Dict时执行一次rehash</p><p>urehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表</p><h2 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h2><p>ZipList特性：</p><p>①压缩列表的可以看做一种连续内存空间的”双向链表”</p><p>②列表的节点之间不是通过指针连接，而是记录上一节点和本节点长度来寻址，内存占用较低</p><p>③如果列表数据过多，导致链表过长，可能影响查询性能</p><p>④增或删较大数据时有可能发生连续更新问题</p><h2 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121222140101.png"></p><p>每个ZipList的内存占用不能超过8kb（可配置），控制ziplist占用内存的大小。</p><p>zipList的中间节点可以压缩，进一步节省了内存</p><h2 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121222830742.png"></p><h2 id="Redis五种数据结构"><a href="#Redis五种数据结构" class="headerlink" title="Redis五种数据结构"></a>Redis五种数据结构</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122124539752.png"></p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>其基本编码方式是<strong>RAW</strong>，基于简单动态字符串（SDS）实现，存储上限为512mb。</p><p>如果存储的SDS长度小于44字节，则会采用<strong>EMBSTR</strong>编码，此时object head与SDS是一段连续空间。申请内存时只需要调用一次内存分配函数，效率更高。</p><p>如果存储的字符串是整数值，并且大小在LONG_MAX范围内，则会采用<strong>INT</strong>编码：直接将数据保存在RedisObject的ptr指针位置（刚好8字节），不再需要SDS了。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122124417726.png"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>在3.2版本之前，Redis采用ZipList和LinkedList来实现List，当元素数量小于512并且元素大小小于64字节时采用ZipList编码，超过则采用LinkedList编码。</p><p>在3.2版本之后，采用QuickList<br><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122124832295.png"></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>少量整数IntSet，正常采用Dict，元素存在key中，value为null</p><p>当添加一个字符串后，会从上面变成下面。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122133718951.png"></p><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>zset底层数据结构必须满足<strong>键值存储、键必须唯一、可排序</strong>这几个需求。</p><p><strong>SkipList</strong>：可以排序，并且可以同时存储score和ele值（member）</p><p><strong>HashTable</strong>：可以键值存储，并且可以根据key找value</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122134508212.png"></p><p>数据存了两份，太占用内存了。</p><p>当元素数量不多时，zset还会采用ZipList结构来节省内存，不过需要同时满足两个条件：</p><p>①元素数量小于zset_max_ziplist_entries，默认值128</p><p>②每个元素都小于zset_max_ziplist_value字节，默认值64</p><p>ziplist本身没有排序功能，而且没有键值对的概念，因此需要有zset通过编码实现：</p><ol><li>ZipList是连续内存，因此score和element是紧挨在一起的两个entry， element在前，score在后</li><li>score越小越接近队首，score越大越接近队尾，按照score值升序排列</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122140044517.png"></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>少量数据ziplist，大量数据dict</p><p>Hash结构默认采用ZipList编码，用以节省内存。 ZipList中相邻的两个entry 分别保存field和value</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122140232670.png"></p><p>当数据量较大时，Hash结构会转为HT编码，也就是Dict，触发条件有两个：</p><ol><li>ZipList中的元素数量超过了hash-max-ziplist-entries（默认512）</li><li>ZipList中的任意entry大小超过了hash-max-ziplist-value（默认64字节）</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240122140323958.png"></p><h2 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231216103009470.png"></p><p>Linux系统为了提高IO效率，在用户空间和内核空间都加入了<strong>缓冲区</strong>。</p><p>写数据时，要把用户缓冲数据拷贝到内核缓冲区，然后写入设备。</p><p>读数据时，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231216111106785.png"></p><p>下面的5种IO，都是在解决两个点：1，内核空间中的等待 2，用户态和内核态的缓冲区之间的拷贝。</p><h2 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231216124040788.png"></p><p>对于用户进程和内核进程：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231216124217959.png"></p><h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><p>并没有提升性能，反而导致CPU使用率暴增。但是IO多路复用必须结合非阻塞IO才有足够好的性能表现。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231217102642232.png"></p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>服务端处理客户端的socket请求时，在单线程情况下，只能依次处理每一个socket,如果正在处理的socket恰好未就绪（不可读或者不可写），线程就会被阻塞，所有其他客户端socket都必须等待，性能自然会很差。</p><p>单线程会导致处理业务阻塞。其他业务必须等着。</p><p>用户进程如何知道内核中数据是否就绪呢？</p><p>IO多路复用：利用单个线程来同时监听多个FD（文件描述符），并在某个FD可读，可写的时候通知，返回readable.应该是一个单独的后台线程去监听。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240120144857312.png"></p><p>监听的方式有多种，select和poll只会通知有，不会告诉你是哪个，要用户一个个遍历。</p><p>epoll则同时也会告诉是哪个FD就绪了，并将其写入用户空间。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240120145142295.png"></p><p><strong>epoll中的事件通知机制</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121134726768.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121140920448.png"></p><p>如果我们确实想用ET模式，可以在4之后调用epoll_ctl,让内核检查rb_root中是否有未被处理的，如果有则放到list_head中。也可以循环的执行4将数据读完（不要用阻塞IO的方式）。</p><p>基于epoll模式的web服务的基本流程如图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121141910408.png"></p><h2 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h2><p>recvfrom函数–数据拷贝函数</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121155516927.png"></p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121155820931.png"></p><p>用户应用大量安排任务，可能导致整个系统内存占用过多而崩溃。</p><p>总结：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121160302781.png"></p><h2 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h2><p>命令处理部分是单线程的，在Redis6.0版本中，核心网络模型加入了多线程。</p><p>Redis是纯内存操作，它的性能瓶颈是网络延迟而不是执行速度，多线程并不能带来巨大的性能提升。相反会导致过多的上下文切换，带来不必要的开销。</p><p>而且引入多线程会面临线程安全问题。加锁的话性能更差了。</p><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><p>Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。</p><p>惰性删除：不是在TTL到期后就立刻删除，而是在访问一个key的时候，检查该key的存活时间，如果已经过期才执行删除。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。<br>定期删除：每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</p><p>定期删除中SLOW模式（服务器初始化的时候被定义），间隔长(100ms一次)每一次时间长（25模式）。FAST模式（每个事件循环前调用beforeSleep函数），间隔短（2ms)每一次也短(1ms)。</p><h2 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h2><p>就是当Redis内存使用达到设置的上限时，主动挑选部分key删除以释放更多内存的流程。</p><p>一刀切，只要来访问，都会看内存够不够。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%8E%9F%E7%90%86%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20240121211125666.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学记录6-数据库基础</title>
      <link href="/2023/12/15/javaguide-zi-xue-ji-lu-6-shu-ju-ku-ji-chu/"/>
      <url>/2023/12/15/javaguide-zi-xue-ji-lu-6-shu-ju-ku-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul><li>第一范式：确保原子性，表中每一个列数据都必须是不可再分的字段。（如果某一列存的是JSON，则不满足1NF）</li><li>第二范式：确保唯一性，每张表都只描述一种业务属性，一张表只描述一件事。（第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键）</li><li>第三范式：确保独立性，表中除主键外，每个字段之间不存在任何依赖，都是独立的。（比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3NF 的要求。）</li></ul><h2 id="不推荐使用外键和级联"><a href="#不推荐使用外键和级联" class="headerlink" title="不推荐使用外键和级联"></a>不推荐使用外键和级联</h2><p>Ali开发手册：外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p><p><strong>增加了复杂性：</strong> a. 每次做 DELETE 或者 UPDATE 都必须考虑外键约束，会导致开发的时候很痛苦, 测试数据极为不方便; b. 外键的主从关系是定的，假如那天需求有变化，数据库中的这个字段根本不需要和其他表有关联的话就会增加很多麻烦。</p><p><strong>增加了额外工作</strong>：数据库需要增加维护外键的工作，比如当我们做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，保证数据的的一致性和正确性，这样会不得不消耗资源；（个人觉得这个不是不用外键的原因，因为即使你不使用外键，你在应用层面也还是要保证的。所以，我觉得这个影响可以忽略不计。）</p><p><strong>对分库分表不友好</strong>：因为分库分表下外键是无法生效的。</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>我们可以把存储过程看成是一些 SQL 语句的集合，中间加了点逻辑控制语句。</p><p>存储过程一旦调试完成通过后就能稳定运行，另外，使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的。</p><p>存储过程在互联网公司应用不多，因为存储过程难以调试和扩展，而且没有移植性，还会消耗数据库资源。</p><p>阿里巴巴 Java 开发手册里要求禁止使用存储过程。</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p><code>drop</code>(丢弃数据): <code>drop table 表名</code> ，直接将表都删除掉，在删除表的时候使用。</p><p><code>truncate</code> (清空数据) : <code>truncate table 表名</code> ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。</p><p><code>delete</code>（删除数据） : <code>delete from 表名 where 列名=值</code>，删除某一行的数据</p><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>文档：MongoDB、CouchDB，</p><p>键值：Redis、DynamoDB，</p><p>宽列： HBase、Cassandra，</p><p>图表：Neo4j、 Amazon Neptune、Giraph</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>**<code>utf8</code>**：<code>utf8</code>编码只支持<code>1-3</code>个字节 。 在 <code>utf8</code> 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。</p><p>**<code>utf8mb4</code>**：UTF-8 的完整实现，正版！最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。</p><h2 id="sql语法基础知识"><a href="#sql语法基础知识" class="headerlink" title="sql语法基础知识"></a>sql语法基础知识</h2><p>SQL支持三种注释</p><p>两个# 注释1</p><p>– 注释2<br>&#x2F;* 注释3 *&#x2F;</p><p>数据定义语言（Data Definition Language，DDL）的主要功能是定义数据库对象，其核心指令是create,alter,drop.</p><p>数据操纵语言（DML） 的主要功能是 <strong>访问数据</strong>，因此其语法都是以<strong>读写数据库</strong>为主。核心指令是CRUD,insert,update,delete,select</p><p>事务控制语言 (Transaction Control Language, TCL) 用于<strong>管理数据库中的事务</strong>.核心指令是commit,rollback</p><p>数据控制语言 (Data Control Language, DCL)  以<strong>控制用户的访问权限</strong>为主</p><p>插入：</p><p>INSERTINTOuserVALUES(10,’root’,’root’,‘<a href="mailto:&#120;&#x78;&#x78;&#120;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#120;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a>‘),(12,’user1’,’user1’,‘<a href="mailto:&#120;&#x78;&#x78;&#120;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#120;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a>‘),(18,’user2’,’user2’,‘<a href="mailto:&#120;&#x78;&#120;&#x78;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;">&#120;&#x78;&#120;&#x78;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;</a>‘);</p><p>INSERT INTO user(username, password, email)<br>VALUES (‘admin’, ‘admin’, ‘<a href="mailto:&#x78;&#120;&#120;&#x78;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#x6d;">&#x78;&#120;&#120;&#x78;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#x6d;</a>‘);</p><p>插入查询出来的数据：</p><p>INSERT INTO user(username)<br>SELECT name<br>FROM account;</p><p>更新：</p><p>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;</p><p>删除：</p><p>DELETE FROM user<br>WHERE username &#x3D; ‘robot’;</p><p>查询：</p><p><code>DISTINCT</code> 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</p><p><code>LIMIT</code> 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数</p><ul><li><code>having</code> 用于对汇总的 <code>group by</code> 结果进行过滤。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token keyword">FROM</span> Customers<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>join连接两张表。</p><p>如果两张表的关联字段名相同，也可以使用 <code>USING</code>子句来代替 <code>ON</code>，举个例子</p><pre class=" language-java"><code class="language-java"># join<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>onselect c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_numfrom Customers cinner join Orders oon c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_idorder by c<span class="token punctuation">.</span>cust_name<span class="token punctuation">;</span># 如果两张表的关联字段名相同，也可以使用USING子句：join<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">)</span>select c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_numfrom Customers cinner join Orders o<span class="token function">using</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>order by c<span class="token punctuation">.</span>cust_name<span class="token punctuation">;</span></code></pre><p>各种不同的连接。</p><table><thead><tr><th><strong>连接类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>（默认连接方式）只有当两个表都存在满足条件的记录时才会返回行。</td></tr><tr><td>LEFT JOIN &#x2F; LEFT OUTER JOIN 左(外)连接</td><td>返回左表中的所有行，即使右表中没有满足条件的行也是如此。</td></tr><tr><td>RIGHT JOIN &#x2F; RIGHT OUTER JOIN 右(外)连接</td><td>返回右表中的所有行，即使左表中没有满足条件的行也是如此。</td></tr><tr><td>FULL JOIN &#x2F; FULL OUTER JOIN 全(外)连接</td><td>只要其中有一个表存在满足条件的记录，就返回行。</td></tr><tr><td>SELF JOIN</td><td>将一个表连接到自身，就像该表是两个表一样。为了区分两个表，在 SQL 语句中需要至少重命名一个表。</td></tr><tr><td>CROSS JOIN</td><td>交叉连接，从两个或者多个连接表中返回记录集的笛卡尔积。</td></tr></tbody></table><p><img src="D:\blog\source_posts\JavaGuide自学记录6-数据库基础\image\image-20231221111319644.png" alt="image-20231221111319644"></p><p><code>UNION</code> 基本规则：</p><ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul><p>默认地，<code>UNION</code> 操作符选取不同的值。如果允许重复的值，请使用 <code>UNION ALL</code>。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span></code></pre><p>文本处理</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>LEFT()<code>、</code>RIGHT()</td><td>左边或者右边的字符</td></tr><tr><td>LOWER()<code>、</code>UPPER()</td><td>转换为小写或者大写</td></tr><tr><td>LTRIM()<code>、</code>RTRIM()</td><td>去除左边或者右边的空格</td></tr><tr><td>LENGTH()</td><td>长度，以字节为单位</td></tr><tr><td>SOUNDEX()</td><td>转换为语音值</td></tr></tbody></table><h2 id="sql常见面试题"><a href="#sql常见面试题" class="headerlink" title="sql常见面试题"></a>sql常见面试题</h2><p>从 <code>OrderItems</code> 表中检索出所有不同且不重复的订单号（<code>order_num</code>），其中每个订单都要包含 100 个或更多的产品。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> order_num<span class="token keyword">FROM</span> OrderItems<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num<span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">100</span></code></pre><p>在 SQL 中，可使用以下通配符：</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>代表零个或多个字符</td></tr><tr><td>_</td><td>仅替代一个字符</td></tr><tr><td>[charlist]</td><td>字符列中的任何单一字符</td></tr><tr><td>[^charlist]<code>或者</code>[!charlist]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table><p>仅返回描述中未出现 <code>toy</code> 一词的产品  WHERE prod_desc NOT LIKE ‘%toy%’</p><p>SELECT cust_id, cust_name, UPPER(CONCAT(SUBSTRING(cust_contact, 1, 2),SUBSTRING(cust_city, 1, 3))) AS user_login<br>FROM Customers</p><p>截取函数<code>SUBSTRING()</code>：截取字符串，<code>substring(str ,n ,m)</code>（n 表示起始截取位置，m 表示要截取的字符个数）表示返回字符串 str 从第 n 个字符开始截取 m 个字符；</p><p>拼接函数<code>CONCAT()</code>：将两个或多个字符串连接成一个字符串，select concat(A,B)：连接字符串 A 和 B。</p><p>大写函数 <code>UPPER()</code>：将指定字符串转换为大写。</p><p>返回 2020 年 1 月的所有订单的订单号  WHERE month(order_date) &#x3D; ‘01’ AND YEAR(order_date) &#x3D; ‘2020’  或者是  WHERE order_date LIKE ‘2020-01%’</p><p>编写 SQL 语句，返回每个订单号（<code>order_num</code>）各有多少行数（<code>order_lines</code>），并按 <code>order_lines</code> 对结果进行升序排序。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">Count</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> order_lines<span class="token keyword">FROM</span> OrderItems<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_lines</code></pre><p>知识点：</p><ol><li><code>count(*)</code>,<code>count(列名)</code>都可以，区别在于，<code>count(列名)</code>是统计非 NULL 的行数；</li><li><code>order by</code> 最后执行，所以可以使用列别名；</li><li>分组聚合一定不要忘记加上 <code>group by</code> ,不然只会有一行结果。</li></ol><p>编写 SQL 语句，返回名为 <code>cheapest_item</code> 的字段，该字段包含每个供应商(vend_id)成本最低的产品（使用 <code>Products</code> 表中的 <code>prod_price</code>），然后从最低成本到最高成本对结果进行升序排序。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> cheapest_item<span class="token keyword">FROM</span> Products<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cheapest_item</code></pre><p>子查询。</p>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-分布式学习记录1</title>
      <link href="/2023/11/29/java-ba-gu-wen-fen-bu-shi-xue-xi-ji-lu-1/"/>
      <url>/2023/11/29/java-ba-gu-wen-fen-bu-shi-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java八股文-分布式学习记录1"><a href="#Java八股文-分布式学习记录1" class="headerlink" title="Java八股文-分布式学习记录1"></a>Java八股文-分布式学习记录1</h1><h2 id="1-分布式幂等性如何设计"><a href="#1-分布式幂等性如何设计" class="headerlink" title="1.分布式幂等性如何设计"></a>1.分布式幂等性如何设计</h2><p>幂等性：用户多次点击，应该只有一次有效更改。</p><p>唯一索引来防止新增的脏数据。token每次使用都要被redis删除，从后台重新获取，再存到redis.</p><p>悲观锁，乐观锁，分布式锁。</p><h2 id="2-说说你对分布式事务的理解"><a href="#2-说说你对分布式事务的理解" class="headerlink" title="2.说说你对分布式事务的理解"></a>2.说说你对分布式事务的理解</h2><p>场景：多个服务或多个库，要保持在一个事务中。</p><p>理论基础：ACID,CAP,BASE。  ACID（原子性Atomicity，一致性Consistency，隔离性Isolation，持久性Durability）<br>实际中用到了哪些解决方案：seata,消息队列+本地事件表，事务消息，最大努力通知方案，tcc</p><h2 id="3-什么是两阶段提交协议-2PC"><a href="#3-什么是两阶段提交协议-2PC" class="headerlink" title="3. 什么是两阶段提交协议(2PC)"></a>3. 什么是两阶段提交协议(2PC)</h2><p>第一阶段：投票阶段，询问各个事务数据源是否准备好</p><p>第二阶段：真正将数据提交给事务数据源</p><p>一个协调者，多个参与者。</p><h2 id="4-什么是补偿性事务"><a href="#4-什么是补偿性事务" class="headerlink" title="4.什么是补偿性事务"></a>4.什么是补偿性事务</h2><p>try-confirm-cancel.  先try,然后根据结果决定是confirm还是cancel</p><p>try阶段只要是对业务系统做检测及资源预留。</p><p>confirm阶段主要是对业务系统做确认提交。try能成功则confirm一定成功。</p><p>cancel是业务取消，资源释放</p><h2 id="5-消息队列和事件表实现分布式事务"><a href="#5-消息队列和事件表实现分布式事务" class="headerlink" title="5.消息队列和事件表实现分布式事务"></a>5.消息队列和事件表实现分布式事务</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/image-20231207192555256.png"></p><p>优势：给用户的响应速度会快。 缺点：编码复杂，排查问题困难。</p><h2 id="6-分布式id的生成方案"><a href="#6-分布式id的生成方案" class="headerlink" title="6.分布式id的生成方案"></a>6.分布式id的生成方案</h2><p>唯一性，有序递增性，高可用性，带时间。</p><p>UUID：结合机器的网卡，本地时间，一个随机数来生成</p><p>数据库自增ID：两台机器应该一个奇数一个偶数。</p><p>批量生成ID：数据库里记录最大的值，把生成的一堆ID放到内存（Redis）里</p><p>Redis生成ID：单线程的，本身就提供像incr这种指令。</p><p>雪花算法：1位符号位（一般是0），41位时间戳（毫秒级），10位机器位，12位毫秒内的序列。</p><h2 id="7-常用的负载均衡算法有哪些"><a href="#7-常用的负载均衡算法有哪些" class="headerlink" title="7.常用的负载均衡算法有哪些"></a>7.常用的负载均衡算法有哪些</h2><p>轮询算法：RR（round robin),一个一个来，适用于所有服务器硬件相同的情况。</p><p>加权轮询算法。</p><p>随机轮询算法。</p><p>最少链接算法。记录每个服务器正在处理的连接数。将新请求分发到最少连接的服务器上。放到Redis里做个Hash.</p><h2 id="10-漏桶算法"><a href="#10-漏桶算法" class="headerlink" title="10.漏桶算法"></a>10.漏桶算法</h2><p>恒定的流出速度。漏桶的容量&#x3D;漏桶的流出速度*可接受的等待时长</p><p>当请求速度大于漏桶流出速度的时候，会触发限流。当短时间突发大流量，漏桶无法处理。</p><h2 id="11-令牌桶算法"><a href="#11-令牌桶算法" class="headerlink" title="11.令牌桶算法"></a>11.令牌桶算法</h2><p>一个大小固定的容器（令牌桶），桶的量即瞬时最大并发量。</p><h2 id="12-数据库如何处理大数据量"><a href="#12-数据库如何处理大数据量" class="headerlink" title="12.数据库如何处理大数据量"></a>12.数据库如何处理大数据量</h2><p>分区。分库分表（水平&#x2F;垂直），读写分离。 </p><h2 id="13-CAP定理"><a href="#13-CAP定理" class="headerlink" title="13.CAP定理"></a>13.CAP定理</h2><p>一致性（Consistency),可用性(Availability),分区容错性(Partition tolerance)</p><p>分区容错性：在分布式系统中遇到任何网络分区故障，系统仍然能对外提供服务。</p><h2 id="14-BASE理论"><a href="#14-BASE理论" class="headerlink" title="14.BASE理论"></a>14.BASE理论</h2><p>我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><p>Basically Available（基本可用）</p><p>Soft state(软状态)</p><p>Eventually consistent(最终一致性)</p><h2 id="15-什么是可靠消息最终一致性方案"><a href="#15-什么是可靠消息最终一致性方案" class="headerlink" title="15.什么是可靠消息最终一致性方案"></a>15.什么是可靠消息最终一致性方案</h2><p>可靠消息：要有个可靠的消息中间件</p><p>最终一致性：事务发起方和事务消费方的业务最终一致。</p><p>begin 事务；操作数据库；发送消息；提交事务。</p><p>发送消息响应超时，导致数据库回滚。需要人工补偿。</p><p>消息消费方要有幂等性的解决方案。</p><h2 id="16-RocketMQ在分布式事务中的应用"><a href="#16-RocketMQ在分布式事务中的应用" class="headerlink" title="16.RocketMQ在分布式事务中的应用"></a>16.RocketMQ在分布式事务中的应用</h2><p>RocketMQ在4.3之后的版本支持了事务消息，为解决分布式事务提供了便利。</p><h2 id="17-请说说注册中心的数据存储结构"><a href="#17-请说说注册中心的数据存储结构" class="headerlink" title="17.请说说注册中心的数据存储结构"></a>17.请说说注册中心的数据存储结构</h2><p>Map，服务名：ip+port</p><p>我可能部署3个A服务，则要修改结构</p><p>&lt;服务名：&lt;服务实例 ： ip+port,服务配置等等&gt;&gt;</p><h2 id="18-请说说注册中心有哪些操作"><a href="#18-请说说注册中心有哪些操作" class="headerlink" title="18.请说说注册中心有哪些操作"></a>18.请说说注册中心有哪些操作</h2><p>接受服务注册，接受服务心跳，接受服务下线，服务剔除，查询注册表中的服务信息，注册中心集群间注册表的同步。</p><h2 id="20-分布式系统中为什么引入熔断"><a href="#20-分布式系统中为什么引入熔断" class="headerlink" title="20.分布式系统中为什么引入熔断"></a>20.分布式系统中为什么引入熔断</h2><p>防止一个底层服务坏掉而导致雪崩。</p><h2 id="21-熔断和降级的区别"><a href="#21-熔断和降级的区别" class="headerlink" title="21.熔断和降级的区别"></a>21.熔断和降级的区别</h2><p>同：都是为了整体可用，而选择部分功能不可用。</p><p>熔断是下级服务故障，降级范围更广，高并发的时候可以把一些不重要的功能降级掉，比如商品详情页下面的商品推荐。主动去走备用代码。</p><h2 id="22-如何提升系统的并发能力"><a href="#22-如何提升系统的并发能力" class="headerlink" title="22.如何提升系统的并发能力"></a>22.如何提升系统的并发能力</h2><p>分流：负载均衡，消息队列，数据库拆分</p><p>导流：缓存，CDN</p><p>并发</p><h2 id="24-微服务设计的原则"><a href="#24-微服务设计的原则" class="headerlink" title="24.微服务设计的原则"></a>24.微服务设计的原则</h2><p>单一职责：高内聚，低耦合</p><p>服务自治：独立开发测试</p><p>轻量级通信，粒度。</p><h2 id="25-什么是最大努力通知方案"><a href="#25-什么是最大努力通知方案" class="headerlink" title="25.什么是最大努力通知方案"></a>25.什么是最大努力通知方案</h2><p>1，有一定的消息重复通知机制。 2，消息校对机制。</p><p>公司内部放到消息队列里，公司外部应该通过RPC的方式，调用消费方。</p><h2 id="27-Ribbon的原理"><a href="#27-Ribbon的原理" class="headerlink" title="27.Ribbon的原理"></a>27.Ribbon的原理</h2><p>1.对RestTemplate加@LoadBalanced注解</p><p>2.将RestTemplate中调用的服务名，解析为具体的IP地址。因为一个服务名会对应多个地址，那么在选择具体服务地址的时候，需要做负载均衡。</p><p>3.确定目标服务的IP和port后，通过httpClient进行HTTP的调用。</p><h2 id="28-认证和授权有什么区别"><a href="#28-认证和授权有什么区别" class="headerlink" title="28.认证和授权有什么区别"></a>28.认证和授权有什么区别</h2><p>认证：系统存在你这个用户。   授权：你的权限，是管理员还是普通。</p><h2 id="29-什么是Cache-Aside机制"><a href="#29-什么是Cache-Aside机制" class="headerlink" title="29.什么是Cache Aside机制"></a>29.什么是Cache Aside机制</h2><p>双写一致性。<strong>先更新数据，再删除缓存</strong></p><p>除非读比写慢，上面可能会出问题，但基本不会。可以用延时双删再解决。</p><h2 id="30-什么是Read-Write-Through机制"><a href="#30-什么是Read-Write-Through机制" class="headerlink" title="30.什么是Read Write Through机制"></a>30.什么是Read Write Through机制</h2><p>直接把结果写入缓存，再从缓存同步到数据库中。这样在业务看来就不会存在数据不一致的情况了。</p><p>读和写只和缓存打交道。要求缓存十分可靠。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学记录5-JVM</title>
      <link href="/2023/11/21/javaguide-zi-xue-ji-lu-5-jvm/"/>
      <url>/2023/11/21/javaguide-zi-xue-ji-lu-5-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="内存区域详解"><a href="#内存区域详解" class="headerlink" title="内存区域详解"></a>内存区域详解</h2><p>JDK1.7线程共享区域有个方法区，JDK8变为了本地内存里的元空间。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231121193536683.png"></p><p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</p><p>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</p><p>栈由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法返回地址。</p><p>堆<strong>内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存</strong></p><p>从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存</p><p>Java 堆还可以细分为：新生代和老年代；再细致一点新生代有：Eden、S0、S1 等空间</p><p><strong>JDK 8 版本之后 PermGen(永久代) 已被 Metaspace(元空间) 取代，元空间使用的是本地内存。</strong></p><p>新生代-&gt;老年代-&gt;永久代</p><p>永久代以及元空间是 HotSpot 虚拟机对虚拟机规范中方法区的两种实现方式。</p><p>元空间的一些可设置参数</p><p>-XX:MetaspaceSize&#x3D;N &#x2F;&#x2F;设置 Metaspace 的初始（和最小大小）<br>-XX:MaxMetaspaceSize&#x3D;N &#x2F;&#x2F;设置 Metaspace 的最大大小</p><p><strong>Java对象的创建过程</strong>：1.类加载检查 2.分配内存 3.初始化零值 4.设置对象头 5.执行init方法 </p><h2 id="JVM垃圾回收详解"><a href="#JVM垃圾回收详解" class="headerlink" title="JVM垃圾回收详解"></a>JVM垃圾回收详解</h2><p>Java 自动内存管理最核心的功能是 <strong>堆</strong> 内存中对象的分配与回收。</p><p>对象优先在Eden区分配，当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><ol><li>在这次垃圾回收过程中，存活的对象会被复制到Survivor区（通常是S0或S1），而不存活的对象则会被清除。</li><li>如果Survivor区的空间不足，则存活的对象会被直接晋升到老年代。</li><li>在下一次minor GC过程中，会将Eden区和上次的Survivor区（例如S0）中的存活对象复制到另一个Survivor区（例如S1）。同时，上一轮minor GC中存活下来的对象年龄会增加1，并一起复制到新的Survivor区。</li></ol><p>大对象就是需要大量连续内存空间的对象，直接进入老年代。</p><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231129164937009.png"></p><p>空间分配担保：进行Minor GC之前，先看看老年代有没有足够的空间。如果没有，则进行Full GC</p><p>如果一个对象只具有软引用，那就类似于<strong>可有可无的生活用品</strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存，使用软引用的情况较多，比如高速敏感的缓存，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>.</p><p>无用的类：</p><p>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</p><p>加载该类的 <code>ClassLoader</code> 已经被回收。</p><p>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p><p>垃圾收集算法：标记-清除算法。复制算法。标记-整理算法。分代收集算法。</p><p>分代收集算法：比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</p><p>JDK默认的垃圾收集器：</p><ul><li>JDK 8：Parallel Scavenge（新生代）+ Parallel Old（老年代）</li><li>JDK 9 ~ JDK20: G1</li></ul><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p><strong>Serial收集器</strong>：串行，单线程，在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>“Stop The World”</strong> ），直到它收集结束。<strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></p><p><strong>ParNew 收集器</strong>：其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><p><strong>Parallel Scavenge 收集器</strong>：和ParNew收集器基本一样。Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。</p><p><strong>JDK8默认的垃圾收集器</strong>：新生代用Parallel Scavenge收集器，老年代用Serial Old 收集器</p><p><strong>探究ParNew与Parallel Scavenge的区别：</strong></p><p>ParNew收集器（新生代）通常与CMS收集器（老年代）配合使用，它们共同为低延迟场景提供服务。</p><p>ParNew注重的是降低暂停时间，因此更适合需要低延迟的应用，如Web服务器、交互式应用等。而Parallel Scavenge注重高吞吐量，更适合后台运算为主的场景，如大型计算任务、批处理等。</p><p>ParNew为了保证低延迟，可能会牺牲部分吞吐量。而Parallel Scavenge则相反，它会牺牲部分延迟来保证最大的吞吐量。</p><p>Parallel Scavenge具有自适应调节策略（-XX:+UseAdaptiveSizePolicy），能够根据系统的实际运行情况调整各个区域的大小及目标暂停时间。ParNew没有这种自适应机制。</p><p><strong>Serial Old 收集器</strong>：单线程，Serial收集器的老年代版本，与Parallel Scavenge配合使用。</p><p><strong>Parallel Old 收集器</strong>：多线程，Parallel Scavenge收集器的老年代版本</p><p>CMS收集器：<strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用</strong></p><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的。</p><p>整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231130165743467.png"></p><p>主要优点：<strong>并发收集、低停顿</strong>。但是它有下面三个明显的缺点：</p><ul><li><strong>对 CPU 资源敏感；</strong></li><li><strong>无法处理浮动垃圾；</strong></li><li><strong>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生</strong></li></ul><p><strong>G1收集器</strong>：</p><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p><p>它具备以下特点：</p><ul><li><strong>并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与 CMS 的“标记-清除”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。</li><li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。</li></ul><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong></li><li><strong>并发标记</strong></li><li><strong>最终标记</strong></li><li><strong>筛选回收</strong></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231130170314884.png"></p><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)</strong> 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><p><strong>从 JDK9 开始，G1 垃圾收集器成为了默认的垃圾收集器</strong></p><p>CMS新生代的Young GC、G1和ZGC都基于<strong>标记-复制</strong>算法，但算法具体实现的不同就导致了巨大的性能差异。</p><p>G1停顿时间的瓶颈主要是标记-复制中的转移阶段STW。为什么转移阶段不能和标记阶段一样并发执行呢？主要是G1未能解决转移过程中准确定位对象地址的问题。</p><p><strong>ZGC收集器</strong>：</p><p>与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用<strong>标记-复制算法</strong>，不过 ZGC 对该算法做了重大改进。</p><p>在 ZGC 中出现 Stop The World 的情况会更少！</p><p>它的设计目标包括：</p><ul><li>停顿时间不超过10ms；</li><li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加；</li><li>支持8MB~4TB级别的堆（未来支持16TB）。</li></ul><p>与CMS中的ParNew和G1类似，ZGC也采用标记-复制算法，不过ZGC对该算法做了重大改进：ZGC在标记、转移和重定位阶段几乎都是并发的，这是ZGC实现停顿时间小于10ms目标的最关键原因。</p><p>ZGC只有三个STW阶段：<strong>初始标记</strong>，<strong>再标记</strong>，<strong>初始转移</strong>。其中，初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短；再标记阶段STW时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC几乎所有暂停都只依赖于GC Roots集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全STW的，且停顿时间随存活对象的大小增加而增加。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231130171907725.png"></p><p><a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">ZGC关键技术</a>：</p><p>ZGC通过<strong>着色指针</strong>和<strong>读屏障技术</strong>，解决了转移过程中准确访问对象的问题，实现了并发转移。大致原理描述如下：并发转移中“并发”意味着GC线程在转移对象的过程中，应用线程也在不停地访问对象。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。那么，JVM是如何判断对象被移动过呢？就是利用对象引用的地址，即着色指针。</p><h2 id="类加载器详解"><a href="#类加载器详解" class="headerlink" title="类加载器详解"></a>类加载器详解</h2><ul><li>类加载过程：<strong>加载-&gt;连接-&gt;初始化</strong>。</li><li>连接过程又可分为三步：<strong>验证-&gt;准备-&gt;解析</strong>。</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231214153824044.png"></p><p><strong>类加载器的主要作用就是加载 Java 类的字节码（ <code>.class</code> 文件）到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）。</strong></p><p>Java中内置了三个重要的ClassLoader</p><p>**<code>BootstrapClassLoader</code>(启动类加载器)**：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ <code>%JAVA_HOME%/lib</code>目录下的 <code>rt.jar</code>、<code>resources.jar</code>、<code>charsets.jar</code>等 jar 包和类）以及被 <code>-Xbootclasspath</code>参数指定的路径下的所有类。</p><p>**<code>ExtensionClassLoader</code>(扩展类加载器)**：主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类以及被 <code>java.ext.dirs</code> 系统变量所指定的路径下的所有类。</p><p>**<code>AppClassLoader</code>(应用程序类加载器)**：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</p><p>除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ <code>.class</code> 文件）进行加密，加载时再利用自定义的类加载器对其解密。</p><p>自定义类加载器：</p><p>classLoader中有两个关键的方法。</p><p>如果我们不想打破双亲委派模型，就重写 <code>ClassLoader</code> 类中的 <code>findClass()</code> 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 <code>loadClass()</code> 方法。</p><p>双亲委派模型：当一个类需要被加载的时候，一步步往上问看是否已经被加载；都没有加载的话再从上到下一步步尝试去加载。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231214160921266.png"></p><p>JVM 不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。</p><p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。</p><h2 id="最重要的JVM参数总结"><a href="#最重要的JVM参数总结" class="headerlink" title="最重要的JVM参数总结"></a>最重要的JVM参数总结</h2><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p><strong>堆内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955-JVM/image/image-20231214172052217.png"></p><p>显式指定堆内存最小值和最大值<code>–Xms</code>和<code>-Xmx</code></p><p>在堆总可用内存配置完成之后，第二大影响因素是为 <code>Young Generation</code> 在堆内存所占的比例。</p><p>新生代分配 最小和最大 -XX:NewSize&#x3D;256m      -XX:MaxNewSize&#x3D;1024m</p><p>如果我们要为 新生代分配 256m 的内存（NewSize 与 MaxNewSize 设为一致）-Xmn256m</p><p>JDK7的方法区（永久代）参数</p><p>-XX:PermSize&#x3D;N #方法区 (永久代) 初始大小<br>-XX:MaxPermSize&#x3D;N #方法区 (永久代) 最大大小</p><p>JDK8使用元空间取代永久代，元空间是使用本地内存。</p><p>-XX:MetaspaceSize&#x3D;N #设置 Metaspace 的初始大小（是一个常见的误区，后面会解释）<br>-XX:MaxMetaspaceSize&#x3D;N #设置 Metaspace 的最大大小</p><p>Metaspace 的初始容量并不是 <code>-XX:MetaspaceSize</code> 设置，无论 <code>-XX:MetaspaceSize</code> 配置什么值，对于 64 位 JVM 来说，Metaspace 的初始容量都是 21807104（约 20.8m）</p><p>Metaspace 由于使用不断扩容到<code>-XX:MetaspaceSize</code>参数指定的量，就会发生 FGC，且之后每次 Metaspace 扩容都会发生 Full GC。</p><p>也就是说，MetaspaceSize 表示 Metaspace 使用过程中触发 Full GC 的阈值，只对触发起作用。</p><h3 id="垃圾回收器-1"><a href="#垃圾回收器-1" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>选择合适的垃圾回收器：</p><p>JVM 具有四种类型的 GC 实现：</p><ul><li>串行垃圾收集器</li><li>并行垃圾收集器</li><li>CMS 垃圾收集器</li><li>G1 垃圾收集器</li></ul><p>可以使用以下参数声明这些实现：<br>-XX:+UseSerialGC<br>-XX:+UseParallelGC<br>-XX:+UseParNewGC<br>-XX:+UseG1GC</p><p>GC日志记录：生产环境上，或者其他要测试 GC 问题的环境上，一定会配置上打印 GC 日志的参数，便于分析 GC 相关的问题。</p><pre class=" language-text"><code class="language-text"># 必选# 打印基本 GC 信息-XX:+PrintGCDetails-XX:+PrintGCDateStamps# 打印对象分布-XX:+PrintTenuringDistribution# 打印堆数据-XX:+PrintHeapAtGC# 打印Reference处理信息# 强引用/弱引用/软引用/虚引用/finalize 相关的方法-XX:+PrintReferenceGC# 打印STW时间-XX:+PrintGCApplicationStoppedTime# 可选# 打印safepoint信息，进入 STW 阶段之前，需要要找到一个合适的 safepoint-XX:+PrintSafepointStatistics-XX:PrintSafepointStatisticsCount=1# GC日志输出的文件路径-Xloggc:/path/to/gc-%t.log# 开启日志文件分割-XX:+UseGCLogFileRotation# 最多分割几个文件，超过之后从头文件开始写-XX:NumberOfGCLogFiles=14# 每个文件上限大小，超过就触发分割-XX:GCLogFileSize=50M</code></pre><p>我们还有很多JVM参数可以去调：</p><p><a href="https://javaguide.cn/java/jvm/jvm-parameters-intro.html#%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90">https://javaguide.cn/java/jvm/jvm-parameters-intro.html#%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90</a></p><h2 id="JDK监控和故障处理工具总结"><a href="#JDK监控和故障处理工具总结" class="headerlink" title="JDK监控和故障处理工具总结"></a>JDK监控和故障处理工具总结</h2><p>jps:查看所有 Java 进程</p><p><code>jstat</code>: 监视虚拟机各种运行状态信息</p><p>比如 <code>jstat -gc -h3 31736 1000 10</code>表示分析进程 id 为 31736 的 gc 情况，每隔 1000ms 打印一次记录，打印 10 次停止，每 3 行后打印指标头部。</p><p><code>jinfo</code>: 实时地查看和调整虚拟机各项参数</p><p>使用 jinfo 可以在不重启虚拟机的情况下，可以动态的修改 jvm 的参数。尤其在线上的环境特别有用</p><p><code>jmap</code>（Memory Map for Java）命令用于生成堆转储快照</p><p><code>jmap</code> 的作用并不仅仅是为了获取 dump 文件，它还可以查询 finalizer 执行队列、Java 堆和永久代的详细信息，如空间使用率、当前使用的是哪种收集器等。和<code>jinfo</code>一样，<code>jmap</code>有不少功能在 Windows 平台下也是受限制的。</p><p><strong><code>jhat</code></strong> 用于分析 heapdump 文件，它会建立一个 HTTP&#x2F;HTML 服务器，让用户可以在浏览器上查看分析结果。</p><p><code>jstack</code>（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合.</p><p>生成线程快照的目的主要是定位线程长时间出现停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿的原因。线程出现停顿的时候通过<code>jstack</code>来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者在等待些什么资源。</p><p>JDK可视化分析工具：<br>JConsole:Java 监视与管理控制台；可以查看Java程序概况，内存监控，线程监控，</p><p>Visual VM:多合一故障处理工具；</p><p>VisualVM 基于 NetBeans 平台开发，因此他一开始就具备了插件扩展功能的特性，通过插件扩展支持，VisualVM 可以做到：</p><ul><li><strong>显示虚拟机进程以及进程的配置、环境信息（jps、jinfo）。</strong></li><li><strong>监视应用程序的 CPU、GC、堆、方法区以及线程的信息（jstat、jstack）。</strong></li><li><strong>dump 以及分析堆转储快照（jmap、jhat）。</strong></li><li><strong>方法级的程序运行性能分析，找到被调用最多、运行时间最长的方法。</strong></li><li><strong>离线程序快照：收集程序的运行时配置、线程 dump、内存 dump 等信息建立一个快照，可以将快照发送开发者处进行 Bug 反馈。</strong></li><li><strong>其他 plugins 的无限的可能性……</strong></li></ul><h2 id="JVM线上问题排查和性能调优案例"><a href="#JVM线上问题排查和性能调优案例" class="headerlink" title="JVM线上问题排查和性能调优案例"></a>JVM线上问题排查和性能调优案例</h2><p><a href="https://javaguide.cn/java/jvm/jvm-in-action.html">https://javaguide.cn/java/jvm/jvm-in-action.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-并发学习记录2</title>
      <link href="/2023/11/09/java-ba-gu-wen-bing-fa-xue-xi-ji-lu-2/"/>
      <url>/2023/11/09/java-ba-gu-wen-bing-fa-xue-xi-ji-lu-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="1-Java中线程的实现方式"><a href="#1-Java中线程的实现方式" class="headerlink" title="1. Java中线程的实现方式"></a>1. Java中线程的实现方式</h2><p>1）继承Thread类，重写run方法</p><p>2）实现Runnable接口，重写run方法</p><p>3）实现Callable 重写call方法，配合FutureTask。可以得到返回值。</p><p>4）基于线程池构建任务</p><p>Thread本身就implement了Runnable接口，FutureTask也是如此</p><h2 id="2-Java中线程的状态"><a href="#2-Java中线程的状态" class="headerlink" title="2.Java中线程的状态"></a>2.Java中线程的状态</h2><p>经典6种</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231109122939825.png"></p><h2 id="3-Java中如何停止线程"><a href="#3-Java中如何停止线程" class="headerlink" title="3.Java中如何停止线程"></a>3.Java中如何停止线程</h2><p>1.使用共享变量 while(flag) ，不过很少使用</p><p>2.使用interrupt方式。在线程内部有一个中断标记位，默认为false;执行了以后其会变为true;</p><p>Thread.currentThread().isInterrupted()</p><p>Thread.currentThread.interrupt()   </p><p>Thread.interrupted();  先获取中断标记位，再把中断标记位归位为false</p><p>在线程休眠的时候，如果中断标记位变化，会抛出异常。</p><p>while(!Thread.currentThread().isInterrupted())</p><p>线程内部是可以正常执行的。</p><h2 id="4-Java中sleep和wait的区别"><a href="#4-Java中sleep和wait的区别" class="headerlink" title="4.Java中sleep和wait的区别"></a>4.Java中sleep和wait的区别</h2><p>sleep属于Thread类，是个静态方法。wait属于Object类的方法</p><p>sleep属于TIMED_WAITING，自动被唤醒。wait属于WAITING,需要手动唤醒。</p><p>wait必须在持有锁时执行，执行后会释放锁资源。sleep不会释放锁资源，也不需要持有锁</p><h2 id="5-并发编程的三大特性"><a href="#5-并发编程的三大特性" class="headerlink" title="5.并发编程的三大特性"></a>5.并发编程的三大特性</h2><p>原子性，可见性，有序性。 </p><p>可见性：CPU-&gt;L1-&gt;L2-&gt;L3—&gt;主内存。 volatile强制到主内存去读和写。</p><p>有序性：JIT优化，或者CPU优化，造成指令重排。volatile内存屏障</p><h2 id="6-什么是CAS，有什么优缺点"><a href="#6-什么是CAS，有什么优缺点" class="headerlink" title="6.什么是CAS，有什么优缺点"></a>6.什么是CAS，有什么优缺点</h2><p>AtomicInteger这种原子类，就是用了CAS，里面是一个for循环。</p><p>并发量很大会一直循环，造成CPU资源消耗。 ABA问题（除了原值外，还要比较版本信息AtomicStampedReference)。</p><p>LongAdder,分成多个值，最后再加在一起。</p><p>CAS避免了像悲观锁那种用户态和内核态的切换。</p><h2 id="7-Contended注解有什么用"><a href="#7-Contended注解有什么用" class="headerlink" title="7. @Contended注解有什么用"></a>7. @Contended注解有什么用</h2><p>LongAddr中的cell数组，Cell就用了@Contended注解</p><p>这个注解是为了解决伪共享问题，解决缓存行同步带来的性能问题。</p><p>CPU缓存L1，是以缓存行为单位存储数据的，一般默认64字节。</p><p>@Contended注解，就是将一个缓存行后面填充7个没有意义的数据。</p><h2 id="8-Java中的四种引用"><a href="#8-Java中的四种引用" class="headerlink" title="8. Java中的四种引用"></a>8. Java中的四种引用</h2><p>强，软，弱，虚。</p><p>强引用。new User(); 始终处于可达状态，直到弹栈。</p><p>软引用。SoftReference,系统内存不够了，就回收软引用。在内存敏感的系统中当缓存使用。</p><p>弱引用，对于只有弱引用的对象，只要JVM执行垃圾回收，就会被回收。</p><p>虚引用，用不到。</p><h2 id="9-ThreadLocal的内存泄露问题"><a href="#9-ThreadLocal的内存泄露问题" class="headerlink" title="9.ThreadLocal的内存泄露问题"></a>9.ThreadLocal的内存泄露问题</h2><p>ThreadLocalMap&lt;ThreadLocal,value&gt;</p><p>key为弱引用。可以解决内存泄露问题（ThreadLocal1对象，左边是强引用，右边的引用改为弱引用，等左边的消失了，右边的引用自动会消失）</p><p>value，没有Key，找不到。执行remove方法，移除Entry.</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231124122039726.png"></p><h2 id="10-Java中锁的分类"><a href="#10-Java中锁的分类" class="headerlink" title="10.Java中锁的分类"></a>10.Java中锁的分类</h2><p>可重入锁、不可重入锁。大部分都是前者</p><p>乐观锁，悲观锁。Atomic原子类基于CAS实现，是乐观锁。悲观锁会将线程挂起，涉及用户态和内核态的切换。</p><p>公平锁，非公平锁。</p><p>互斥锁，共享锁。ReentrantReadWriteLock是共享锁</p><h2 id="11-Synchronized在JDK1-6中的优化"><a href="#11-Synchronized在JDK1-6中的优化" class="headerlink" title="11.Synchronized在JDK1.6中的优化"></a>11.Synchronized在JDK1.6中的优化</h2><p>锁消除：这段代码没有临界资源，代码编译的时候直接把synchronized消除掉</p><p>锁膨胀：在一个循环中，频繁的获取锁资源。JIT会把锁扩到循环外层。<br>锁升级：在JDK6之前，拿不到锁就会挂起当前线程。之后是</p><p>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</p><p>偏向级锁是如果只有一个线程频繁获取这个锁，那就用偏向锁判断一下是否是这个线程即可，不是的话就触发锁升级。</p><p>轻量级锁，会采用自旋锁的方式频繁的以CAS的形式获取锁资源。自旋了一定次数后，没拿到锁资源，则进行锁升级</p><p>重量级锁：最传统的synchronized方法，没拿到锁则挂起当前线程</p><h2 id="12-synchronized的实现原理"><a href="#12-synchronized的实现原理" class="headerlink" title="12. synchronized的实现原理"></a>12. synchronized的实现原理</h2><p>对象头的MarkWord结构：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231202231900012.png"></p><h2 id="13-什么是AQS"><a href="#13-什么是AQS" class="headerlink" title="13. 什么是AQS"></a>13. 什么是AQS</h2><p>AQS就是AbstractQueuedSynchronized抽象类。JUC下的一个基类。</p><p>ReentrantLock,ThreadPoolExecutor,阻塞队列，CountDownLatch,Semaphore,CyclicBarrier等都是基于AQS实现</p><p>内部用volatile修饰了一个state的int整数。用CAS对他进行修改。</p><p>有一个双向链表。每一个Node可以被声明为是共享的还是互斥的，存储着线程信息。把线程封装成Node去双向链表进行排队。</p><p>ConditionObject(与Node同级别）:线程被await后，会被扔到WaitSet池子里，被唤醒后再拿出来到AQS的双向链表。而ConditionObject里维护了一个双向链表用来当Waitset。</p><h2 id="14-AQS唤醒节点时，为何从后往前找"><a href="#14-AQS唤醒节点时，为何从后往前找" class="headerlink" title="14.AQS唤醒节点时，为何从后往前找"></a>14.AQS唤醒节点时，为何从后往前找</h2><p>unparkSuccessor()</p><p>因为插入的 时候是这么插的,A为被插入的节点。先指向前面，再有一个指向A的指针。</p><p>因为可能在下图这个阶段唤醒节点，这个时候还没有指向A的指针，从前往后找会遗漏A</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231203102346703.png"></p><h2 id="15-ReentrantLock和synchronized的区别"><a href="#15-ReentrantLock和synchronized的区别" class="headerlink" title="15.ReentrantLock和synchronized的区别"></a>15.ReentrantLock和synchronized的区别</h2><p>unlock. synchronized只能是非公平锁。tryLock,指定时间，</p><p>竞争比较激烈的话用ReentrantLock，不存在锁升级。</p><p>ReentrantLock是基于AQS实现的，synchronized是基于ObjectMonitor.</p><h2 id="16-ReentrantReadWriteLock的实现原理"><a href="#16-ReentrantReadWriteLock的实现原理" class="headerlink" title="16.ReentrantReadWriteLock的实现原理"></a>16.ReentrantReadWriteLock的实现原理</h2><p>state的高16位是读锁，低16位是写锁。可重入锁。写锁对state加一就好，读锁要用ThreadLocal来记录一下每个线程锁重入的次数。</p><h2 id="17-JDK中提供了哪些线程池"><a href="#17-JDK中提供了哪些线程池" class="headerlink" title="17. JDK中提供了哪些线程池"></a>17. JDK中提供了哪些线程池</h2><p>×</p><h2 id="18-线程池的核心参数有哪些"><a href="#18-线程池的核心参数有哪些" class="headerlink" title="18.线程池的核心参数有哪些"></a>18.线程池的核心参数有哪些</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231203105618538.png"></p><h2 id="19-线程池的状态"><a href="#19-线程池的状态" class="headerlink" title="19.线程池的状态"></a>19.线程池的状态</h2><p>在ThreadPoolExecutor中，AtomicInteger ctl是最核心的属性，ctl的高三位，表示线程池状态；ctl的低29位，表示工作线程的个数。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231203153139089.png"></p><h2 id="20-线程池的执行流程"><a href="#20-线程池的执行流程" class="headerlink" title="20.线程池的执行流程"></a>20.线程池的执行流程</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/JQZR%60%5BJ%7BGG69YAZHV9LQ0X.png"></p><h2 id="21-线程池添加工作线程的流程"><a href="#21-线程池添加工作线程的流程" class="headerlink" title="21.线程池添加工作线程的流程"></a>21.线程池添加工作线程的流程</h2><p><em>后面自己写个线程池！</em></p><h2 id="22-线程池为何要构建空任务的非核心线程"><a href="#22-线程池为何要构建空任务的非核心线程" class="headerlink" title="22.线程池为何要构建空任务的非核心线程"></a>22.线程池为何要构建空任务的非核心线程</h2><p>1.在核心线程数为0的时候，需要这样。不然扔进阻塞队列没人管了。</p><p>2.allowCoreThreadTimeOut,如果把这个参数设置为true,则核心线程也会被超时干掉。</p><h2 id="23-线程池使用完毕为何必须shutdown"><a href="#23-线程池使用完毕为何必须shutdown" class="headerlink" title="23.线程池使用完毕为何必须shutdown()"></a>23.线程池使用完毕为何必须shutdown()</h2><p>不然整个线程池对象ThreadPoolExecutor无法被回收，占用堆对象很严重。</p><h2 id="24-线程池的核心参数到底如何设置"><a href="#24-线程池的核心参数到底如何设置" class="headerlink" title="24.线程池的核心参数到底如何设置"></a>24.线程池的核心参数到底如何设置</h2><p>核心线程数：Hippo4j,监控。</p><h2 id="25-concurrentHashMap在JDK1-8做的优化"><a href="#25-concurrentHashMap在JDK1-8做的优化" class="headerlink" title="25.concurrentHashMap在JDK1.8做的优化"></a>25.concurrentHashMap在JDK1.8做的优化</h2><p>引入红黑树。数组+链表。链表足够长会变为红黑树。</p><p>在没有hash冲突时，CAS锁头节点去put。</p><p>在出现hash冲突时，synchronized。</p><p>扩容的时候会有协助扩容。</p><p>计数器用addCount,与LongAdder极其相似。线程A对1位置++，线程B对2位置++，最后汇总。</p><p>弱一致性。A写B查，但是B确实不一定能查到，不保证这种复合情况下的强一致性。</p><h2 id="26-concurrentHashMap的散列算法"><a href="#26-concurrentHashMap的散列算法" class="headerlink" title="26.concurrentHashMap的散列算法"></a>26.concurrentHashMap的散列算法</h2><p>存储操作putVal方法的散列算法：spread(key.hashCode()), </p><p>(h^(h&gt;&gt;&gt;16)) &amp; HASH_BITS</p><p>用传统的hashCode做运算，只有低位的一些可以参与运算。而&gt;&gt;&gt;16后，高位的也可以参与运算。这样可以尽可能的打散数据。</p><p>(n-1) &amp;hash 其中n必须是2的整数次方。</p><h2 id="27-concurrentHashMap的初始化数组的流程"><a href="#27-concurrentHashMap的初始化数组的流程" class="headerlink" title="27.concurrentHashMap的初始化数组的流程"></a>27.concurrentHashMap的初始化数组的流程</h2><p>初始化是懒加载的。类似于单例模式的两把锁，避免多个线程重复去初始化。</p><h2 id="28-concurrentHashMap扩容的流程"><a href="#28-concurrentHashMap扩容的流程" class="headerlink" title="28.concurrentHashMap扩容的流程"></a>28.concurrentHashMap扩容的流程</h2><p>基于老数组的长度计算一个扩容标识戳，如果两个线程一致，则可以协助扩容。</p><h2 id="29-concurrentHashMap读取数据的流程"><a href="#29-concurrentHashMap读取数据的流程" class="headerlink" title="29.concurrentHashMap读取数据的流程"></a>29.concurrentHashMap读取数据的流程</h2><p>没有锁。基于key得到hashCode值，然后定位到合适位置，再去find，根据具体的数据结构去做查找。</p><h2 id="30-concurrentHashMap中计数器的实现"><a href="#30-concurrentHashMap中计数器的实现" class="headerlink" title="30.concurrentHashMap中计数器的实现"></a>30.concurrentHashMap中计数器的实现</h2><p>addCount(),如果用AtomicInteger,并发比较大会让每个线程去执行CAS，不太合适。</p><p>CounterCell[] as，基于LongAdder的思想。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-Redis学习记录2</title>
      <link href="/2023/10/31/java-ba-gu-wen-redis-xue-xi-ji-lu-2/"/>
      <url>/2023/10/31/java-ba-gu-wen-redis-xue-xi-ji-lu-2/</url>
      
        <content type="html"><![CDATA[<h1 id="马士兵-Redis面试题"><a href="#马士兵-Redis面试题" class="headerlink" title="马士兵-Redis面试题"></a>马士兵-Redis面试题</h1><h2 id="1-Redis为什么这么快"><a href="#1-Redis为什么这么快" class="headerlink" title="1.Redis为什么这么快"></a>1.Redis为什么这么快</h2><p>纯内存访问，单线程避免上下文切换，渐进式ReHash,缓存时间戳</p><p>其中，渐进式Rehash用到了两张全局哈希表，缓存时间戳就是，不用System.currentTimeInMillis（因为要调用系统级别的IO，很耗时，单线程的Redis承受不起），而是对时间进行缓存，由一个定时任务，每毫秒更新一次时间缓存，获取时间都是从缓存中直接拿。</p><h2 id="2-Redis合适的应用场景"><a href="#2-Redis合适的应用场景" class="headerlink" title="2.Redis合适的应用场景"></a>2.Redis合适的应用场景</h2><p>缓存，分布式锁，消息队列，排行榜等</p><p>String：缓存，计数，共享Session,</p><p>Hash:存对象</p><p>List: 消息队列，文章列表的展示</p><p>Set: 标签(tag)–&gt;用户喜好</p><p>Zset： 排行榜</p><p>BitMaps: 布隆过滤器</p><p>HyperLogLog: 统计UV：同一个用户一天之内的访问请求只能算作一次。用HyperLogLog存的话比用集合存要更省存储（set存要28G的内容，HyperLogLog存的话要5M即可）</p><p>可以结合工作中的具体场景。</p><h2 id="3-Redis6-0之前为什么一直是单线程"><a href="#3-Redis6-0之前为什么一直是单线程" class="headerlink" title="3.Redis6.0之前为什么一直是单线程"></a>3.Redis6.0之前为什么一直是单线程</h2><p>使用Redis，CPU不是瓶颈，IO是瓶颈。</p><p>可以使用pipeline(批量处理)，每秒100万个请求。</p><p>单线程的话维护成本低，线程安全。而且多线程的线程切换，锁的开销也很大。</p><h2 id="4-Redis6-0之后为什么要引入多线程"><a href="#4-Redis6-0之后为什么要引入多线程" class="headerlink" title="4.Redis6.0之后为什么要引入多线程"></a>4.Redis6.0之后为什么要引入多线程</h2><p>8W-10W的QPS就是单线程的极限值了。大的公司需要更大的QPS，IO的多线程（内部执行命令还是多线程）</p><p>多线程，主线程去做CPU的任务，一些从线程去做IO的任务。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231107095203078.png"></p><h2 id="5-Redis有哪些高级功能"><a href="#5-Redis有哪些高级功能" class="headerlink" title="5.Redis有哪些高级功能"></a>5.Redis有哪些高级功能</h2><p>慢查询、Pipeline（发送，批处理一堆命令，返回结果）、</p><p>事务的功能比较低级，弱事务。</p><p>持久化，分布式锁。主从，集群。集群的扩容，缩容，迁移</p><p>故障转移：故障发现（主观下线，客观下线。）故障恢复（选举）</p><h2 id="6-为什么要用Redis"><a href="#6-为什么要用Redis" class="headerlink" title="6.为什么要用Redis"></a>6.为什么要用Redis</h2><p>高性能，高并发。</p><p>mysql的并发是1000&#x2F;s，  redis的并发是10W&#x2F;s</p><h2 id="7-Redis与memcache相对比有哪些优势"><a href="#7-Redis与memcache相对比有哪些优势" class="headerlink" title="7.Redis与memcache相对比有哪些优势"></a>7.Redis与memcache相对比有哪些优势</h2><p>支持的数据类型比较多，支持单个&#x2F;批量&#x2F;弱事务操作。</p><p>redis支持发布&#x2F;订阅。主从多可用，序列化支持，支持lua脚本。执行命令-单线程，网络操作-多线程。</p><p>memcache支持多线程</p><h2 id="8-怎么理解Redis中事务"><a href="#8-怎么理解Redis中事务" class="headerlink" title="8.怎么理解Redis中事务"></a>8.怎么理解Redis中事务</h2><p>redis的事务很简单。将一组需要一起执行的命令放到multi和exec两个命令之间。前面表示事务开始，后面代表事务结束。</p><p>redis的事务很弱，只对基本的语法错误进行判断，比如写的sett这种。运行时的错误管不了。</p><p>事务还是要用lua.</p><h2 id="9-Redis的过期策略以及内存淘汰机制"><a href="#9-Redis的过期策略以及内存淘汰机制" class="headerlink" title="9.Redis的过期策略以及内存淘汰机制"></a>9.Redis的过期策略以及内存淘汰机制</h2><p>定期删除–定时扫描，从过期字典里抽20个key，删除其中已经过期的，如果比例超过1&#x2F;4，则重复。</p><p>惰性删除–访问这个Key的时候检查是否过期，如果过期则立刻删除，不返回任何东西。</p><p>淘汰算法：<br>1.不淘汰 </p><p>2.只淘汰有过期时间的，分为ttl,LRU</p><p>3.不管有没有过期时间，LRU，随机</p><h2 id="10-什么是缓存穿透"><a href="#10-什么是缓存穿透" class="headerlink" title="10.什么是缓存穿透"></a>10.什么是缓存穿透</h2><p>访问一些缓存不存在的数据，就是缓存穿透。</p><p>解决放案是让redis直接返回Null，或者用布隆过滤器。</p><p>布隆过滤器优化方案：增大数组(预估合适值)，或者增加hash函数。</p><p>增加了hash函数以后，只有hash1和hash2全是1才继续往下走，有一个是0则说明数据一定不存在。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231107112602327.png"></p><h2 id="11-什么是缓存雪崩"><a href="#11-什么是缓存雪崩" class="headerlink" title="11.什么是缓存雪崩"></a>11.什么是缓存雪崩</h2><p>Redis宕机或大量key同时失效。</p><p>解决方案：集群&#x2F;主从。   TTL 岔开。</p><h2 id="12-使用Redis如何设计分布式锁"><a href="#12-使用Redis如何设计分布式锁" class="headerlink" title="12.使用Redis如何设计分布式锁"></a>12.使用Redis如何设计分布式锁</h2><p>使用setnx命令。为了避免死锁，给这个锁一个过期时间。又因为过期时间不好评估，加入watchDog</p><h2 id="13-怎么使用Redis实现消息队列"><a href="#13-怎么使用Redis实现消息队列" class="headerlink" title="13.怎么使用Redis实现消息队列"></a>13.怎么使用Redis实现消息队列</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231107122908606.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/9T_%5DAI%5B8VN%7B5F%5BFUNW7%7DD7.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231107123430778.png"></p><h2 id="14-什么是Bigkey-会有什么影响"><a href="#14-什么是Bigkey-会有什么影响" class="headerlink" title="14.什么是Bigkey,会有什么影响"></a>14.什么是Bigkey,会有什么影响</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231107123744616.png"></p><h2 id="15-Redis如何解决key冲突"><a href="#15-Redis如何解决key冲突" class="headerlink" title="15.Redis如何解决key冲突"></a>15.Redis如何解决key冲突</h2><p>key的设计，业务模块+系统名称+关键词</p><p>biz-pay-orderId-userId</p><p>分布式锁，多个客户端对同一个key的竞争。拿到锁才能进行操作</p><h2 id="16-怎么提高缓存命中率"><a href="#16-怎么提高缓存命中率" class="headerlink" title="16.怎么提高缓存命中率"></a>16.怎么提高缓存命中率</h2><p>1.提前加载 2.给缓存扩容 3.调整缓存的存储类型(String–&gt;Hash) 4.提升缓存的更新频次（比如canal监听mysql的binlog)</p><h2 id="17-Redis持久化方式有哪些，有什么区别"><a href="#17-Redis持久化方式有哪些，有什么区别" class="headerlink" title="17. Redis持久化方式有哪些，有什么区别"></a>17. Redis持久化方式有哪些，有什么区别</h2><p>RDB,快照，大，阻塞</p><p>AOF，追加，</p><p>混合的方式</p><h2 id="18-为什么Redis需要把所有数据放到内存中"><a href="#18-为什么Redis需要把所有数据放到内存中" class="headerlink" title="18.为什么Redis需要把所有数据放到内存中"></a>18.为什么Redis需要把所有数据放到内存中</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231108102756433.png"></p><p>磁盘读取时间太慢了，太耗时了。</p><h2 id="19-如何保证缓存与数据库双写时的数据一致性"><a href="#19-如何保证缓存与数据库双写时的数据一致性" class="headerlink" title="19.如何保证缓存与数据库双写时的数据一致性"></a>19.如何保证缓存与数据库双写时的数据一致性</h2><p>1.先删除缓存，后更新数据库，休眠1秒然后再删缓存。（延时双删）</p><p>2.先更新数据库，后删除缓存</p><h2 id="20-Redis集群方案怎么做"><a href="#20-Redis集群方案怎么做" class="headerlink" title="20.Redis集群方案怎么做"></a>20.Redis集群方案怎么做</h2><p>16384个槽。</p><h2 id="21-Redis集群方案什么情况下会导致整个集群不可用"><a href="#21-Redis集群方案什么情况下会导致整个集群不可用" class="headerlink" title="21.Redis集群方案什么情况下会导致整个集群不可用"></a>21.Redis集群方案什么情况下会导致整个集群不可用</h2><p>为了保证集群完整性，默认情况下，16384个槽任意一个不能用，则集群不可用。</p><p>将参数cluster-require-full-coverage配置为no，则主节点只负责它负责的槽，不影响其他槽的可用性。</p><p>集群半数以上宕机</p><p>选举机制异常的时候</p><h2 id="22-Redis的哈希槽的概念"><a href="#22-Redis的哈希槽的概念" class="headerlink" title="22.Redis的哈希槽的概念"></a>22.Redis的哈希槽的概念</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/image/image-20231108104102358.png"></p><p>0-16383，三个节点，则每个节点负责大约5460个槽</p><h2 id="23-Redis集群会有写操作丢失吗，为什么"><a href="#23-Redis集群会有写操作丢失吗，为什么" class="headerlink" title="23.Redis集群会有写操作丢失吗，为什么"></a>23.Redis集群会有写操作丢失吗，为什么</h2><p>一主多从，异步同步，主节点宕机来不及同步。</p><h2 id="24-Redis常见性能问题和解决方案"><a href="#24-Redis常见性能问题和解决方案" class="headerlink" title="24.Redis常见性能问题和解决方案"></a>24.Redis常见性能问题和解决方案</h2><p>持久化。主从，主不要做持久化，从做持久化</p><p>数据比较重要，AOF持久化，slave开启持久化，策略每秒同步一次。</p><p>主从复制不要一主99从的网状，可以用多级的树来搞从节点，分担主节点的压力。</p><h2 id="25-热点数据和冷数据"><a href="#25-热点数据和冷数据" class="headerlink" title="25.热点数据和冷数据"></a>25.热点数据和冷数据</h2><p>数据更新前至少读取2次–才能放缓存。</p><h2 id="26-什么情况下会导致Redis阻塞"><a href="#26-什么情况下会导致Redis阻塞" class="headerlink" title="26.什么情况下会导致Redis阻塞"></a>26.什么情况下会导致Redis阻塞</h2><p>客户端的主线程执行大命令，比如 keys*</p><p>bigkey的删除，释放大量的占用空间。</p><p>清空库，flushdb</p><p>AOF日志同步写，记录AOF日志，同步写。</p><p>从库加载RDB文件</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录8</title>
      <link href="/2023/10/29/xiang-mu-zi-xue-ji-lu-8/"/>
      <url>/2023/10/29/xiang-mu-zi-xue-ji-lu-8/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录8"><a href="#项目自学记录8" class="headerlink" title="项目自学记录8"></a>项目自学记录8</h1><h2 id="断言的使用"><a href="#断言的使用" class="headerlink" title="断言的使用"></a>断言的使用</h2><p>断言在判断非空</p><pre class=" language-java"><code class="language-java"> AssertUtils<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token string">"缺失bean对象，name="</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span> AssertUtils<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>formatFile<span class="token punctuation">,</span> <span class="token string">"版式文件生成失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="调用本类方法，其事务不生效"><a href="#调用本类方法，其事务不生效" class="headerlink" title="调用本类方法，其事务不生效"></a>调用本类方法，其事务不生效</h2><p>所以要新增一个类去调用别的类的方法。</p><h2 id="数据库建表时关于varchar-256-与varchar-255-的讨论"><a href="#数据库建表时关于varchar-256-与varchar-255-的讨论" class="headerlink" title="数据库建表时关于varchar(256)与varchar(255)的讨论"></a>数据库建表时关于varchar(256)与varchar(255)的讨论</h2><p>在4.0版本以下，varchar(255)指的是255个<strong>字节</strong>，使用1个字节存储长度即可。当大于等于256时，要使用2个字节存储长度。所以定义varchar(255)比varchar(256)更好。<br>但是在5.0版本以上，varchar(255)指的是255个<strong>字符</strong>，每个字符可能占用多个字节，例如使用UTF8编码时每个汉字占用3字节，使用GBK编码时每个汉字占2字节。<br>NOTE：在生产环境我们一般用utf8mb4字符集。</p><h2 id="文件路径要使用’-x2F-‘而不是’-‘"><a href="#文件路径要使用’-x2F-‘而不是’-‘" class="headerlink" title="文件路径要使用’&#x2F;‘而不是’\\‘"></a>文件路径要使用’&#x2F;‘而不是’\\‘</h2><p>对于linux系统，盘符不是\\,而是&#x2F;</p><p>然后用&#x2F;的话本地跑不起来，要用File.separator</p><h2 id="二选一的注入"><a href="#二选一的注入" class="headerlink" title="二选一的注入"></a>二选一的注入</h2><p>首先写了一个配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaptchaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultKaptcha <span class="token function">getDefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultKaptcha <span class="token function">getWebKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在controller中是这么注入的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/kaptcha"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaptchaController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"getDefaultKaptcha"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    DefaultKaptcha defaultKaptcha<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="访问jar包内的资源-打jar包后访问资源失败"><a href="#访问jar包内的资源-打jar包后访问资源失败" class="headerlink" title="访问jar包内的资源-打jar包后访问资源失败"></a>访问jar包内的资源-打jar包后访问资源失败</h2><p>jar包内的，我们得到的路径</p><p>file:\D:\developer_tools\repository\com\zbiti\anvil\vat\tools\ofd\invoice-ofd-creator\2.1.0-SNAPSHOT\invoice-ofd-creator-2.1.0-SNAPSHOT.jar!\shui.png</p><p>在子模块独立运行我们得到的路径</p><p>file:&#x2F;D:&#x2F;company&#x2F;zbiti-sdk-ofd-v2&#x2F;target&#x2F;classes&#x2F;shui.png</p><p>因为jar包下有.jar!,这个冒号，导致一般的文件或者文件名，可能会导致打开失败。</p><p>应该直接用流去做。(Java的流实在是tql)当然中间也可以用类加载器。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getQrImageData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String content <span class="token operator">=</span> invoiceInfoDomain<span class="token punctuation">.</span><span class="token function">getGraphCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedImage image <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream resource <span class="token operator">=</span> DocumentResXmlCreater<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"shui.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            image <span class="token operator">=</span> ZXingQRCodeUtils<span class="token punctuation">.</span><span class="token function">createQRCodeWithLogo</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            image <span class="token operator">=</span> ZXingQRCodeUtils<span class="token punctuation">.</span><span class="token function">createQRCode</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ByteArrayOutputStream bao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> bao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样可以保证在ofd-v2的测试程序和vat-back里有jar包的情况下都可以运行。</p><h2 id="如何在外面给一个类的内部类赋值"><a href="#如何在外面给一个类的内部类赋值" class="headerlink" title="如何在外面给一个类的内部类赋值"></a>如何在外面给一个类的内部类赋值</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> outerVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> innerVariable <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInnerVariable</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerVariable <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getInnerVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> innerVariable<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InnerClass <span class="token function">getInnerClassInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OuterClass outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取内部类的实例</span>        OuterClass<span class="token punctuation">.</span>InnerClass inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInnerClassInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改内部类的变量</span>        inner<span class="token punctuation">.</span><span class="token function">setInnerVariable</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出内部类的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span><span class="token function">getInnerVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出：30</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>里面写一个getInnerClassInstance。不然外面不能直接设置内部类里的属性。</p><h2 id="selectByMap-要用invId-而不是inv-id"><a href="#selectByMap-要用invId-而不是inv-id" class="headerlink" title="selectByMap()要用invId,而不是inv_id"></a>selectByMap()要用invId,而不是inv_id</h2><p>要用类字段而不是数据库字段</p><p>当然还是要看底层sql是咋写的。</p><h2 id="在一些文件中，调用数组的size之前，也应该判断是否为Null"><a href="#在一些文件中，调用数组的size之前，也应该判断是否为Null" class="headerlink" title="在一些文件中，调用数组的size之前，也应该判断是否为Null"></a>在一些文件中，调用数组的size之前，也应该判断是否为Null</h2><p>排查空指针异常的时候发现的。</p><p>在一个底层函数里面写了for(i &#x3D; 0; i &lt; vatInvoiceXMLDomain.getUndefinedLabelList().size(); ++i) </p><p>结果null指针。因为这个List压根没赋值。</p><p>应该先判断这个List是否为Null</p><h2 id="所有三段的，都要判断中间那个变量是否为Null"><a href="#所有三段的，都要判断中间那个变量是否为Null" class="headerlink" title="所有三段的，都要判断中间那个变量是否为Null"></a>所有三段的，都要判断中间那个变量是否为Null</h2><p>比如这种</p><pre><code>+vatInvoiceXMLDomain.getTaxSupervisionInfo().getInvoiceNumber()</code></pre><p>要判断</p><pre><code>vatInvoiceXMLDomain.getTaxSupervisionInfo()!=null</code></pre><h2 id="如果打断点失败，应该重启"><a href="#如果打断点失败，应该重启" class="headerlink" title="如果打断点失败，应该重启"></a>如果打断点失败，应该重启</h2><p>打断的变灰，说明项目走不到这里。应该重启让他重新编译一下。</p><h2 id="数据库插入数据，如果需要删除旧数据，使用replace-into"><a href="#数据库插入数据，如果需要删除旧数据，使用replace-into" class="headerlink" title="数据库插入数据，如果需要删除旧数据，使用replace into"></a>数据库插入数据，如果需要删除旧数据，使用replace into</h2><p>不要用update，尤其是在有自增主键的情况下。</p><p>replace into 判断数据是否”存在”的机制是：被插入的数据是否违反<code>主键索引</code>或者<code>唯一键索引</code>约束。如果两者都没有违反的话，就进行插入操作，如果有违反的话，就会执行”替换”操作，这里的替换所做的事情是：<code>先删除，在插入</code>。</p><p>删除：删除所有会产生以上所说的冲突的数据行。</p><p>插入：此时可以将 replace into 看成 insert into 语句。</p><p><a href="https://blog.csdn.net/weixin_45701550/article/details/117909096">replace into 和 insert into on duplicate key update 的区别 </a></p><p>但是也要考虑其他的业务方面的一致性</p><h2 id="解决跨包调用问题，使用接口"><a href="#解决跨包调用问题，使用接口" class="headerlink" title="解决跨包调用问题，使用接口"></a>解决跨包调用问题，使用接口</h2><p>上面想调用下面，调用失败。则建立一个接口，让上面的类调用上面的接口。下面的类实现上面的接口。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%958/image/image-20231130110213194.png"></p><h2 id="Pgsql的时间做减法"><a href="#Pgsql的时间做减法" class="headerlink" title="Pgsql的时间做减法"></a>Pgsql的时间做减法</h2><p>因为服务器上时间是错误的，所以要在Java本地去new Date(),然后以nowDate为参数名字传入sql中。</p><p>Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: timestamp without time zone &lt; interval</p><p>项目用的 PostgreSQL 数据库，使用 SpringBoot + <a href="https://so.csdn.net/so/search?q=Mybatis&spm=1001.2101.3001.7020">Mybatis</a> 整合</p><p>where main.create_time <![CDATA[<]]> (#{nowDate} - INTERVAL ‘1 minute’);报错</p><p>改为下面这种，要加::timestamp才能做减法</p><pre><code>where main.create_time  &lt;![CDATA[&lt;]]&gt; #&#123;nowDate&#125;::timestamp - interval &#39;1 minute&#39;;</code></pre><h2 id="对页面的表格数据变为Excel下载"><a href="#对页面的表格数据变为Excel下载" class="headerlink" title="对页面的表格数据变为Excel下载"></a>对页面的表格数据变为Excel下载</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/exportInvoiceList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exportData</span><span class="token punctuation">(</span>IntaxInvoiceDTO intaxInvoiceDTO<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>IntaxInvoiceVO<span class="token operator">></span> dataList <span class="token operator">=</span>intaxInvoiceService<span class="token punctuation">.</span><span class="token function">exportInvoiceList</span><span class="token punctuation">(</span>intaxInvoiceDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelUtils<span class="token punctuation">.</span><span class="token function">exportExcel</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"异常开票管理-%s"</span><span class="token punctuation">,</span> DateUtils<span class="token punctuation">.</span><span class="token function">getCurrentDateTimeStrWithoutSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"异常发票数据"</span><span class="token punctuation">,</span> dataList<span class="token punctuation">,</span>IntaxInvoiceVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最核心的就是ExcelUtils.exportExcel函数，第三个参数，数据列表，第四个参数，这个数据属于哪个类。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 导出Excel(单Sheet页数据) * * @param fileName  文件名 * @param sheetName Sheet页名 * @param data      导出的数据 * @param clazz     类型 * @param request   请求 * @param response  响应 * @param &lt;T>       类型模板 * @throws IOException IO异常 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token keyword">final</span> String fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> String sheetName<span class="token punctuation">,</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> <span class="token keyword">final</span> HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ExcelSheetDomain<span class="token operator">&lt;</span>T<span class="token operator">></span> excelSheetDomain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelSheetDomain</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>sheetName<span class="token punctuation">,</span> data<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exportExcel</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> excelSheetDomain<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后整个文件在vat-base里的ExcelUtils。</p>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学目录4-IO&amp;新特性</title>
      <link href="/2023/10/17/javaguide-zi-xue-ji-lu-4-io-xin-te-xing/"/>
      <url>/2023/10/17/javaguide-zi-xue-ji-lu-4-io-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGuide自学目录4-IO-amp-新特性"><a href="#JavaGuide自学目录4-IO-amp-新特性" class="headerlink" title="JavaGuide自学目录4-IO&amp;新特性"></a>JavaGuide自学目录4-IO&amp;新特性</h1><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。</p><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><code>InputStream</code>&#x2F;<code>Reader</code>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream</code>&#x2F;<code>Writer</code>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>常用字符编码所占字节数？<code>utf8</code> :英文占 1 字节，中文占 3 字节，<code>unicode</code>：任何字符都占 2 个字节，<code>gbk</code>：英文占 1 字节，中文占 2 字节。</p><p>如果音频文件、图片等媒体文件用字节流比较好，如果涉及到（中文）字符的话使用字符流比较好。</p><p>IO 操作是很消耗性能的，缓冲流将数据加载至缓冲区，一次性读取&#x2F;写入多个字节，从而避免频繁的 IO 操作，提高流的传输效率。</p><p>字节缓冲流这里采用了装饰器模式来增强 <code>InputStream</code> 和<code>OutputStream</code>子类对象的功能。</p><p>随机访问流可以支持随意跳转到文件的任意位置进行读写，RandomAccessFile</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>没看懂</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>为了解决接口的修改与现有的实现不兼容的问题。新 interface 的方法可以用<code>default</code> 或 <code>static</code>修饰，这样就可以有方法体，实现类也不必重写此方法。</p><p>static修饰的方法，子类就不能重写了。</p><h3 id="functional-interface"><a href="#functional-interface" class="headerlink" title="functional interface"></a>functional interface</h3><p>只要符合函数式接口的定义就是函数式接口.</p><p><strong>定义</strong>：也称 SAM 接口，即 Single Abstract Method interfaces，有且只有一个抽象方法，但可以有多个非抽象方法的接口。</p><p>可以加一个<code>@FunctionalInterface</code>注解，注解只是在编译时起到强制规范定义的作用</p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>让一些写法更加紧凑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's a lambda function!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只要方法的参数是函数式接口都可以用 Lambda 表达式。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>lambda 表达式可以引用外边变量，但是该变量默认拥有 final 属性，不能被修改，如果修改，编译时就报错。</p><p>下面就会报错：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Runnable r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h3><ol><li>stream 串行流</li><li>parallelStream 并行流，可多线程执行</li></ol><p>并行 <code>parallelStream</code> 在使用方法上和串行一样。主要区别是 <code>parallelStream</code> 可多线程执行，是基于 ForkJoin 框架实现的，有时间大家可以了解一下 <code>ForkJoin</code> 框架和 <code>ForkJoinPool</code>。这里可以简单的理解它是通过线程池来实现的，这样就会涉及到线程安全，线程消耗等问题</p><p>filter(过滤)，sorted（排序），map(映射)，match(匹配), count（计数），reduce(规约)</p><p>排序之后原数据 stringList 是不会被修改的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试 Map 操作</span>stringList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "BBB1", "AAA2", "AAA1"</span></code></pre><p>匹配的结果是boolean,有anyMatch(),allMatch(),noneMatch().</p><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>建议使用 <code>Optional</code> 解决 NPE（<code>java.lang.NullPointerException</code>）问题，它就是为 NPE 而生的，其中可以包含空值或非空值</p><blockquote><p>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p><p>1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p><p>反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</p><p>2） 数据库的查询结果可能为 null。</p><p>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p><p>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p><p>5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p><p>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p><p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p></blockquote><p>传统解决NPE的方法如下</p><pre class=" language-java"><code class="language-java">Zoo zoo <span class="token operator">=</span> <span class="token function">getZoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>zoo <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>   Dog dog <span class="token operator">=</span> zoo<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>dog <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> age <span class="token operator">=</span> dog<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Optional的实现方法：</p><pre class=" language-java"><code class="language-java">Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>zoo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-</span><span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d <span class="token operator">-</span><span class="token operator">></span> d<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token operator">></span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​                                                              </p><p><code>ofNullable</code> 方法和<code>of</code>方法唯一区别就是当 value 为 null 时，<code>ofNullable</code> 返回的是<code>EMPTY</code>，of 会抛出 <code>NullPointerException</code> 异常。如果需要把 <code>NullPointerException</code> 暴漏出来就用 <code>of</code>，否则就用 <code>ofNullable</code>。</p><p><code>flatMap()</code>可以将<code>map()</code>的结果展开. 在<code>Stream</code>和<code>Optional</code>中正确使用<code>flatMap</code>可以减少很多不必要的代码</p><h3 id="全新的Date-Time"><a href="#全新的Date-Time" class="headerlink" title="全新的Date-Time"></a>全新的Date-Time</h3><blockquote><p>LocalDateTime.class &#x2F;&#x2F;日期+时间 format: yyyy-MM-ddTHH:mm:ss.SSS<br>LocalDate.class &#x2F;&#x2F;日期 format: yyyy-MM-dd<br>LocalTime.class &#x2F;&#x2F;时间 format: HH:mm:ss</p></blockquote><p>解决了 Date 类的大部分痛点：</p><ol><li>非线程安全</li><li>时区处理麻烦</li><li>各种格式化、和时间计算繁琐</li><li>设计有缺陷，Date 类同时包含日期和时间；还有一个 java.sql.Date，容易混淆。</li></ol><p>Java8之前用SimpleDateFormat去转。</p><pre class=" language-java"><code class="language-java">LocalDate t1<span class="token operator">=</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime t2<span class="token operator">=</span>LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime T3<span class="token operator">=</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>T3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>sout分别是</p><blockquote><p>2023-11-20<br>19:23:56.353<br>2023-11-20T19:23:56.353</p><p>2023-11-20 19:23:56</p></blockquote><p>字符串转日期格式。<strong>Java 8 之前</strong> 转换都需要借助 <code>SimpleDateFormat</code> 类，而<strong>Java 8 之后</strong>只需要 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>的 <code>of</code> 或 <code>parse</code> 方法。</p><h3 id="JAVA9"><a href="#JAVA9" class="headerlink" title="JAVA9"></a>JAVA9</h3><p>在 Java 8 的时候，默认垃圾回收器是 Parallel Scavenge（新生代）+Parallel Old（老年代）。到了 Java 9, CMS 垃圾回收器被废弃了，<strong>G1（Garbage-First Garbage Collector）</strong> 成为了默认垃圾回收器。</p><p>G1 还是在 Java 7 中被引入的，经过两个版本优异的表现成为成为默认垃圾回收。</p><p>在 Java 9 之后，<code>String</code> 的实现改用 <code>byte[]</code> 数组存储字符串，节省了空间。</p><h3 id="JAVA10"><a href="#JAVA10" class="headerlink" title="JAVA10"></a>JAVA10</h3><p>从 Java9 开始 G1 就了默认的垃圾回收器，G1 是以一种低延时的垃圾回收器来设计的，旨在避免进行 Full GC,但是 Java9 的 G1 的 FullGC 依然是使用单线程去完成标记清除算法,这可能会导致垃圾回收期在无法回收内存的时候触发 Full GC。</p><p>为了最大限度地减少 Full GC 造成的应用停顿的影响，从 Java10 开始，<strong>G1 的 FullGC 改为并行</strong>的标记清除算法，同时会使用与年轻代回收和混合回收相同的并行工作线程数量，从而减少了 Full GC 的发生，以带来更好的性能提升、更大的吞吐</p><h3 id="Java11"><a href="#Java11" class="headerlink" title="Java11"></a>Java11</h3><p><strong>ZGC 即 Z Garbage Collector</strong>，是一个可伸缩的、低延迟的垃圾收集器。</p><p>ZGC 主要为了满足如下目标进行设计：</p><ul><li>GC 停顿时间不超过 10ms</li><li>即能处理几百 MB 的小堆，也能处理几个 TB 的大堆</li><li>应用吞吐能力不会下降超过 15%（与 G1 回收算法相比）</li><li>方便在此基础上引入新的 GC 特性和利用 colored 针以及 Load barriers 优化奠定基础</li><li>当前只支持 Linux&#x2F;x64 位平台</li></ul><p>ZGC 目前 <strong>处在实验阶段</strong>，只支持 Linux&#x2F;x64 平台。</p><p>与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。</p><p>在 ZGC 中出现 Stop The World 的情况会更少！</p><h3 id="Java12"><a href="#Java12" class="headerlink" title="Java12"></a>Java12</h3><h4 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h4><p>Redhat 主导开发的 Pauseless GC 实现，主要目标是 99.9% 的暂停小于 10ms，暂停与堆大小无关等</p><p>和 Java11 开源的 ZGC 相比（需要升级到 JDK11 才能使用），Shenandoah GC 有稳定的 JDK8u 版本，在 Java8 占据主要市场份额的今天有更大的可落地性。</p><h4 id="G1-收集器优化"><a href="#G1-收集器优化" class="headerlink" title="G1 收集器优化"></a>G1 收集器优化</h4><p>Java12 为默认的垃圾收集器 G1 带来了两项更新:</p><ul><li><strong>可中止的混合收集集合</strong>：JEP344 的实现，为了达到用户提供的停顿时间目标，JEP 344 通过把要被回收的区域集（混合收集集合）拆分为强制和可选部分，使 G1 垃圾回收器能中止垃圾回收过程。 G1 可以中止可选部分的回收以达到停顿时间目标</li><li><strong>及时返回未使用的已分配内存</strong>：JEP346 的实现，增强 G1 GC，以便在空闲时自动将 Java 堆内存返回给操作系统</li></ul><h3 id="JAVA13"><a href="#JAVA13" class="headerlink" title="JAVA13"></a>JAVA13</h3><p>增强 ZGC(释放未使用内存)</p><p>在 Java 11 中实验性引入的 ZGC 在实际的使用中存在未能主动将未使用的内存释放给操作系统的问题。</p><p>ZGC 堆由一组称为 ZPages 的堆区域组成。在 GC 周期中清空 ZPages 区域时，它们将被释放并返回到页面缓存 <strong>ZPageCache</strong> 中，此缓存中的 ZPages 按最近最少使用（LRU）的顺序，并按照大小进行组织。</p><p>在 Java 13 中，ZGC 将向操作系统返回被标识为长时间未使用的页面，这样它们将可以被其他进程重用。</p><h3 id="JAVA14"><a href="#JAVA14" class="headerlink" title="JAVA14"></a>JAVA14</h3><p>从 Java11 引入的 ZGC 作为继 G1 过后的下一代 GC 算法，从支持 Linux 平台到 Java14 开始支持 MacOS 和 Windows（个人感觉是终于可以在日常开发工具中先体验下 ZGC 的效果了，虽然其实 G1 也够用）</p><p>移除了 CMS(Concurrent Mark Sweep) 垃圾收集器（功成而退）</p><h3 id="JAVA15"><a href="#JAVA15" class="headerlink" title="JAVA15"></a>JAVA15</h3><p>Java11 的时候 ，ZGC 还在试验阶段。</p><p>当时，ZGC 的出现让众多 Java 开发者看到了垃圾回收器的另外一种可能，因此备受关注。</p><p>经过多个版本的迭代，不断的完善和修复问题，ZGC 在 Java 15 已经可以正式使用了！</p><p>不过，默认的垃圾回收器依然是 G1。你可以通过下面的参数启动 ZGC：</p><pre class=" language-bash"><code class="language-bash">$ java -XX:+UseZGC className</code></pre><p><strong>Nashorn JavaScript 引擎彻底移除</strong>：Nashorn 从 Java8 开始引入的 JavaScript 引擎，Java9 对 Nashorn 做了些增强，实现了一些 ES6 的新特性。在 Java 11 中就已经被弃用，到了 Java 15 就彻底被删除了。</p><p><strong>禁用和废弃偏向锁（Biased Locking）</strong>：偏向锁的引入增加了 JVM 的复杂性大于其带来的性能提升。不过，你仍然可以使用 <code>-XX:+UseBiasedLocking</code> 启用偏向锁定，但它会提示 这是一个已弃用的 API。</p><h3 id="JAVA16"><a href="#JAVA16" class="headerlink" title="JAVA16"></a>JAVA16</h3><p>JEP376:ZGC 并发线程堆栈处理</p><h3 id="JAVA17"><a href="#JAVA17" class="headerlink" title="JAVA17"></a>JAVA17</h3><p>对switch增加了类型匹配自动转换功能。</p><h3 id="JAVA19"><a href="#JAVA19" class="headerlink" title="JAVA19"></a>JAVA19</h3><p>虚拟线程（Virtual Thread-）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。</p><p>相比较于平台线程来说，虚拟线程是廉价且轻量级的，使用完后立即被销毁，因此它们不需要被重用或池化，每个任务可以有自己专属的虚拟线程来运行。虚拟线程暂停和恢复来实现线程之间的切换，避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis高级篇-黑马</title>
      <link href="/2023/10/13/redis-gao-ji-pian-hei-ma/"/>
      <url>/2023/10/13/redis-gao-ji-pian-hei-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis高级篇-黑马"><a href="#Redis高级篇-黑马" class="headerlink" title="Redis高级篇-黑马"></a>Redis高级篇-黑马</h1><h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018100119951.png"></p><p>当然分片集群也内置了哨兵（各个master节点）来进行故障恢复</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>RDB全称Redis Database Backup file（Redis数据备份文件），简单来说就是把内存中的所有数据都记录到磁盘中。快照文件称为RDB文件，默认是保存在当前运行目录。</p><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p>save命令，主进程执行RDB,这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p>bgsave命令,执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。</p><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。<br>fork采用的是copy-on-write技术：<br>当主进程执行读操作时，访问共享内存；<br>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018102019624.png"></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到。比如，900秒内，如果至少有1个key被修改，则执行bgsave。</p><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p>AOF的刷盘，同步刷盘太耗费性能，交给操作系统则可靠性差，则推荐everysec每秒刷盘</p><p>通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018102711911.png"></p><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018102748335.png"></p><p>假设有A、B两个Redis实例，如何让B作为A的slave节点？<br>在B节点执行命令：slaveof A的IP A的port</p><p>第一次是全量同步，1.1请求数据同步</p><p><strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018105359268.png"></p><p>之后几次一般都是增量同步，除非差距过大</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018105613360.png"></p><p>repl_baklog大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导致尚未备份的数据被覆盖，则无法基于log做增量同步，只能再次全量同步</p><p>全量同步时的repl_baklog文件，这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018105918836.png"></p><p>主从优化：可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p>主从从架构图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018110353544.png"></p><h3 id="哨兵（Sentinel）"><a href="#哨兵（Sentinel）" class="headerlink" title="哨兵（Sentinel）"></a>哨兵（Sentinel）</h3><p>哨兵的作用如下：</p><ul><li><strong>监控</strong>：Sentinel 会不断检查您的master和slave是否按预期工作</li><li><strong>自动故障恢复</strong>：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li><strong>通知</strong>：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018110935532.png"></p><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令：</p><p>一个sentinel判断是主观下线，过半sentinel判断则构成客观下线</p><p>故障恢复：</p><ol><li>首先选定一个slave作为新的master，执行slaveof no one</li><li>然后让所有节点都执行slaveof 新master</li><li>修改故障节点，执行slaveof 新master</li></ol><p>配置读写分离：</p><p>Spring的RedisTemplate底层利用lettuce实现了节点的感知和自动切换。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后在配置文件application.yml中指定redis的sentinel相关信息：</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  redis<span class="token operator">:</span>    sentinel<span class="token operator">:</span>      master<span class="token operator">:</span> mymaster      nodes<span class="token operator">:</span>        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">150.101</span><span class="token operator">:</span><span class="token number">27001</span>        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">150.101</span><span class="token operator">:</span><span class="token number">27002</span>        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">150.101</span><span class="token operator">:</span><span class="token number">27003</span></code></pre><p>配置读写分离</p><p>在项目的启动类中，添加一个新的bean：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="token function">clientConfigurationBuilderCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> clientConfigurationBuilder <span class="token operator">-</span><span class="token operator">></span> clientConfigurationBuilder<span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span>ReadFrom<span class="token punctuation">.</span>REPLICA_PREFERRED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica</li><li>REPLICA：从slave（replica）节点读取</li><li>REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master</li></ul><h3 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h3><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li><p>海量数据存储问题</p></li><li><p>高并发写的问题</p></li></ul><p>使用分片集群可以解决上述问题，如图:</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231018112040423.png"></p><p>分片集群特征：</p><ul><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li></ul><p>插槽：存储数据是存在插槽上，0~16383共16384个插槽（hash slot）上，然后根据master数量再进行分区域。</p><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li>key中包含”{}”，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</li><li>key中不包含“{}”，整个key都是有效部分</li></ul><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。</p><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>这一类数据使用相同的有效部分，例如key都以{typeId}为前缀</li></ul><p>集群可以进行伸缩，要执行一些redis cluster指令，还要分配插槽。</p><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><h2 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231020171901565.png"></p><p>在tomcat那的进程缓存，可以使用Caffeine</p><p>在Nginx中也是写lua，可以使用OpenResty(OpenResty® 是一个基于 Nginx的高性能 Web 平台)</p><h3 id="数据同步-canal"><a href="#数据同步-canal" class="headerlink" title="数据同步-canal"></a>数据同步-canal</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231020171045869.png"></p><p>Canal就是把自己伪装成MySQL的一个slave节点，从而监听master的binary log变化。再把得到的变化信息通知给Canal的客户端，进而完成对其它数据库的同步。</p><p>Canal是基于mysql的主从同步来实现的，MySQL主从同步的原理如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231020171157880.png"></p><ul><li>1）MySQL master 将数据变更写入二进制日志( binary log），其中记录的数据叫做binary log events</li><li>2）MySQL slave 将 master 的 binary log events拷贝到它的中继日志(relay log)</li><li>3）MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li></ul><h3 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.javatool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>canal-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1-RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写配置："><a href="#编写配置：" class="headerlink" title="编写配置："></a>编写配置：</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">canal</span><span class="token punctuation">:</span>  <span class="token key atrule">destination</span><span class="token punctuation">:</span> heima <span class="token comment" spellcheck="true"># canal的集群名字，要与安装canal时设置的名称一致</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">11111 </span><span class="token comment" spellcheck="true"># canal服务地址</span></code></pre><h3 id="修改Item实体类"><a href="#修改Item实体类" class="headerlink" title="修改Item实体类"></a>修改Item实体类</h3><p>通过@Id、@Column、等注解完成Item与数据库表字段的映射：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableField<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableName<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transient<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_item"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品名称</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品标题</span>    <span class="token keyword">private</span> Long price<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//价格（分）</span>    <span class="token keyword">private</span> String image<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品图片</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分类名称</span>    <span class="token keyword">private</span> String brand<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品牌名称</span>    <span class="token keyword">private</span> String spec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//规格</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品状态 1-正常，2-下架</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建时间</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新时间</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Transient</span>    <span class="token keyword">private</span> Integer stock<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Transient</span>    <span class="token keyword">private</span> Integer sold<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@Transient：</p><p>可以将该字段不持久化至数据库表中</p><p>@TableField(exist &#x3D; false)：</p><p>可以让<a href="https://so.csdn.net/so/search?q=Mybatis-plus&spm=1001.2101.3001.7020">Mybatis-plus</a>忽略该字段，不将其作为SQL语句中的字段。</p><h3 id="编写监听器"><a href="#编写监听器" class="headerlink" title="编写监听器"></a>编写监听器</h3><p>通过实现<code>EntryHandler&lt;T&gt;</code>接口编写监听器，监听Canal消息。注意两点：</p><ul><li>实现类通过<code>@CanalTable(&quot;tb_item&quot;)</code>指定监听的表信息</li><li>EntryHandler的泛型是与表对应的实体类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>canal<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>Cache<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RedisHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> top<span class="token punctuation">.</span>javatool<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CanalTable<span class="token punctuation">;</span><span class="token keyword">import</span> top<span class="token punctuation">.</span>javatool<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>EntryHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定要监听的表</span><span class="token annotation punctuation">@CanalTable</span><span class="token punctuation">(</span><span class="token string">"tb_item"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//Item是指定的被监听的实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemHandler</span> <span class="token keyword">implements</span> <span class="token class-name">EntryHandler</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisHandler redisHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Cache<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Item<span class="token operator">></span> itemCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写数据到JVM进程缓存</span>        itemCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写数据到redis</span>        redisHandler<span class="token punctuation">.</span><span class="token function">saveItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Item before<span class="token punctuation">,</span> Item after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写数据到JVM进程缓存</span>        itemCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写数据到redis</span>        redisHandler<span class="token punctuation">.</span><span class="token function">saveItem</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除数据到JVM进程缓存</span>        itemCache<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除数据到redis</span>        redisHandler<span class="token punctuation">.</span><span class="token function">deleteItemById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里对Redis的操作都封装到了RedisHandler这个对象中，是我们之前做缓存预热时编写的一个类，内容如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>ItemStock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IItemService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IItemStockService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>InitializingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IItemService itemService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IItemStockService stockService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectMapper MAPPER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化缓存</span>        <span class="token comment" spellcheck="true">// 1.查询商品信息</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> itemList <span class="token operator">=</span> itemService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.放入缓存</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Item item <span class="token operator">:</span> itemList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.1.item序列化为JSON</span>            String json <span class="token operator">=</span> MAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.2.存入redis</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"item:id:"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.查询商品库存信息</span>        List<span class="token operator">&lt;</span>ItemStock<span class="token operator">></span> stockList <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.放入缓存</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ItemStock stock <span class="token operator">:</span> stockList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.1.item序列化为JSON</span>            String json <span class="token operator">=</span> MAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.2.存入redis</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"item:stock:id:"</span> <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String json <span class="token operator">=</span> MAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"item:id:"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteItemById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"item:id:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Redis最佳实践"><a href="#Redis最佳实践" class="headerlink" title="Redis最佳实践"></a>Redis最佳实践</h2><h3 id="BigKey"><a href="#BigKey" class="headerlink" title="BigKey"></a>BigKey</h3><p>Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定：</p><ul><li>遵循基本格式：[业务名称]:[数据名]:[id]</li><li>长度不超过44字节</li><li>不包含特殊字符</li></ul><p>例如：我们的登录业务，保存用户信息，其key可以设计成如下格式：</p><p>local : user :10</p><p>这样设计的好处：</p><ul><li>可读性强</li><li>避免key冲突</li><li>方便管理</li><li>更节省内存： key是string类型，底层编码包含int、embstr和raw三种。embstr在小于44字节使用，采用连续内存空间，内存占用更小。当字节数大于44字节时，会转为raw模式存储，在raw模式下，内存空间不是连续的，而是采用一个指针指向了另外一段内存空间，在这段空间里存储SDS内容，这样空间不连续，访问的时候性能也就会收到影响，还有可能产生内存碎片</li></ul><p>BigKey通常以Key的大小和Key中成员的数量来综合判定，例如：</p><ul><li>Key本身的数据量过大：一个String类型的Key，它的值为5 MB</li><li>Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个</li><li>Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB</li></ul><p>那么如何判断元素的大小呢？redis也给我们提供了命令</p><p>memory usage name  不过这种太耗费CPU了</p><p>所以我们用长度或列表大小来估算  strlen name   llen list2</p><p>推荐值：</p><ul><li>单个key的value小于10KB</li><li>对于集合类型的key，建议元素数量小于1000</li></ul><h4 id="BigKey的危害"><a href="#BigKey的危害" class="headerlink" title="BigKey的危害"></a>BigKey的危害</h4><ul><li>网络阻塞<ul><li>对BigKey执行读请求时，少量的QPS就可能导致带宽使用率被占满，导致Redis实例，乃至所在物理机变慢</li></ul></li><li>数据倾斜<ul><li>BigKey所在的Redis实例内存使用率远超其他实例，无法使数据分片的内存资源达到均衡</li></ul></li><li>Redis阻塞<ul><li>对元素较多的hash、list、zset等做运算会耗时较旧，使主线程被阻塞</li></ul></li><li>CPU压力<ul><li>对BigKey的数据序列化和反序列化会导致CPU的使用率飙升，影响Redis实例和本机其它应用</li></ul></li></ul><h4 id="如何发现BigKey"><a href="#如何发现BigKey" class="headerlink" title="如何发现BigKey"></a>如何发现BigKey</h4><h5 id="①redis-cli-–bigkeys"><a href="#①redis-cli-–bigkeys" class="headerlink" title="①redis-cli –bigkeys"></a>①redis-cli –bigkeys</h5><p>利用redis-cli提供的–bigkeys参数，可以遍历分析所有key，并返回Key的整体统计信息与每个数据的Top1的big key</p><p>命令：<code>redis-cli -a 密码 --bigkeys</code></p><h5 id="②scan扫描"><a href="#②scan扫描" class="headerlink" title="②scan扫描"></a>②scan扫描</h5><p>自己编程，利用scan扫描Redis中的所有key，利用strlen、hlen等命令判断key的长度（此处不建议使用MEMORY USAGE）</p><h5 id="③第三方工具"><a href="#③第三方工具" class="headerlink" title="③第三方工具"></a>③第三方工具</h5><ul><li>利用第三方工具，如 Redis-Rdb-Tools 分析RDB快照文件，全面分析内存使用情况</li><li><a href="https://github.com/sripathikrishnan/redis-rdb-tools">https://github.com/sripathikrishnan/redis-rdb-tools</a></li></ul><h5 id="④网络监控"><a href="#④网络监控" class="headerlink" title="④网络监控"></a>④网络监控</h5><ul><li>自定义工具，监控进出Redis的网络数据，超出预警值时主动告警</li><li>一般阿里云搭建的云服务器就有相关监控页面</li></ul><h4 id="如何删除BigKey"><a href="#如何删除BigKey" class="headerlink" title="如何删除BigKey"></a>如何删除BigKey</h4><p>BigKey内存占用较多，即便时删除这样的key也需要耗费很长时间，导致Redis主线程阻塞，引发一系列问题。</p><p>redis 3.0 及以下版本</p><ul><li>如果是集合类型，则遍历BigKey的元素，先逐个删除子元素，最后删除BigKey</li></ul><p>Redis 4.0以后</p><ul><li>Redis在4.0后提供了异步删除的命令：unlink</li></ul><h3 id="恰当的数据类型"><a href="#恰当的数据类型" class="headerlink" title="恰当的数据类型"></a>恰当的数据类型</h3><h4 id="例1：比如存储一个User对象，我们有三种存储方式："><a href="#例1：比如存储一个User对象，我们有三种存储方式：" class="headerlink" title="例1：比如存储一个User对象，我们有三种存储方式："></a>例1：比如存储一个User对象，我们有三种存储方式：</h4><h5 id="①方式一：json字符串"><a href="#①方式一：json字符串" class="headerlink" title="①方式一：json字符串"></a>①方式一：json字符串</h5><table><thead><tr><th align="center">user:1</th><th align="center">{“name”: “Jack”, “age”: 21}</th></tr></thead></table><p>优点：实现简单粗暴</p><p>缺点：数据耦合，不够灵活</p><h5 id="②方式二：字段打散"><a href="#②方式二：字段打散" class="headerlink" title="②方式二：字段打散"></a>②方式二：字段打散</h5><table><thead><tr><th align="center">user:1:name</th><th align="center">Jack</th></tr></thead><tbody><tr><td align="center">user:1:age</td><td align="center">21</td></tr></tbody></table><p>优点：可以灵活访问对象任意字段</p><p>缺点：占用空间大、没办法做统一控制</p><h5 id="③方式三：hash（推荐）"><a href="#③方式三：hash（推荐）" class="headerlink" title="③方式三：hash（推荐）"></a>③方式三：hash（推荐）</h5><table>    <tr>        <td rowspan="2">user:1</td>        <td>name</td>        <td>jack</td>    </tr>    <tr>        <td>age</td>        <td>21</td>    </tr></table><p>优点：底层使用ziplist，空间占用小，可以灵活访问对象的任意字段</p><p>缺点：代码相对复杂</p><h4 id="例2：假如有hash类型的key，其中有100万对field和value，field是自增id，这个key存在什么问题？如何优化？"><a href="#例2：假如有hash类型的key，其中有100万对field和value，field是自增id，这个key存在什么问题？如何优化？" class="headerlink" title="例2：假如有hash类型的key，其中有100万对field和value，field是自增id，这个key存在什么问题？如何优化？"></a>例2：假如有hash类型的key，其中有100万对field和value，field是自增id，这个key存在什么问题？如何优化？</h4><table>    <tr style="color:red">        <td>key</td>        <td>field</td>        <td>value</td>    </tr>    <tr>        <td rowspan="3">someKey</td>        <td>id:0</td>        <td>value0</td>    </tr>    <tr>        <td>.....</td>        <td>.....</td>    </tr>    <tr>        <td>id:999999</td>        <td>value999999</td>    </tr></table><p>存在的问题：</p><ul><li>hash的entry数量超过500时，会使用哈希表而不是ZipList，内存占用较多<ul><li>62.23M</li></ul></li><li>可以通过hash-max-ziplist-entries配置entry上限。但是如果entry过多就会导致BigKey问题</li></ul><h5 id="方案一–77-54M"><a href="#方案一–77-54M" class="headerlink" title="方案一–77.54M"></a>方案一–77.54M</h5><p>拆分为string类型</p><table>    <tr style="color:red">        <td>key</td>        <td>value</td>    </tr>    <tr>        <td>id:0</td>        <td>value0</td>    </tr>    <tr>        <td>.....</td>        <td>.....</td>    </tr>    <tr>        <td>id:999999</td>        <td>value999999</td>    </tr></table><p>存在的问题：</p><ul><li><p>string结构底层没有太多内存优化，内存占用较多</p></li><li><p>想要批量获取这些数据比较麻烦</p></li></ul><h5 id="方案二-24-46M"><a href="#方案二-24-46M" class="headerlink" title="方案二-24.46M"></a>方案二-24.46M</h5><p>拆分为小的hash，将 id &#x2F; 100 作为key， 将id % 100 作为field，这样每100个元素为一个Hash</p><table>    <tr style="color:red">        <td>key</td>        <td>field</td>        <td>value</td>    </tr>    <tr>        <td rowspan="3">key:0</td>        <td>id:00</td>        <td>value0</td>    </tr>    <tr>        <td>.....</td>        <td>.....</td>    </tr>    <tr>        <td>id:99</td>        <td>value99</td>    </tr>    <tr>        <td rowspan="3">key:1</td>        <td>id:00</td>        <td>value100</td>    </tr>    <tr>        <td>.....</td>        <td>.....</td>    </tr>    <tr>        <td>id:99</td>        <td>value199</td>    </tr>    <tr>        <td colspan="3">....</td>    </tr>    <tr>        <td rowspan="3">key:9999</td>        <td>id:00</td>        <td>value999900</td>    </tr>    <tr>        <td>.....</td>        <td>.....</td>    </tr>    <tr>        <td>id:99</td>        <td>value999999</td>    </tr></table>### 批处理优化<p>Redis提供了一些原生的批处理指令，不过每条指令只能处理特定的数据结构，例如mset，hmset</p><p>如果有对复杂数据类型的批处理需要，建议使用Pipeline</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建管道</span>    Pipeline pipeline <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> b <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 放入命令到管道</span>        pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test:key_"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"value_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每放入1000条命令，批量执行</span>            pipeline<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> e <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>针对于集群下的批处理</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E9%AB%98%E7%BA%A7%E7%AF%87-%E9%BB%91%E9%A9%AC/image/image-20231024100920438.png"></p><p>Spring集群环境下批处理代码</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testMSetInCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSet</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Redis的持久化配置"><a href="#Redis的持久化配置" class="headerlink" title="Redis的持久化配置"></a>Redis的持久化配置</h3><p>Redis的持久化虽然可以保证数据安全，但也会带来很多额外的开销，因此持久化请遵循下列建议：</p><ul><li>用来做缓存的Redis实例尽量不要开启持久化功能</li><li>建议关闭RDB持久化功能，使用AOF持久化</li><li>利用脚本定期在slave节点做RDB，实现数据备份</li><li>设置合理的rewrite阈值，避免频繁的bgrewrite</li><li>配置no-appendfsync-on-rewrite &#x3D; yes，禁止在rewrite期间做aof，避免因AOF引起的阻塞</li><li>部署有关建议：<ul><li>Redis实例的物理机要预留足够内存，应对fork和rewrite</li><li>单个Redis实例内存上限不要太大，例如4G或8G。可以加快fork的速度、减少主从同步、数据迁移压力</li><li>不要与CPU密集型应用部署在一起</li><li>不要与高硬盘负载应用一起部署。例如：数据库、消息队列</li></ul></li></ul><h3 id="Redis的慢查询"><a href="#Redis的慢查询" class="headerlink" title="Redis的慢查询"></a>Redis的慢查询</h3><p>慢查询的阈值可以通过配置指定：</p><p>slowlog-log-slower-than：慢查询阈值，单位是微秒。默认是10000，建议1000</p><p>慢查询会被放入慢查询日志中，日志的长度有上限，可以通过配置指定：</p><p>slowlog-max-len：慢查询日志（本质是一个队列）的长度。默认是128，建议1000</p><p>知道了以上内容之后，那么咱们如何去查看慢查询日志列表呢：</p><ul><li>slowlog len：查询慢查询日志长度</li><li>slowlog get [n]：读取n条慢查询日志</li><li>slowlog reset：清空慢查询列表</li></ul><h3 id="一些安全问题"><a href="#一些安全问题" class="headerlink" title="一些安全问题"></a>一些安全问题</h3><ul><li>Redis一定要设置密码</li><li>禁止线上使用下面命令：keys、flushall、flushdb、config set等命令。可以利用rename-command禁用。</li><li>bind：限制网卡，禁止外网网卡访问</li><li>开启防火墙</li><li>不要使用Root账户启动Redis</li><li>尽量不是有默认的端口</li></ul><h3 id="一些内存问题，还有集群主从"><a href="#一些内存问题，还有集群主从" class="headerlink" title="一些内存问题，还有集群主从"></a>一些内存问题，还有集群主从</h3>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学记录3--并发编程</title>
      <link href="/2023/10/10/javaguide-zi-xue-ji-lu-3-bing-fa-bian-cheng/"/>
      <url>/2023/10/10/javaguide-zi-xue-ji-lu-3-bing-fa-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="线程-共享区域与独占区域"><a href="#线程-共享区域与独占区域" class="headerlink" title="线程-共享区域与独占区域"></a>线程-共享区域与独占区域</h2><p>与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p>程序计数器私有主要是为了<strong>线程切换后能恢复到正确的执行位置</strong></p><p>为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的</p><p>堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p><h2 id="Java线程状态变迁图"><a href="#Java线程状态变迁图" class="headerlink" title="Java线程状态变迁图"></a>Java线程状态变迁图</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%953-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image/image-20231010135407469.png"></p><h2 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h2><p>互斥条件：该资源任意一个时刻只由一个线程占用。</p><p>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</p><p>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</p><p>循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。</p><h2 id="如何预防和避免线程死锁"><a href="#如何预防和避免线程死锁" class="headerlink" title="如何预防和避免线程死锁?"></a>如何预防和避免线程死锁?</h2><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p><ol><li><strong>破坏请求与保持条件</strong>：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong>：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p><strong>如何避免死锁？</strong></p><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><h2 id="volatile-可见性"><a href="#volatile-可见性" class="headerlink" title="volatile-可见性"></a>volatile-可见性</h2><p>在 Java 中，<code>volatile</code> 关键字可以保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p>跳过本地内存，直接去主内存读取。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%953-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image/image-20231010151721958.png"></p><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</p><h2 id="volatile-单例模式的面试题"><a href="#volatile-单例模式的面试题" class="headerlink" title="volatile+单例模式的面试题"></a>volatile+单例模式的面试题</h2><p>下面我以一个常见的面试题为例讲解一下 <code>volatile</code> 关键字禁止指令重排序的效果。</p><p>面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”</p><p><strong>双重校验锁实现对象单例（线程安全）</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//类对象加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的，<code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><h2 id="volatile不能保证原子性"><a href="#volatile不能保证原子性" class="headerlink" title="volatile不能保证原子性"></a>volatile不能保证原子性</h2><p>很多人会误认为自增操作 <code>inc++</code> 是原子性的，实际上，<code>inc++</code> 其实是一个复合操作，包括三步：</p><ol><li>读取 inc 的值。</li><li>对 inc 加 1。</li><li>将 inc 的值写回内存。</li></ol><p><code>volatile</code> 是无法保证这三个操作是具有原子性的，有可能导致下面这种情况出现：</p><ol><li>线程 1 对 <code>inc</code> 进行读取操作之后，还未对其进行修改。线程 2 又读取了 <code>inc</code>的值并对其进行修改（+1），再将<code>inc</code> 的值写回内存。</li><li>线程 2 操作完毕后，线程 1 对 <code>inc</code>的值进行修改（+1），再将<code>inc</code> 的值写回内存。</li></ol><p>这也就导致两个线程分别对 <code>inc</code> 进行了一次自增操作后，<code>inc</code> 实际上只增加了 1。</p><p>其实，如果想要保证上面的代码运行正确也非常简单，利用 <code>synchronized</code>、<code>Lock</code>或者<code>AtomicInteger</code>都可以。</p><h2 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h2><p>CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5 开始，提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用<code>AtomicReference</code>类把多个共享变量合并成一个共享变量来操作。</p><h2 id="如何使用synchronized"><a href="#如何使用synchronized" class="headerlink" title="如何使用synchronized"></a>如何使用synchronized</h2><p><code>synchronized</code> 关键字的使用方式主要有下面 3 种：</p><ol><li>修饰实例方法</li><li>修饰静态方法</li><li>修饰代码块</li></ol><p><strong>1、修饰实例方法</strong> （锁当前对象实例）</p><p>给当前对象实例加锁，进入同步代码前要获得 <strong>当前对象实例的锁</strong> .</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务代码</span><span class="token punctuation">}</span></code></pre><p><strong>2、修饰静态方法</strong> （锁当前类）</p><p>给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 <strong>当前 class 的锁</strong>。</p><p>这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务代码</span><span class="token punctuation">}</span></code></pre><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code> 方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态 <code>synchronized</code> 方法，而线程 B 需要调用这个实例对象所属类的静态 <code>synchronized</code> 方法，是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code> 方法占用的锁是当前实例对象锁。</p><p><strong>3、修饰代码块</strong> （锁指定对象&#x2F;类）</p><p>对括号里指定的对象&#x2F;类加锁：</p><ul><li><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</li><li><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务代码</span><span class="token punctuation">}</span></code></pre><p><strong>总结：</strong></p><ul><li><code>synchronized</code> 关键字加到 <code>static</code> 静态方法和 <code>synchronized(class)</code> 代码块上都是是给 Class 类上锁；</li><li><code>synchronized</code> 关键字加到实例方法上是给对象实例上锁；</li><li>尽量不要使用 <code>synchronized(String a)</code> 因为 JVM 中，字符串常量池具有缓存功能。</li></ul><h2 id="构造方法不能使用synchronized修饰"><a href="#构造方法不能使用synchronized修饰" class="headerlink" title="构造方法不能使用synchronized修饰"></a>构造方法不能使用synchronized修饰</h2><p>构造方法本身就属于线程安全的，不存在同步的构造方法一说</p><h2 id="synchronized的底层原理"><a href="#synchronized的底层原理" class="headerlink" title="synchronized的底层原理"></a>synchronized的底层原理</h2><p><code>synchronized</code> 同步语句块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"synchronized 代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>synchronized 修饰方法的的情况</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"synchronized 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p><strong>不过两者的本质都是对对象监视器 monitor 的获取</strong></p><p>在执行<code>monitorenter</code>时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。</p><p>对象锁的的拥有者线程才可以执行 <code>monitorexit</code> 指令来释放锁。在执行 <code>monitorexit</code> 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。</p><p>如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p><h2 id="JDK6优化后synchronized锁的分类"><a href="#JDK6优化后synchronized锁的分类" class="headerlink" title="JDK6优化后synchronized锁的分类"></a>JDK6优化后synchronized锁的分类</h2><p>级别从低到高依次是：</p><ol><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ol><p>锁可以升级，但不能降级。即：无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁是单向的。</p><h2 id="synchronized和volatile的区别"><a href="#synchronized和volatile的区别" class="headerlink" title="synchronized和volatile的区别"></a>synchronized和volatile的区别</h2><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul><li><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</li><li><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</li><li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</li></ul><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><code>ReentrantLock</code> 实现了 <code>Lock</code> 接口，是一个可重入且独占式的锁，和 <code>synchronized</code> 关键字类似。不过，<code>ReentrantLock</code> 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>ReentrantLock</code> 里面有一个内部类 <code>Sync</code>，<code>Sync</code> 继承 AQS（<code>AbstractQueuedSynchronizer</code>），添加锁和释放锁的大部分操作实际上都是在 <code>Sync</code> 中实现的。<code>Sync</code> 有公平锁 <code>FairSync</code> 和非公平锁 <code>NonfairSync</code> 两个子类。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%953-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image/image-20231010171831007.png"></p><p><code>ReentrantLock</code> 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的内容可以看出， <code>ReentrantLock</code> 的底层就是由 AQS 来实现的。</p><h2 id="synchronized和ReentrantLock的区别"><a href="#synchronized和ReentrantLock的区别" class="headerlink" title="synchronized和ReentrantLock的区别"></a>synchronized和ReentrantLock的区别</h2><h3 id="两者都是可重入锁"><a href="#两者都是可重入锁" class="headerlink" title="两者都是可重入锁"></a>两者都是可重入锁</h3><p><strong>可重入锁</strong> 也叫递归锁，指的是线程可以再次获取自己的内部锁。</p><p>JDK 提供的所有现成的 <code>Lock</code> 实现类，包括 <code>synchronized</code> 关键字锁都是可重入的。</p><p>在下面的代码中，<code>method1()</code> 和 <code>method2()</code>都被 <code>synchronized</code> 关键字修饰，<code>method1()</code>调用了<code>method2()</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于 <code>synchronized</code>锁是可重入的，同一个线程在调用<code>method1()</code> 时可以直接获得当前对象的锁，执行 <code>method2()</code> 的时候可以再次获取这个对象的锁，不会产生死锁问题。假如<code>synchronized</code>是不可重入锁的话，由于该对象的锁已被当前线程所持有且无法释放，这就导致线程在执行 <code>method2()</code>时获取锁失败，会出现死锁问题。</p><h3 id="synchronized-依赖于-JVM-而-ReentrantLock-依赖于-API"><a href="#synchronized-依赖于-JVM-而-ReentrantLock-依赖于-API" class="headerlink" title="synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API"></a>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</h3><p><code>synchronized</code> 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 <code>synchronized</code> 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。</p><p><code>ReentrantLock</code> 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try&#x2F;finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><h3 id="ReentrantLock-比-synchronized-增加了一些高级功能"><a href="#ReentrantLock-比-synchronized-增加了一些高级功能" class="headerlink" title="ReentrantLock 比 synchronized 增加了一些高级功能"></a>ReentrantLock 比 synchronized 增加了一些高级功能</h3><p>相比<code>synchronized</code>，<code>ReentrantLock</code>增加了一些高级功能。主要来说主要有三点：</p><ul><li><strong>等待可中断</strong> : <code>ReentrantLock</code>提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现公平锁</strong> : <code>ReentrantLock</code>可以指定是公平锁还是非公平锁。而<code>synchronized</code>只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。<code>ReentrantLock</code>默认情况是非公平的，可以通过 <code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>构造方法来指定是否是公平的。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>&#x2F;<code>notifyAll()</code>方法相结合可以实现等待&#x2F;通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ul><p>如果你想使用上述功能，那么选择 <code>ReentrantLock</code> 是一个不错的选择。</p><h2 id="可中断锁和不可中断锁有什么区别？"><a href="#可中断锁和不可中断锁有什么区别？" class="headerlink" title="可中断锁和不可中断锁有什么区别？"></a>可中断锁和不可中断锁有什么区别？</h2><ul><li><strong>可中断锁</strong>：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</li><li><strong>不可中断锁</strong>：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。 <code>synchronized</code> 就属于是不可中断锁</li></ul><p>中断与否，看的是获取锁的过程。</p><h2 id="ReentrantReadWriteLock-与-StampedLock"><a href="#ReentrantReadWriteLock-与-StampedLock" class="headerlink" title="ReentrantReadWriteLock  与 StampedLock"></a>ReentrantReadWriteLock  与 StampedLock</h2><h3 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h3><p>ReentrantReadWriteLock 实现了 <code>ReadWriteLock</code> ，是一个可重入的读写锁，既可以保证多个线程同时读的效率，同时又可以保证有写入操作时的线程安全。适用于读多写少的情况。</p><p><code>ReentrantReadWriteLock</code> 其实是两把锁，一把是 <code>WriteLock</code> (写锁)，一把是 <code>ReadLock</code>（读锁） 。读锁是共享锁，写锁是独占锁。读锁可以被同时读，可以同时被多个线程持有，而写锁最多只能同时被一个线程持有。</p><ul><li><strong>共享锁</strong>：一把锁可以被多个线程同时获得。</li><li><strong>独占锁</strong>：一把锁只能被一个线程获得。</li></ul><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p><code>StampedLock</code> 不是直接实现 <code>Lock</code>或 <code>ReadWriteLock</code>接口，而是基于 <strong>CLH 锁</strong> 实现的（AQS 也是基于这玩意），CLH 锁是对自旋锁的一种改良，是一种隐式的链表队列。<code>StampedLock</code> 通过 CLH 队列进行线程的管理，通过同步状态值 <code>state</code> 来表示锁的状态和类型。</p><p><code>StampedLock</code> 的原理和 AQS 原理比较类似。</p><p><code>StampedLock</code> 提供了三种模式的读写控制模式：读锁、写锁和乐观读。</p><ul><li><strong>写锁</strong>：独占锁，一把锁只能被一个线程获得。当一个线程获取写锁后，其他请求读锁和写锁的线程必须等待。类似于 <code>ReentrantReadWriteLock</code> 的写锁，不过这里的写锁是不可重入的。</li><li><strong>读锁</strong> （悲观读）：共享锁，没有线程获取写锁的情况下，多个线程可以同时持有读锁。如果己经有线程持有写锁，则其他线程请求获取该读锁会被阻塞。类似于 <code>ReentrantReadWriteLock</code> 的读锁，不过这里的读锁是不可重入的。</li><li><strong>乐观读</strong>：允许多个线程获取乐观读以及读锁。同时允许一个写线程获取写锁。</li></ul><p><code>StampedLock</code> 在获取锁的时候会返回一个 long 型的数据戳，该数据戳用于稍后的锁释放参数，如果返回的数据戳为 0 则表示锁获取失败。当前线程持有了锁再次获取锁还是会返回一个新的数据戳，这也是<code>StampedLock</code>不可重入的原因。</p><p>相比于传统读写锁多出来的乐观读是<code>StampedLock</code>比 <code>ReadWriteLock</code> 性能更好的关键原因。<code>StampedLock</code> 的乐观读允许一个写线程获取写锁，所以不会导致所有写线程阻塞，也就是当读多写少的时候，写线程有机会获取写锁，减少了线程饥饿的问题，吞吐量大大提高。</p><p>和 <code>ReentrantReadWriteLock</code> 一样，<code>StampedLock</code> 同样适合读多写少的业务场景，可以作为 <code>ReentrantReadWriteLock</code>的替代品，性能更好。</p><p>不过，需要注意的是<code>StampedLock</code>不可重入，不支持条件变量 <code>Conditon</code>，对中断操作支持也不友好（使用不当容易导致 CPU 飙升）。如果你需要用到 <code>ReentrantLock</code> 的一些高级性能，就不太建议使用 <code>StampedLock</code> 了。</p><p>另外，<code>StampedLock</code> 性能虽好，但使用起来相对比较麻烦，一旦使用不当，就会出现生产问题。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="ThreadLocal有什么用"><a href="#ThreadLocal有什么用" class="headerlink" title="ThreadLocal有什么用"></a>ThreadLocal有什么用</h3><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。<strong>如果想实现每一个线程都有自己的专属本地变量该如何解决呢？</strong></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalExample</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>SimpleDateFormat<span class="token operator">></span> formatter <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd HHmm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ThreadLocalExample obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" default Formatter = "</span><span class="token operator">+</span>formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//formatter pattern is changed here by thread, but it won't reflect to other threads</span>        formatter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" formatter = "</span><span class="token operator">+</span>formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Thread类源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......</span>    <span class="token comment" spellcheck="true">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap threadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap inheritableThreadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><p>ThreadLocal类的set方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前请求的线程</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取出 Thread 类内部的 threadLocals 变量(哈希表结构)</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将需要存储的值放入到这个哈希表中</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，每个线程都有其对应的ThreadLocalMap对象。<strong>而<code>ThreadLocalMap</code>可以存储以<code>ThreadLocal</code>为 key ，Object 对象为 value 的键值对。</strong></p><h3 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h3><p>key 为 <code>ThreadLocal</code> 的弱引用，而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p><p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。<code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后最好手动调用<code>remove()</code>方法</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>这里借用《Java 并发编程的艺术》提到的来说一下<strong>使用线程池的好处</strong>：</p><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="线程池的常见参数"><a href="#线程池的常见参数" class="headerlink" title="线程池的常见参数"></a>线程池的常见参数</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 用给定的初始参数创建一个新的ThreadPoolExecutor。     */</span>    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池的核心线程数量</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池的最大线程数</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span>                              TimeUnit unit<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//任务队列，用来储存等待执行任务的队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程工厂，用来创建线程，一般默认即可</span>                              RejectedExecutionHandler handler<span class="token comment" spellcheck="true">//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span>                               <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code> :</strong> 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><strong><code>maximumPoolSize</code> :</strong> 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>workQueue</code>:</strong> 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ul><li><strong><code>keepAliveTime</code></strong>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，多余的空闲线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁，线程池回收线程时，会对核心线程和非核心线程一视同仁，直到线程池中线程的数量等于 <code>corePoolSize</code> ，回收过程才会停止。</li><li><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</li><li><strong><code>handler</code></strong> :饱和策略。关于饱和策略下面单独介绍一下。</li></ul><h3 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h3><ol><li><strong><code>ThreadPoolExecutor.AbortPolicy</code>：</strong> 抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li><li><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code>：</strong> 调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li><li><strong><code>ThreadPoolExecutor.DiscardPolicy</code>：</strong> 不处理新任务，直接丢弃掉。</li><li><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：</strong> 此策略将丢弃最早的未处理的任务请求</li></ol><h3 id="如何给线程池命名"><a href="#如何给线程池命名" class="headerlink" title="如何给线程池命名"></a>如何给线程池命名</h3><p>初始化线程池的时候需要显示命名（设置线程池名称前缀），有利于定位问题。</p><p>默认情况下创建的线程名字类似 <code>pool-1-thread-n</code> 这样的，没有业务含义，不利于我们定位问题。</p><p>给线程池里的线程命名通常有下面两种方式：</p><p>1.<strong>利用 guava 的 <code>ThreadFactoryBuilder</code></strong></p><pre class=" language-java"><code class="language-java">ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span>threadNamePrefix <span class="token operator">+</span> <span class="token string">"-%d"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.<strong>自己实现 <code>ThreadFactory</code></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程工厂，它设置线程名称，有利于我们定位问题。 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NamingThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger threadNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ThreadFactory delegate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个带名字的线程池生产工厂     */</span>    <span class="token keyword">public</span> <span class="token function">NamingThreadFactory</span><span class="token punctuation">(</span>ThreadFactory delegate<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TODO consider uniquifying this</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" [#"</span> <span class="token operator">+</span> threadNum<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="如何设定线程池的大小"><a href="#如何设定线程池的大小" class="headerlink" title="如何设定线程池的大小"></a>如何设定线程池的大小</h2><p>有一个简单并且适用面比较广的公式：</p><ul><li><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</li><li><strong>I&#x2F;O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I&#x2F;O 交互，而线程在处理 I&#x2F;O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I&#x2F;O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</li></ul><p><strong>如何判断是 CPU 密集任务还是 IO 密集任务？</strong></p><p>CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p><blockquote><p>🌈 拓展一下（参见：<a href="https://github.com/Snailclimb/JavaGuide/issues/1737">issue#1737open in new window</a>）：</p><p>线程数更严谨的计算的方法应该是：<code>最佳线程数 = N（CPU 核心数）∗（1+WT（线程等待时间）/ST（线程计算时间））</code>，其中 <code>WT（线程等待时间）=线程运行总时间 - ST（线程计算时间）</code>。</p><p>线程等待时间所占比例越高，需要越多线程。线程计算时间所占比例越高，需要越少线程。</p><p>我们可以通过 JDK 自带的工具 VisualVM 来查看 <code>WT/ST</code> 比例。</p><p>CPU 密集型任务的 <code>WT/ST</code> 接近或者等于 0，因此， 线程数可以设置为 N（CPU 核心数）∗（1+0）&#x3D; N，和我们上面说的 N（CPU 核心数）+1 差不多。</p><p>IO 密集型任务下，几乎全是线程等待时间，从理论上来说，你就可以将线程数设置为 2N（按道理来说，WT&#x2F;ST 的结果应该比较大，这里选择 2N 的原因应该是为了避免创建过多线程吧）。</p></blockquote><h2 id="如何动态修改线程池的参数"><a href="#如何动态修改线程池的参数" class="headerlink" title="如何动态修改线程池的参数"></a>如何动态修改线程池的参数</h2><p>可以使用一些开源框架</p><ul><li>**<a href="https://github.com/opengoofy/hippo4j">Hippo4j</a>**：异步线程池框架，支持线程池动态变更&amp;监控&amp;报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。</li><li>**<a href="https://github.com/dromara/dynamic-tp">Dynamic TPopen </a>**：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。</li></ul><h2 id="如何设计一个能够根据任务的优先级来执行的线程池？"><a href="#如何设计一个能够根据任务的优先级来执行的线程池？" class="headerlink" title="如何设计一个能够根据任务的优先级来执行的线程池？"></a>如何设计一个能够根据任务的优先级来执行的线程池？</h2><p>线程池的任务队列选用  PriorityBlockingQueue    <code>是一个支持优先级的无界阻塞队列，可以看作是线程安全的</code>PriorityQueue</p><p>让 <code>PriorityBlockingQueue</code> 实现对任务的排序，传入其中的任务必须是具备排序能力的，方式有两种：</p><ol><li>提交到线程池的任务实现 <code>Comparable</code> 接口，并重写 <code>compareTo</code> 方法来指定任务之间的优先级比较规则。</li><li>创建 <code>PriorityBlockingQueue</code> 时传入一个 <code>Comparator</code> 对象来指定任务之间的排序规则(推荐)。</li></ol><p>不过，这存在一些风险和问题，比如：</p><ul><li><code>PriorityBlockingQueue</code> 是无界的，可能堆积大量的请求，从而导致 OOM。</li><li>可能会导致饥饿问题，即低优先级的任务长时间得不到执行。</li><li>由于需要对队列中的元素进行排序操作以及保证线程安全（并发控制采用的是可重入锁 <code>ReentrantLock</code>），因此会降低性能。</li></ul><p>对于 OOM 这个问题的解决比较简单粗暴，就是继承<code>PriorityBlockingQueue</code> 并重写一下 <code>offer</code> 方法(入队)的逻辑，当插入的元素数量超过指定值就返回 false 。</p><p>饥饿问题这个可以通过优化设计来解决（比较麻烦），比如等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升。</p><p>对于性能方面的影响，是没办法避免的，毕竟需要对任务进行排序操作。并且，对于大部分业务场景来说，这点性能影响是可以接受的。</p><h2 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// V 代表了Future执行的任务返回值的类型</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取消任务执行</span>    <span class="token comment" spellcheck="true">// 成功取消返回 true，否则返回 false</span>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断任务是否被取消</span>    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断任务是否已经执行完成</span>    <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取任务执行结果</span>    V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定时间内没有返回计算结果就抛出 TimeOutException 异常</span>    V <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutExceptio<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学记录2--Java集合源码+一些特殊类</title>
      <link href="/2023/10/10/javaguide-zi-xue-ji-lu-2-java-ji-he-yuan-ma-yi-xie-te-shu-lei/"/>
      <url>/2023/10/10/javaguide-zi-xue-ji-lu-2-java-ji-he-yuan-ma-yi-xie-te-shu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGuide自学记录2–Java集合源码-一些特殊类"><a href="#JavaGuide自学记录2–Java集合源码-一些特殊类" class="headerlink" title="JavaGuide自学记录2–Java集合源码+一些特殊类"></a>JavaGuide自学记录2–Java集合源码+一些特殊类</h1><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>JDK1.5 引入了 <code>Java.util.concurrent</code>（JUC）包,其中唯一的线程安全 <code>List</code> 实现就是 <code>CopyOnWriteArrayList</code> 。</p><p><code>CopyOnWriteArrayList</code> 线程安全的核心在于其采用了 <strong>写时复制（Copy-On-Write）</strong> 的策略，从 <code>CopyOnWriteArrayList</code> 的名字就能看出了。</p><p>当需要修改（ <code>add</code>，<code>set</code>、<code>remove</code> 等操作） <code>CopyOnWriteArrayList</code> 的内容时，不会直接修改原数组，而是会先创建底层数组的副本，对副本数组进行修改，修改完之后再将修改后的数组赋值回去，这样就可以保证写操作不会影响读操作了。</p><p>只有写写会互斥，则读写不互斥，会有一些数据不一致问题。</p><h2 id="阻塞队列和非阻塞队列"><a href="#阻塞队列和非阻塞队列" class="headerlink" title="阻塞队列和非阻塞队列"></a>阻塞队列和非阻塞队列</h2><p>Java 提供的线程安全的 <code>Queue</code> 可以分为<strong>阻塞队列</strong>和<strong>非阻塞队列</strong>，其中阻塞队列的典型例子是 <code>BlockingQueue</code>，非阻塞队列的典型例子是 <code>ConcurrentLinkedQueue</code>，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。 <strong>阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现</strong></p><p>当然ArrayBlockingQueue也能做非阻塞</p><h2 id="AtomicInteger-线程安全原理简单分析"><a href="#AtomicInteger-线程安全原理简单分析" class="headerlink" title="AtomicInteger 线程安全原理简单分析"></a>AtomicInteger 线程安全原理简单分析</h2><p>AtomicInteger类的部分源码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// setup to use Unsafe.compareAndSwapInt for updates（更新操作时提供“比较并替换”的作用）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                <span class="token punctuation">(</span>AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></code></pre><p><code>AtomicInteger</code> 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免synchronized 的高开销，执行效率大为提升。</p><p>CAS 的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 <code>objectFieldOffset()</code> 方法是一个本地方法，这个方法是用来拿到“原来的值”的内存地址。另外 value 是一个 volatile 变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值。</p><h2 id="异步编排-CompletableFuture"><a href="#异步编排-CompletableFuture" class="headerlink" title="异步编排 CompletableFuture"></a>异步编排 CompletableFuture</h2><p>Java里面的</p><p>京东的 <a href="https://gitee.com/jd-platform-opensource/asyncTool">asyncTool</a> 这个并发框架，里面大量使用到了 <code>CompletableFuture</code></p><p>从 RocketMQ 4.7 开始，RocketMQ 引入了 <code>CompletableFuture</code>来实现异步消息处理 。</p><h2 id="其他JavaGuide的集合类"><a href="#其他JavaGuide的集合类" class="headerlink" title="其他JavaGuide的集合类"></a>其他JavaGuide的集合类</h2><p>LinkedHashMap可以实现LRU算法</p><p><code>DelayQueue</code> 底层是使用优先队列 <code>PriorityQueue</code> 来存储元素，为了保证线程安全使用了ReentrantLock,</p><p><code>DelayQueue</code> 通常用于实现定时任务调度和缓存过期删除等场景。</p><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12306项目</title>
      <link href="/2023/10/04/12306-xiang-mu/"/>
      <url>/2023/10/04/12306-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="12306项目"><a href="#12306项目" class="headerlink" title="12306项目"></a>12306项目</h1><h2 id="1-4章小结"><a href="#1-4章小结" class="headerlink" title="1-4章小结"></a>1-4章小结</h2><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><p>LogAspect用来记录日志，有@Before和@Around</p><p>BusinessException中有BusinessExceptionEnum,自定义异常</p><p>ControllerExeption用来处理异常，有上面的BusinessException，也有因为valid校验的BindException</p><p>ComonResp用来统一返回给前端的参数</p><p>SnowItil封装了一下雪花算法</p><h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h3><p>GateApplication作为一个启动类</p><p>application.properties用来做路由转发</p><p>logback-spring.xml 用来记录日志,配置一些日志的路径，隐藏的参数等</p><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>下面的generator-config-member.xml  等一系列xml,作为代码生成器</p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>做一些接口测试</p><h3 id="member"><a href="#member" class="headerlink" title="member"></a>member</h3><p>MemberApplication作为启动类</p><p>Controller写了一个注册接口，一个计数接口。将service层返回的东西再用CommonResp&lt;&gt;封装一下</p><p>Member和MemberExample是代码生成器生成的，Member是根据数据库的表生成的。MemberExample是查询条件。</p><p>MemberMapper是自动生成的</p><p>MemberRegisterReq是用户传进来的东西。包装了一下</p><p>MemberService写了一些对应于controller的简单的业务。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>hutool的一些包</p><pre class=" language-java"><code class="language-java">ObjectUtil<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>memberDB<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">CollUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre><p>memberExample的查询条件</p><pre class=" language-java"><code class="language-java">memberExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andMobileEqualTo</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-6章小结"><a href="#5-6章小结" class="headerlink" title="5-6章小结"></a>5-6章小结</h2><p>因为前端自己搭建的过程经常出bug,就直接把所有的前端页面拷贝过来了。</p><h3 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h3><pre><code>###POST http://localhost:8000/member/member/send-codeContent-Type: application/json&#123;  &quot;mobile&quot;: &quot;13000000001&quot;&#125;</code></pre><p>这种的，传json.中间要空一行，是headers,下面才是参数。</p><p>json的话后端接受参数要加一个@ResponseBody的注解,当然与此同时就不能接受Content-Type: application&#x2F;x-www-form-urlencoded类型的http了</p><h3 id="gateway-1"><a href="#gateway-1" class="headerlink" title="gateway"></a>gateway</h3><p>修改配置application.properties可以解决跨域问题</p><pre class=" language-yml"><code class="language-yml"># 允许请求来源（老版本叫allowedOrigin）spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOriginPatterns=*# 允许携带的头信息spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*# 允许的请求方式spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=*# 是否允许携带cookiespring.cloud.gateway.globalcors.cors-configurations.[/**].allowCredentials=true# 跨域检测的有效期，会发起一个OPTION请求spring.cloud.gateway.globalcors.cors-configurations.[/**].maxAge=3600</code></pre><h3 id="req"><a href="#req" class="headerlink" title="req"></a>req</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"【手机号】不能为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"^1\\d{10}$"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"手机号码格式错误"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String mobile<span class="token punctuation">;</span></code></pre><p>手机号的一个正则表达式</p><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>在所有的用到log的地方，要先加个这个</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MemberService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>login函数的返回值应该为MemberLoginResp</p><pre class=" language-java"><code class="language-java">MemberLoginResp memberLoginResp <span class="token operator">=</span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>memberDB<span class="token punctuation">,</span> MemberLoginResp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> JwtUtil<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>memberLoginResp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberLoginResp<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memberLoginResp<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里使用了BeanUtil的复制属性，把用户的所有信息转换为了一个没有敏感信息的对象</p><p>然后再加上token</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>因为JWTUtil.createToken()的第一个参数是Map.所以要把对象转为Map</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token operator">=</span>BeanUtil<span class="token punctuation">.</span><span class="token function">beanToMap</span><span class="token punctuation">(</span>memberLoginResp<span class="token punctuation">)</span><span class="token punctuation">;</span>String key<span class="token operator">=</span><span class="token string">"wzh"</span><span class="token punctuation">;</span>String token<span class="token operator">=</span>JWTUtil<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://loolly_admin.oschina.io/hutool-site/docs/#/jwt/%E6%A6%82%E8%BF%B0">https://loolly_admin.oschina.io/hutool-site/docs/#/jwt/%E6%A6%82%E8%BF%B0</a></p><p>为了这一个类引入整个common不太好。所以gateway里又重新写了一个JwtUtil</p><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><p>热部署的依赖</p><pre class=" language-java"><code class="language-java">       <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="7章小结"><a href="#7章小结" class="headerlink" title="7章小结"></a>7章小结</h2><p>完成乘车人（单表）增删改查，为后面的代码生成器做准备</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>在train的pom.xml和common的xml中都引入，当然common里不需要版本号</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后就可以使用PageHelper和PageInfo了</p><p>pageHelper怎么起作用，在执行sql语句的上一行加入即可，[注：只会对下一条执行的sql起作用]类似如下：</p><pre class=" language-java"><code class="language-java">LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询页码：{}"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"每页条数：{}"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Passenger<span class="token operator">></span> passengerList <span class="token operator">=</span> passengerMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>passengerExample<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="对日期进行格式化处理-※※"><a href="#对日期进行格式化处理-※※" class="headerlink" title="对日期进行格式化处理(※※)"></a>对日期进行格式化处理(※※)</h3><p>在返回值这个Resp中，要把日期返回好看一点。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span></code></pre><h3 id="关于Long的类型精度丢失问题"><a href="#关于Long的类型精度丢失问题" class="headerlink" title="关于Long的类型精度丢失问题"></a>关于Long的类型精度丢失问题</h3><p>因为Java的long是19位，而JS的long是16位。所以会出现1234567891234567891变成1234567891234567000</p><p>对于雪花算法生成的这种long类型的大数</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using<span class="token operator">=</span> ToStringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">private</span> Long id<span class="token punctuation">;</span></code></pre><p>可以加个注解，将其传到前端的时候转为String</p><h2 id="89章代码生成器"><a href="#89章代码生成器" class="headerlink" title="89章代码生成器"></a>89章代码生成器</h2><h2 id="1011章定时任务quartz"><a href="#1011章定时任务quartz" class="headerlink" title="1011章定时任务quartz"></a>1011章定时任务quartz</h2><p>对于多节点，是以每一个最细粒度的一次Job为单位进行轮询的。</p><h2 id="12章-基本的车票预定功能开发"><a href="#12章-基本的车票预定功能开发" class="headerlink" title="12章-基本的车票预定功能开发"></a>12章-基本的车票预定功能开发</h2><p>如果是req的接受的get请求。字符串转时间的参数：</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span></code></pre><p>如果是req的post请求。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"【日期】不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span></code></pre><p>req接受前端传过来的请求。</p><p>一旦用到列表，都要对列表进行判断。否则可能有空指针。示例如下：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genDaily</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Train<span class="token operator">></span> trainList <span class="token operator">=</span> trainService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>trainList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"没有车次基础数据，任务结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Train train <span class="token operator">:</span> trainList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">genDailyTrain</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> train<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>得到15天后的日期</p><pre><code>import cn.hutool.core.date.DateTime;import cn.hutool.core.date.DateUtil;</code></pre><pre class=" language-java"><code class="language-java">LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生成15天后的车次数据开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DateTime dateTime <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">offsetDay</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date offsetDate <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toJdkDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>DateUtil.formatDate(date) </code></pre><p> 把date转为规范的yyyy-MM-dd格式</p><p>为一个空字符串填充“0”</p><pre class=" language-java"><code class="language-java"> String sell <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">fillBefore</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> stationList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过hutool的EnumUtil得到结果</p><pre class=" language-java"><code class="language-java">BigDecimal priceRate <span class="token operator">=</span> EnumUtil<span class="token punctuation">.</span><span class="token function">getFieldBy</span><span class="token punctuation">(</span>TrainTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getPriceRate<span class="token punctuation">,</span> TrainTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span> trainType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">SeatTypeEnum seatTypeEnum <span class="token operator">=</span> EnumUtil<span class="token punctuation">.</span><span class="token function">getBy</span><span class="token punctuation">(</span>SeatTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span> seatTypeCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过hutoool的copyToList得到列表</p><pre class=" language-java"><code class="language-java">BeanUtil<span class="token punctuation">.</span><span class="token function">copyToList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> PassengerQueryResp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre><h2 id="13章，配置Nacos"><a href="#13章，配置Nacos" class="headerlink" title="13章，配置Nacos"></a>13章，配置Nacos</h2><p>本质上就是将IDEA中的一些本地配置文件的信息，由Nacos代替。这样可以做到不修改代码更改配置。</p><h2 id="14章，缓存"><a href="#14章，缓存" class="headerlink" title="14章，缓存"></a>14章，缓存</h2><h3 id="MyBatis的一级、二级缓存"><a href="#MyBatis的一级、二级缓存" class="headerlink" title="MyBatis的一级、二级缓存"></a>MyBatis的一级、二级缓存</h3><p>一些高频接口添加缓存。有大量的读，并且写操作很少。</p><p>会话一关闭，一级缓存就消失了。</p><p>加上事务，还是一个会话，就有一级缓存了。有效的减少数据库的访问。</p><p>但是如果是select,update,select。则一级缓存则不能查出最新的数据。</p><p>如何关闭一级缓存：</p><p># 配置为statement，即关闭一级缓存</p><p>mybatis.configuration.local-cache-scope&#x3D;statement</p><p>开启二级缓存：需要在mapper.xml的<mapper>下面一行加个<cache></cache>,对应的实体类要实现序列化接口。</p><p>每一个mapper文件对应一个二级缓存。如果sql一样但是不在一个Mapper文件爱里，也不行。</p><p>只要我们对mapper的命名空间有增删改的时候，二级缓存就会失效。</p><p>余票的变化很快，所以实际项目中二级缓存用的很少。而且不支持分布式节点的一些同步。</p><h3 id="springboot内置缓存"><a href="#springboot内置缓存" class="headerlink" title="springboot内置缓存"></a>springboot内置缓存</h3><p>对接口进行缓存，springboot的内置缓存。</p><!--spring内置缓存--><p>​    <dependency></p><p>​      <groupId>org.springframework.boot</groupId></p><p>​      <artifactId>spring-boot-starter-cache</artifactId></p><p>​    </dependency></p><p>在对应的子模块的启动类上加注解</p><p>@EnableCaching</p><p>再在对应的service方法上加注解(value随意取个名字就好)</p><p> &#x2F;&#x2F; @Cacheable(value &#x3D; “DailyTrainTicketService.queryList”)</p><p>这个注解会开辟一块空间，请求参数为key,缓存值为value.请求参数要有hashcode和equals函数。去算哈希值</p><p>这个注解自始至终都是读缓存</p><p>要是想刷新缓存，需要用@CachePut注解</p><p>同时springboot的缓存也不支持分布式多节点。这个也不咋用。</p><h3 id="redis缓存"><a href="#redis缓存" class="headerlink" title="redis缓存"></a>redis缓存</h3><p>共享的分布式缓存</p><pre><code>spring.cache.type=redis</code></pre><p>把一些spring内置的缓存放到redis里，这样要实现序列化</p><p>使用Redis解决了两个问题：<br>1.访问速度。mysql单机QPS约为2000，redis约10万</p><p>2.解决多节点共享缓存，机器重启也不会丢缓存数据。</p><p>缓存击穿：</p><p>60s的超时时间，热点Key失效，大量请求打到数据库上。</p><p>针对失效：可以在失效前主动更新缓存。—》定时任务。每隔30s去调用</p><p>缓存里就是没有：100个请求进来，只让一个请求进入。分布式锁，快速失败。</p><p>缓存穿透：</p><p>一些本身就没有的数据，比如学号为-1</p><p>应该是布隆过滤器，或者直接把空列表放到缓存里。进入数据库里也要加分布式锁。</p><p>结合spring的返回值的缓存，进行配置</p><pre><code>spring.cache.redis.cache-null-values=true</code></pre><p>也可以解决缓存穿透问题，会把一个null值放到缓存里，默认配置就是true</p><p>缓存雪崩：<br>很多key同时失效。</p><p>不让其同时失效ttl+随机数。选择合适的缓存过期策略。把热点的key定时的去查询。加限流。</p><p>共享缓存：节点1和节点2是一样的访问结果</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>使用本地缓存，1min有效</p><p>结果fullgc频繁，导致短时间内大量请求失败</p><p>解决方案：去掉本地缓存，使用线程本地变量。</p><h2 id="15章，分布式事务"><a href="#15章，分布式事务" class="headerlink" title="15章，分布式事务"></a>15章，分布式事务</h2><p>TC-seata-server</p><p>TM-一个个子模块business,member</p><p>RM-数据库等</p><p>用seata的话，可以使用global全局事务注解</p><h2 id="16章，加锁"><a href="#16章，加锁" class="headerlink" title="16章，加锁"></a>16章，加锁</h2><p>加synchronized可以解决超卖，但是仅限于单机。多节点情况下会导致超卖。而且吞吐量会很低。</p><p>所有节点都能读到的数据。Redis。</p><p>stringRedisTemplate.opsForValue().setIfAbsent的本质是setnx，要设置一个超时时间.而且还要要求保证只有锁的持有者才可以释放锁，要使用唯一id标记每个客户端。</p><p>使用Redisson看门狗解决锁超时：只要主线程的业务没执行完，我就给你这个锁一直延时</p><p>守护线程也会随着主线程的结束而结束。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// waitTime – the maximum time to acquire the lock 等待获取锁时间(最大尝试获得锁的时间)，超时返回false</span> <span class="token comment" spellcheck="true">//   leaseTime – lease time 锁时长，即n秒后自动释放锁</span><span class="token comment" spellcheck="true">//   time unit – time unit 时间单位</span><span class="token comment" spellcheck="true">//  </span><span class="token keyword">boolean</span> tryLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不带看门狗</span><span class="token keyword">boolean</span> tryLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 带看门狗</span></code></pre><p>未获得锁可以等待30s,得到锁后可以持有10s</p><p>第二行的0，不等待，拿得到就拿得到，拿不到就立刻返回false. 不需要定义持有时间，因为有看门狗，其初始会持有30s.等剩20s的时候会再刷新。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//只有当前线程才可以删除这个锁。</span> <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">!=</span>lock <span class="token operator">&amp;&amp;</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果redis宕机了，换了一个Redis主节点。会导致，A线程能拿到锁，B线程也能拿到锁。</p><p>为了解决上面的问题，可以使用红锁。</p><p>五个节点，我要拿到半数以上（即3个）的节点的锁，才能说明我拿到锁了。</p><p>红锁成本太高，要使用好多台redis.而且三个线程同时进来后，5个节点可能不够分，所以要按固定的顺序拿redis节点的锁。性能也会慢一些。</p><h2 id="17章，限流"><a href="#17章，限流" class="headerlink" title="17章，限流"></a>17章，限流</h2><p>流量的控制是在被调用方A</p><p>A调用方去熔断B服务，因为B不稳定。熔断是调用方去熔断别的服务。</p><p>不同的插槽有不同的职能。</p><p>FlowSlot,流量控制；   DegradeSlot,熔断降级</p><p>将功能定义为资源，并为其进行限流操作。</p><p><a href="https://blog.csdn.net/Box_clf/article/details/131614706">简单进行限流</a></p><p>sentinel不保存规则，一旦应用重启，之前设置的规则就全没了,要结合nacos做个持久化。</p><p>流控效果：快速失败，warm up(预热，避免一开始流量过大JIT编译不充分导致问题)，排队等待（短时的高峰，让他等1min（自己配个超时时间）慢慢消费掉）</p><p>流控模式：直接，关联，链路。关联：下单和支付两个关联性很高的应用。必须是支付出现限流之后，下单的限流才会生效。并且这两个接口同时在跑。链路要改代码，关闭一个配置，让链路去分开，默认的不生效。hello-&gt;hello2,hello1-&gt;hello2,只对后者这条链路做限流。</p><p>Sentinel+Feign熔断后的降级处理。</p><p>A服务调用B服务，B服务太垃圾了，熔断掉。然后执行后面的。如果后面的用到了B服务的值，则用planB去赋值（降级）</p><p>熔断：熔断之后后面的请求都拒绝了。这样会导致一堆异常。降级，创造类BusinessFeginFallback,然后在fegin接口上添加</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"business"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> BusinessFeignFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BusinessFeign</span> <span class="token punctuation">{</span></code></pre><p>business服务挂掉也是走这个。因为熔断就相当于认为他挂掉了。</p><p>熔断策略：慢调用比例，异常比例，异常数。</p><p>慢调用：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断</p><p>异常比例或异常数：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><h2 id="18章，令牌大闸"><a href="#18章，令牌大闸" class="headerlink" title="18章，令牌大闸"></a>18章，令牌大闸</h2><p>有人做过<a href="https://www.cnblogs.com/szhNJUPT/p/17462125.html">博客</a></p><p>100个请求，里面有机器人刷票。</p><p>令牌：令牌里有用户的信息，如果用户已经拿过令牌了，就短时间内不能再拿了。</p><p>大闸：没有余票时，需要查库存才知道没票。会影响性能，不如查令牌余量。</p><p>拿到令牌，才能去做后面的事情。拿到令牌后，要去锁这个用户5s,防止他刷票。</p><p>用Redis做了一层缓存，来存令牌。</p><p>后面还做了一个图形验证码。</p><h2 id="19章，MQ削峰"><a href="#19章，MQ削峰" class="headerlink" title="19章，MQ削峰"></a>19章，MQ削峰</h2><p><a href="https://www.cnblogs.com/szhNJUPT/p/17483359.html">博客</a></p><p>拿到锁以后就可以扔给异步线程。说明用户就能成功买到票。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/12306%E9%A1%B9%E7%9B%AE/image/image-20231119103845816.png"></p><p>轮询查询购票结果，可以搞个定时任务。</p><p>MQ的生产者和消费者一般放在两个不同的节点，两个不同的模块。</p><p>分布式锁必须跟购票逻辑放一起</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/12306%E9%A1%B9%E7%9B%AE/image/image-20231119212719070.png"></p><p> 有一个问题，拿锁的时候有可能失败，没拿到锁的会快速失败，会抛异常。正确的方法是让订单更新成失败，用户查询到失败会重新发起购票。</p><p>但是拿不到锁还会使令牌消耗过大，拿到令牌后就有买票的资格，不能因为没抢到车次锁就买票失败，因此要有排队功能</p><p>新的时序图</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/12306%E9%A1%B9%E7%9B%AE/image/image-20231119213101125.png"></p><p>一个车次一个锁。</p><p>不要把数据库里一万条数据同时查出来，可以使用分页插件多查几次。不然一次性全放到内存里，压力太大了。</p><p>要保证库存超卖和库存卖完的情况。</p><h2 id="20章，压力测试"><a href="#20章，压力测试" class="headerlink" title="20章，压力测试"></a>20章，压力测试</h2><p>-Xms2048m -Xmx2048m  改变内存，变化不高，说明内存不是瓶颈</p><p>吞吐量：450</p><p>18080端口用在了Sentinel</p><p>18181端口给了RocketMQ的控制台</p><h2 id="22章项目优化"><a href="#22章项目优化" class="headerlink" title="22章项目优化"></a>22章项目优化</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide自学记录1-Java基础与集合</title>
      <link href="/2023/09/28/javaguide-zi-xue-ji-lu-1-java-ji-chu-yu-ji-he/"/>
      <url>/2023/09/28/javaguide-zi-xue-ji-lu-1-java-ji-chu-yu-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGuide自学记录1-Java基础与集合"><a href="#JavaGuide自学记录1-Java基础与集合" class="headerlink" title="JavaGuide自学记录1-Java基础与集合"></a>JavaGuide自学记录1-Java基础与集合</h1><h2 id="浮点数之间的等值判断，基本数据类型不能用-x3D-x3D-来比较，包装数据类型不能用-equals-来判断。"><a href="#浮点数之间的等值判断，基本数据类型不能用-x3D-x3D-来比较，包装数据类型不能用-equals-来判断。" class="headerlink" title="浮点数之间的等值判断，基本数据类型不能用 &#x3D;&#x3D; 来比较，包装数据类型不能用 equals 来判断。"></a><strong>浮点数之间的等值判断，基本数据类型不能用 &#x3D;&#x3D; 来比较，包装数据类型不能用 equals 来判断。</strong></h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%951--Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%9B%86%E5%90%88/image/t2.jpg"></p><h2 id="BigDeecimal构建的时候，如果是double-推荐使用valueof"><a href="#BigDeecimal构建的时候，如果是double-推荐使用valueof" class="headerlink" title="BigDeecimal构建的时候，如果是double,推荐使用valueof"></a>BigDeecimal构建的时候，如果是double,推荐使用valueof</h2><p>推荐使用它的<code>BigDecimal(String val)</code>构造方法或者 <code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%951--Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%9B%86%E5%90%88/image/image-20230928152107693.png"></p><h2 id="BigDecimalUtil工具类"><a href="#BigDecimalUtil工具类" class="headerlink" title="BigDecimalUtil工具类"></a>BigDecimalUtil工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>RoundingMode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 简化BigDecimal计算的小工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 默认除法运算精度     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEF_DIV_SCALE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">BigDecimalUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的加法运算。     *     * @param v1 被加数     * @param v2 加数     * @return 两个参数的和     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的减法运算。     *     * @param v1 被减数     * @param v2 减数     * @return 两个参数的差     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的乘法运算。     *     * @param v1 被乘数     * @param v2 乘数     * @return 两个参数的积     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到     * 小数点以后10位，以后的数字四舍五入。     *     * @param v1 被除数     * @param v2 除数     * @return 两个参数的商     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">divide</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> DEF_DIV_SCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指     * 定精度，以后的数字四舍五入。     *     * @param v1    被除数     * @param v2    除数     * @param scale 表示表示需要精确到小数点以后几位。     * @return 两个参数的商     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"The scale must be a positive integer or zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BigDecimal b1 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_EVEN<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的小数位四舍五入处理。     *     * @param v     需要四舍五入的数字     * @param scale 小数点后保留几位     * @return 四舍五入后的结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"The scale must be a positive integer or zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BigDecimal b <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的类型转换(Float)     *     * @param v 需要被转换的数字     * @return 返回转换结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">convertToFloat</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的类型转换(Int)不进行四舍五入     *     * @param v 需要被转换的数字     * @return 返回转换结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertsToInt</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供精确的类型转换(Long)     *     * @param v 需要被转换的数字     * @return 返回转换结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">convertsToLong</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回两个数中大的一个值     *     * @param v1 需要被对比的第一个数     * @param v2 需要被对比的第二个数     * @return 返回两个数中大的一个值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">returnMax</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回两个数中小的一个值     *     * @param v1 需要被对比的第一个数     * @param v2 需要被对比的第二个数     * @return 返回两个数中小的一个值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">returnMin</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 精确对比两个数字     *     * @param v1 需要被对比的第一个数     * @param v2 需要被对比的第二个数     * @return 如果两个数一样则返回0，如果第一个数比第二个数大则返回1，反之返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal b1 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal b2 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="语法糖-自动拆装箱"><a href="#语法糖-自动拆装箱" class="headerlink" title="语法糖-自动拆装箱"></a>语法糖-自动拆装箱</h2><p>先来看个自动装箱的代码：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    Integer n <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>反编译后代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    Integer n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再来看个自动拆箱的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>反编译后代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Integer i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从反编译得到内容可以看出，在装箱的时候自动调用的是<code>Integer</code>的<code>valueOf(int)</code>方法。而在拆箱的时候自动调用的是<code>Integer</code>的<code>intValue</code>方法。</p><p>所以，<strong>装箱过程是通过调用包装器的 valueOf 方法实现的，而拆箱过程是通过调用包装器的 xxxValue 方法实现的</strong></p><h2 id="集合类继承关系"><a href="#集合类继承关系" class="headerlink" title="集合类继承关系"></a>集合类继承关系</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%951--Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%9B%86%E5%90%88/image/image-20230928165125506.png"></p><h2 id="Comparable和Comparator区别"><a href="#Comparable和Comparator区别" class="headerlink" title="Comparable和Comparator区别"></a>Comparable和Comparator区别</h2><p>内部的和外部的实现一个即可。</p><p>内部的：<code>Comparable</code> 接口实际上是出自<code>java.lang</code>包 它有一个 <code>compareTo(Object obj)</code>方法用来排序</p><p>外部的：<code>Comparator</code>接口实际上是出自 <code>java.util</code> 包它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</p><p>内部的要在类内重写compareTo方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Person o<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后直接Arrays.sort(persons)就行</p><p>外部的要实现一个比较类，推荐使用匿名内部类</p><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person o1<span class="token punctuation">,</span>Person o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="TreeMap的排序使用"><a href="#TreeMap的排序使用" class="headerlink" title="TreeMap的排序使用"></a>TreeMap的排序使用</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%951--Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%9B%86%E5%90%88/image/t1.png"></p><p>实现 <code>NavigableMap</code> 接口让 <code>TreeMap</code> 有了对集合内元素的搜索的能力。</p><p>实现<code>SortedMap</code>接口让 <code>TreeMap</code> 有了对集合中的元素根据键排序的能力。默认是按 key 的升序排序，不过我们也可以指定排序的比较器。示例代码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author shuang.kou * @createTime 2020年06月15日 17:02:00 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeMap<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> String<span class="token operator">></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person person1<span class="token punctuation">,</span> Person person2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> person1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> person2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"person1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"person3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"person4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>personStringEntry <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personStringEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面，我们是通过传入匿名内部类的方式实现的，你可以将代码替换成 Lambda 表达式实现的方式</p><pre class=" language-java"><code class="language-java">TreeMap<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> String<span class="token operator">></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> person1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> person2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="hashmap的遍历方式"><a href="#hashmap的遍历方式" class="headerlink" title="hashmap的遍历方式"></a>hashmap的遍历方式</h2><p>首先，用迭代器或者foreach, 他们的性能都是相同的，因为他们最终生成的字节码基本都是一样的。</p><p><strong><code>EntrySet</code> 的性能比 <code>KeySet</code> 的性能高出了一倍，因为 <code>KeySet</code> 相当于循环了两遍 Map 集合，而 <code>EntrySet</code> 只循环了一遍</strong>。</p><p>因为如果你用keyset的话，你使用**<code>map.get(key)</code> 查询时**，也会再遍历一遍map，所以相当于遍历了两遍。</p><h3 id="遍历（不删除）"><a href="#遍历（不删除）" class="headerlink" title="遍历（不删除）"></a>遍历（不删除）</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 遍历-迭代器</span>Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 遍历-foreach</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 遍历-lambda表达式</span> map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 遍历-streamAPI-单线程</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 遍历-streamAPI-多线程</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="遍历（循环删除）"><a href="#遍历（循环删除）" class="headerlink" title="遍历（循环删除）"></a>遍历（循环删除）</h3><p>对于普通的foreach的循环删除，会报错</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"del:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/JavaGuide%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%951--Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%9B%86%E5%90%88/image/image-20231009145618629.png"></p><p>从报错中可以看出，HashMap$HashIterator.nextNode这个方法有代码错误了，点进去看，大概知道HashMap.this.modCount !&#x3D; this.expectedModCount 成立</p><p>再看一下hashmap的remove操作是做了什么：</p><p>这里对modCount进行了自增操作，表示操作动作+1。再看modCount和expectedModCount是什么东西</p><p>可以看出迭代器初始化的时候就对modCount和expectedModCount进行同步。<br>到此，可以看出报错的原因：</p><p>hashmap里维护了一个modCount变量，迭代器里维护了一个expectedModCount变量，一开始两者是一样的。<br>每次进行hashmap.remove操作的时候就会对modCount+1，此时迭代器里的expectedModCount还是之前的值。<br>在下一次对迭代器进行next()调用时，判断是否HashMap.this.modCount !&#x3D; this.expectedModCount，如果是则抛出异常。<br>那什么情况下在遍历的时候可以删除map里面的元素呢？可以使用迭代器提供的remove方法</p><pre class=" language-java"><code class="language-java">Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"del:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lambda表达式--根据 map 中的 key 去判断删除</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>key <span class="token operator">-</span><span class="token operator">></span> key <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show:"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先使用 <code>Lambda</code> 的 <code>removeIf</code> 删除多余的数据，再进行循环是一种正确操作集合的方式。</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"del:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以使用 <code>Stream</code> 中的 <code>filter</code> 过滤掉无用的数据，再进行遍历也是一种安全的操作集合的方式。</p><p>综合性能和安全性来看，<strong>我们应该尽量使用迭代器（Iterator）来遍历 <code>EntrySet</code> 的遍历方式来操作 Map 集合</strong>，这样就会既安全又高效了。</p><h2 id="如何保证-ConcurrentHashMap-复合操作的原子性呢？"><a href="#如何保证-ConcurrentHashMap-复合操作的原子性呢？" class="headerlink" title="如何保证 ConcurrentHashMap 复合操作的原子性呢？"></a><strong>如何保证 <code>ConcurrentHashMap</code> 复合操作的原子性呢？</strong></h2><p><code>ConcurrentHashMap</code> 提供了一些原子性的复合操作，如 <code>putIfAbsent</code>、<code>compute</code>、<code>computeIfAbsent</code> 、<code>computeIfPresent</code>、<code>merge</code>等。这些方法都可以接受一个函数作为参数，根据给定的 key 和 value 来计算一个新的 value，并且将其更新到 map 中</p><h2 id="Collections-工具类常用方法–排序，查找-x2F-替换"><a href="#Collections-工具类常用方法–排序，查找-x2F-替换" class="headerlink" title="Collections 工具类常用方法–排序，查找&#x2F;替换"></a><strong><code>Collections</code> 工具类常用方法</strong>–排序，查找&#x2F;替换</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//反转</span><span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//随机排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按自然排序的升序排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Comparator c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定制排序，由Comparator控制排序逻辑</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//交换两个索引位置的元素</span><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对List进行二分查找，返回索引，注意List必须是有序的</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">,</span> Comparator c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用指定的元素代替指定list中的所有元素</span><span class="token keyword">int</span> <span class="token function">frequency</span><span class="token punctuation">(</span>Collection c<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//统计元素出现次数</span><span class="token keyword">int</span> <span class="token function">indexOfSubList</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> List target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target)</span><span class="token keyword">boolean</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object oldVal<span class="token punctuation">,</span> Object newVal<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用新元素替换旧元素</span></code></pre><p>虽然里面的参数是List，但是List是个很大的接口。Collection下面分为Set,List,Queue三个接口，List的范围之广可见一斑。</p><h2 id="集合判空-isEmpty"><a href="#集合判空-isEmpty" class="headerlink" title="集合判空-isEmpty()"></a>集合判空-isEmpty()</h2><blockquote><p> <strong>判断所有集合内部的元素是否为空，使用 <code>isEmpty()</code> 方法，而不是 <code>size()==0</code> 的方式。</strong></p></blockquote><h2 id="集合转map"><a href="#集合转map" class="headerlink" title="集合转map"></a>集合转map</h2><blockquote><p><strong>在使用 <code>java.util.stream.Collectors</code> 类的 <code>toMap()</code> 方法转为 <code>Map</code> 集合时，一定要注意当 value 为 null 时会抛 NPE 异常。</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phoneNumber<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// getters and setters</span><span class="token punctuation">}</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> bookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"18163138123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"martin"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 空指针异常</span>bookList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> Person<span class="token operator">:</span><span class="token operator">:</span>getPhoneNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h2><blockquote><p><strong>不要在 foreach 循环里进行元素的 <code>remove/add</code> 操作。remove 元素请使用 <code>Iterator</code> 方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁。</strong></p></blockquote><p>通过反编译你会发现 foreach 语法底层其实还是依赖 <code>Iterator</code> 。不过， <code>remove/add</code> 操作直接调用的是集合自己的方法，而不是 <code>Iterator</code> 的 <code>remove/add</code>方法</p><p>这就导致 <code>Iterator</code> 莫名其妙地发现自己有元素被 <code>remove/add</code> ，然后，它就会抛出一个 <code>ConcurrentModificationException</code> 来提示用户发生了并发修改异常。这就是单线程状态下产生的 <strong>fail-fast 机制</strong>。</p><p>Java8 开始，可以使用 <code>Collection#removeIf()</code>方法删除满足特定条件的元素,如</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>filter <span class="token operator">-</span><span class="token operator">></span> filter <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 删除list中的所有偶数 */</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [1, 3, 5, 7, 9] */</span></code></pre><p><strong>fail-fast 机制</strong>：多个线程对 fail-fast 集合进行修改的时候，可能会抛出<code>ConcurrentModificationException</code>。 即使是单线程下也有可能会出现这种情况.</p><p><code>java.util</code>包下面的所有的集合类都是 fail-fast 的，而<code>java.util.concurrent</code>包下面的所有的类都是 fail-safe 的。</p><h2 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h2><blockquote><p><strong>可以利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List</code> 的 <code>contains()</code> 进行遍历去重或者判断包含操作。</strong></p></blockquote><h2 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h2><blockquote><p><strong>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一致、长度为 0 的空数组</strong></p></blockquote><pre class=" language-java"><code class="language-java">String <span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"lazy"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">,</span> <span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"A"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有指定类型的话会报错 java: 不兼容的类型: java.lang.Object[]无法转换为java.lang.String[]</span>s<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String s1 <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可以顺利的倒序输出</span><span class="token punctuation">}</span></code></pre><h2 id="数组转集合"><a href="#数组转集合" class="headerlink" title="数组转集合"></a>数组转集合</h2><blockquote><p>使用工具类 <code>Arrays.asList()</code> 把数组转换成集合时，不能使用其修改集合相关的方法， 它的 <code>add/remove/clear</code> 方法会抛出 <code>UnsupportedOperationException</code> 异常。</p></blockquote><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上面两个语句等价于下面一条语句</span><span class="token comment" spellcheck="true">// List&lt;String> myList = Arrays.asList("Apple","Banana", "Orange");</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [Apple, Banana, Orange]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Apple</span></code></pre><p>String是包装类型，Integer也是包装的，但是int[]是基础类型</p><blockquote><p><strong><code>Arrays.asList()</code>是泛型方法，传递的数组必须是对象数组，而不是基本类型</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List myList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组地址值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错：ArrayIndexOutOfBoundsException</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><p>下面也会报错</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> myList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行时报错：UnsupportedOperationException</span>myList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行时报错：UnsupportedOperationException</span>myList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行时报错：UnsupportedOperationException</span></code></pre><p><code>Arrays.asList()</code> 方法返回的并不是 <code>java.util.ArrayList</code> ，而是 <code>java.util.Arrays</code> 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。</p><h2 id="那我们如何正确的将数组转换为-ArrayList"><a href="#那我们如何正确的将数组转换为-ArrayList" class="headerlink" title="那我们如何正确的将数组转换为 ArrayList ?"></a><strong>那我们如何正确的将数组转换为 <code>ArrayList</code> ?</strong></h2><h3 id="1-手动实现工具类"><a href="#1-手动实现工具类" class="headerlink" title="1.手动实现工具类"></a>1.手动实现工具类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//JDK1.5+</span><span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">arrayToList</span><span class="token punctuation">(</span><span class="token keyword">final</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> T s <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class java.util.ArrayList</span></code></pre><h3 id="2-最简便的办法"><a href="#2-最简便的办法" class="headerlink" title="2.最简便的办法"></a>2.最简便的办法</h3><pre class=" language-java"><code class="language-java">List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-使用Java8的Stream（推荐）"><a href="#3-使用Java8的Stream（推荐）" class="headerlink" title="3.使用Java8的Stream（推荐）"></a>3.使用Java8的Stream（推荐）</h3><pre class=" language-java"><code class="language-java">Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>List myList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本类型也可以实现转换（依赖boxed的装箱操作）</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> myArray2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>List myList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>myArray2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-使用Guava"><a href="#4-使用Guava" class="headerlink" title="4.使用Guava"></a>4.使用Guava</h3><p>对于不可变集合，你可以使用类ImmutableList及其of()与copyOf()工厂方法：（参数不能为空）</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> il <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"elements"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// from varargs</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> il <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>aStringArray<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// from array</span></code></pre><p>对于可变集合，你可以使用Lists类及其newArrayList()工厂方法：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> l1 <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>anotherListOrCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// from collection</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> l2 <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>aStringArray<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// from array</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> l3 <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"elements"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// from varargs</span></code></pre><h3 id="5-使用Apache-Commons-Collections"><a href="#5-使用Apache-Commons-Collections" class="headerlink" title="5.使用Apache Commons Collections"></a>5.使用Apache Commons Collections</h3><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-使用Java9的List-of-方法"><a href="#6-使用Java9的List-of-方法" class="headerlink" title="6.使用Java9的List.of()方法"></a>6.使用Java9的List.of()方法</h3><pre class=" language-java"><code class="language-java">Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaGuide </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录7</title>
      <link href="/2023/09/28/xiang-mu-zi-xue-ji-lu-7/"/>
      <url>/2023/09/28/xiang-mu-zi-xue-ji-lu-7/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录7"><a href="#项目自学记录7" class="headerlink" title="项目自学记录7"></a>项目自学记录7</h1><h2 id="对于枚举类-Stream-of"><a href="#对于枚举类-Stream-of" class="headerlink" title="对于枚举类-Stream.of()"></a>对于枚举类-Stream.of()</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%957/image/image-20231007171253147.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> InvoiceCatagoryEnum <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>InvoiceCatagoryEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>InvoiceCatagoryEnum.values()得到的是枚举里面的所有枚举实体类的数组，然后Stream.of()将这些数组变为流。</p><blockquote><p>备注：</p><p>让我们创建整数流。</p><pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> mystream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>假设我们迭代并打印流元素。</p><pre class=" language-java"><code class="language-java">mystream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p> 输出将为10 12 14 16。 </p></blockquote><p>orElse就是如果是999这种没有枚举实体类的，就给个null值返回。</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>​    <strong>该注解的方法在整个Bean初始化中的执行顺序：</strong></p><p>Constructor(构造方法) -&gt; @Autowired(依赖注入) -&gt; @PostConstruct(注释的初始化方法)</p><h2 id="从数据库里查出JSON数据，然后转map"><a href="#从数据库里查出JSON数据，然后转map" class="headerlink" title="从数据库里查出JSON数据，然后转map"></a>从数据库里查出JSON数据，然后转map</h2><pre><code>import com.alibaba.fastjson.JSON;</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从数据库中取出 JSON格式的 额外变量， 然后转为MAP , 再转为 生成OFD所认可的实体类的变量名字</span>        VatInvoiceTdysDomain vatInvoiceTdysDomain <span class="token operator">=</span> vatInvoiceTdysMapper<span class="token punctuation">.</span><span class="token function">selectByFphm</span><span class="token punctuation">(</span>invId<span class="token punctuation">)</span><span class="token punctuation">;</span>        String tdysDtl <span class="token operator">=</span> vatInvoiceTdysDomain<span class="token punctuation">.</span><span class="token function">getTdysDtl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map maps <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tdysDtl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="BeanUtil-copyList"><a href="#BeanUtil-copyList" class="headerlink" title="BeanUtil.copyList"></a>BeanUtil.copyList</h2><p>hutool的beanutil，可以把一个列表转化为另一个列表，而不用写for循环了.  其底层用的是stream，其实也是for循环。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TrainQueryResp<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Train<span class="token operator">></span> trainList <span class="token operator">=</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyToList</span><span class="token punctuation">(</span>trainList<span class="token punctuation">,</span> TrainQueryResp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="DTO-VO的区别"><a href="#DTO-VO的区别" class="headerlink" title="DTO,VO的区别"></a>DTO,VO的区别</h2><p>Data Transfer Object和View Object</p><p>前端传数据，比如这种</p><pre><code>selectByCondition(String userName,LocalDateTime startTime)</code></pre><p>参数字段会变多，所以我们可以用DTO，数据传输对象，UserQueryConditionDTO【yonghu chaxun tiaojian DTO]】</p><p>后端接口就可以这样写</p><pre class=" language-java"><code class="language-java"><span class="token function">selectUserByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserQueryConditionDTO userDto<span class="token punctuation">)</span></code></pre><p>VO,返回给视图层【前端】需要用到的对象。</p><p>比如前端想要用户的所在部门名称，我们需要一个对象封装带有deptName属性的user</p><h2 id="关于多态的反射"><a href="#关于多态的反射" class="headerlink" title="关于多态的反射"></a>关于多态的反射</h2><p>B和C两个类都继承自A</p><pre class=" language-java"><code class="language-java">A a1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ran<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ran<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    a1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出B</span></code></pre><p>可以发现A这个类被赋值后，反射得到的类名是B。</p><h2 id="SQL使用-CDATA-来代替转义字符大于小于号"><a href="#SQL使用-CDATA-来代替转义字符大于小于号" class="headerlink" title="SQL使用[CDATA[        ]]来代替转义字符大于小于号"></a>SQL使用[CDATA[        ]]来代替转义字符大于小于号</h2><p>[]中的东西不被xml解析,尽量缩小 <![CDATA[ ]]> 的范围</p><p>mybatis中的<if test=""></if>、<where></where>、<choose></choose>、<trim></trim> 等这些标签不能写到CDATA中。否则标签将不会被mybatis解析</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%957/image/image-20231019091558846.png"></p><h2 id="使用工厂模式-策略模式对版式文件生成进行优化"><a href="#使用工厂模式-策略模式对版式文件生成进行优化" class="headerlink" title="使用工厂模式+策略模式对版式文件生成进行优化"></a>使用工厂模式+策略模式对版式文件生成进行优化</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%957/image/E%240A8SWF%24%5B%40NE5%5B%5BBA7%40R6.jpg"></p><p>接口+2个实现类，就是天然的实现了策略模式。而用哪个策略，取决于工厂生成的对象是什么。</p><p>接口就是抽象策略类，接口的实现类是具体实现类。工厂生成对象写在Client类里，是上下文。</p><p>首先是抽象接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVatCreateFormatFileService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *  生成发票版式文件     * @param fph  发票号     * @param sellerCode  销货单位编码     */</span>    <span class="token keyword">void</span> <span class="token function">createFormatFile</span><span class="token punctuation">(</span>String fph<span class="token punctuation">,</span> String sellerCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有pdf和ofd两个类实现了该接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"vatCreateOfdFormatFileServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VatCreateQdOfdServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IVatCreateFormatFileService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"vatCreatePdfFormatFileServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VatLocalPdfServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IVatCreateFormatFileService</span></code></pre><p>然后是工厂，工厂的目的是生成对象Bean，而且是以强配置的形式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatFileCreateFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">FormatFileCreateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IVatInvoiceService iVatInvoiceService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Environment environment<span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token function">getFormatFileType</span><span class="token punctuation">(</span><span class="token keyword">int</span> invoiceCatagory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"zbiti.invoice-%d.formatfile.type"</span><span class="token punctuation">,</span> invoiceCatagory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IVatCreateFormatFileService <span class="token function">getFormatFileBean</span><span class="token punctuation">(</span>String invId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据发票号，得到是电票 [invoiceCategory 的值为3或4] 还是 数电票[invoiceCategpry的值为5或6]</span>        Integer invoiceCatagory <span class="token operator">=</span> iVatInvoiceService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>invId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInvoiceCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从配置文件中去取 得到formatFileType为pdf 或 ofd</span>        String formatFileType <span class="token operator">=</span> <span class="token function">getFormatFileType</span><span class="token punctuation">(</span>invoiceCatagory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> formatFileType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//规格化一下，formatFileType1Big的值为 Pdf  或 Ofd</span>        String formatFileType1Big <span class="token operator">=</span> formatFileType<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> formatFileType<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SpringUtils<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"vatCreate"</span> <span class="token operator">+</span> formatFileType1Big <span class="token operator">+</span><span class="token string">"FormatFileServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后是供别的地方调用的客户端Client</p><pre><code>@Servicepublic final class FormatFileCreateClient &#123;   @Autowired   private FormatFileCreateFactory factory;    public void createFormatFile(String invId, String sellerCode)&#123;        //通过工厂得到Bean对象        IVatCreateFormatFileService formatFileBean = factory.getFormatFileBean(invId);        if (null != formatFileBean) &#123;            //Bean对象调用接口，生成版式文件            formatFileBean.createFormatFile(invId, sellerCode);        &#125;    &#125;&#125;</code></pre><p>其他类直接注入Client就可以直接调用了</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> FormatFileCreateClient formatFileCreateClient<span class="token punctuation">;</span>formatFileCreateClient<span class="token punctuation">.</span><span class="token function">createFormatFile</span><span class="token punctuation">(</span>invId<span class="token punctuation">,</span> sellerCode<span class="token punctuation">)</span></code></pre><h2 id="接口中可以进行方法的实现，但要用default"><a href="#接口中可以进行方法的实现，但要用default" class="headerlink" title="接口中可以进行方法的实现，但要用default"></a>接口中可以进行方法的实现，但要用default</h2><p>Java 8 开始是可以有方法实现的，可以在接口中添加默认方法和静态方法</p><p>在 Java 8 之前，比如要在一个接口中添加一个抽象方法，那所有的接口实现类都要去实现这个方法，不然就会编译错误，而某些实现类根本就不需要实现这个方法也被迫要写一个空实现，改动会非常大。</p><p>所以，接口默认方法就是为了解决这个问题，只要在一个接口添加了一个默认方法，所有的实现类就自动继承，不需要改动任何实现类，也不会影响业务，爽歪歪。</p><p>另外，接口默认方法可以被接口实现类重写。</p><h2 id="Java8的并行流和foreach"><a href="#Java8的并行流和foreach" class="headerlink" title="Java8的并行流和foreach"></a>Java8的并行流和foreach</h2><pre class=" language-java"><code class="language-java"> strList<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种代码是线程不安全的，如果integerList是ArrayList就是线程不安全的。</p><p>200—普通for循环数组<br>200—<a href="https://so.csdn.net/so/search?q=stream&spm=1001.2101.3001.7020">stream</a>流for循环数组<br>197—parallelStream流for循环数组—会丢失数据</p><h2 id="sql的if的有意思的地方"><a href="#sql的if的有意思的地方" class="headerlink" title="sql的if的有意思的地方"></a>sql的if的有意思的地方</h2><p>这样写，直接在sql里做判断。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%957/image/image-20231025134910512.png"></p><h2 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h2><p>在12306项目里用于制作代码生成器模板，在黑马头条项目里用于生成静态的文章页面，然后存在MinIo里</p><h2 id="读环境信息，并用String-format"><a href="#读环境信息，并用String-format" class="headerlink" title="读环境信息，并用String.format"></a>读环境信息，并用String.format</h2><pre><code># 版式文件类型 ofd,xml,pdf# 3 电子普票invoice-3:  formatfile:    type: pdf# 4 电子专票invoice-4:  formatfile:    type: pdf# 5 数电专票invoice-5:  formatfile:    CargoTransportation-type: ofd  #交通运输    Common-type: ofd    # 普通票    Construction-type: ofd  # 建筑服务票    RealEstateBusinessLeasing-type: ofd # 不动产票    Photovoltaic-type: ofd #光伏票    Cigarette-type: ofd #卷烟# 6 数电普票invoice-6:  formatfile:    CargoTransportation-type: ofd #交通运输    Common-type: ofd   # 普通票    Construction-type: ofd   # 建筑服务票    RealEstateBusinessLeasing-type: ofd  # 不动产票    Photovoltaic-type: ofd  #光伏票    Cigarette-type: ofd #卷烟</code></pre><p>在销项中就是</p><pre><code>private String getFormatFileType(int invoiceCatagory,String specialTdys) &#123;    return environment.getProperty(String.format(&quot;zbiti.invoice-%d.formatfile.%s-type&quot;, invoiceCatagory,StringUtils.nvl(specialTdys,&quot;&quot;)));&#125;</code></pre><h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%957/image/image-20231027123035791.png"></p><h2 id="根据枚举里的一个属性值，去查另一个属性值"><a href="#根据枚举里的一个属性值，去查另一个属性值" class="headerlink" title="根据枚举里的一个属性值，去查另一个属性值"></a>根据枚举里的一个属性值，去查另一个属性值</h2><p>本来以为要写for循环，结果发现hutool提供了工具类</p><p>第一个参数，你要得到哪列。第二个参数，你要通过哪列去查，第三个参数，第二个参数所对应的值。</p><pre class=" language-java"><code class="language-java">BigDecimal priceRate <span class="token operator">=</span> EnumUtil<span class="token punctuation">.</span><span class="token function">getFieldBy</span><span class="token punctuation">(</span>TrainTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getPriceRate<span class="token punctuation">,</span> TrainTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span> trainType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> TrainTypeEnum <span class="token punctuation">{</span>    <span class="token function">G</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"高铁"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"动车"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">K</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"快速"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 票价比例，例：1.1，则票价 = 1.1 * 每公里单价（SeatTypeEnum.price） * 公里（station.km）     */</span>    <span class="token keyword">private</span> BigDecimal priceRate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比如说trainType&#x3D;”G”,则priceRate&#x3D;1.2</p><h2 id="bigDecimal的乘法，并且四舍五入"><a href="#bigDecimal的乘法，并且四舍五入" class="headerlink" title="bigDecimal的乘法，并且四舍五入"></a>bigDecimal的乘法，并且四舍五入</h2><pre class=" language-java"><code class="language-java"> BigDecimal ydzPrice <span class="token operator">=</span> sumKM<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>SeatTypeEnum<span class="token punctuation">.</span>YDZ<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>priceRate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>都是几个bigDecimal相互乘，最后调整一下小数位。</p><h2 id="一些操作，应该先清空，再重新赋值。"><a href="#一些操作，应该先清空，再重新赋值。" class="headerlink" title="一些操作，应该先清空，再重新赋值。"></a>一些操作，应该先清空，再重新赋值。</h2><h2 id="根据某个属性，得到枚举值"><a href="#根据某个属性，得到枚举值" class="headerlink" title="根据某个属性，得到枚举值"></a>根据某个属性，得到枚举值</h2><pre class=" language-java"><code class="language-java">SeatTypeEnum seatTypeEnum <span class="token operator">=</span> EnumUtil<span class="token punctuation">.</span><span class="token function">getBy</span><span class="token punctuation">(</span>SeatTypeEnum<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span> seatTypeCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据getCode函数的值为seatTypeCode得到枚举值</p><h2 id="去获取一个对象的不固定的属性，就会用到反射，反射性能不如直接switch分支判断"><a href="#去获取一个对象的不固定的属性，就会用到反射，反射性能不如直接switch分支判断" class="headerlink" title="去获取一个对象的不固定的属性，就会用到反射，反射性能不如直接switch分支判断"></a>去获取一个对象的不固定的属性，就会用到反射，反射性能不如直接switch分支判断</h2>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-JVM学习记录1</title>
      <link href="/2023/09/28/java-ba-gu-wen-jvm-xue-xi-ji-lu-1/"/>
      <url>/2023/09/28/java-ba-gu-wen-jvm-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java八股文-JVM学习记录1"><a href="#Java八股文-JVM学习记录1" class="headerlink" title="Java八股文-JVM学习记录1"></a>Java八股文-JVM学习记录1</h1><h2 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230928091927899.png"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器：线程私有的，内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230928092223189.png"></p><p>那么现在有一个问题就是，当前处理器如何能够知道，对于这个被挂起的线程，它上一次执行到了哪里？那么这时就需要从程序计数器中来回去到当前的这个线程他上一次执行的行号，然后接着继续向下执行。</p><p>程序计数器是JVM规范中唯一一个没有规定出现OOM的区域，所以这个空间也不会进行GC。</p><h2 id="Java的堆"><a href="#Java的堆" class="headerlink" title="Java的堆"></a>Java的堆</h2><p>线程共享的区域：主要用来保存对象实例，数组等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。</p><p>元空间保存的类信息、静态变量、常量、编译后的代码</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230928092325038.png"></p><p>OOM：OutOfMemoryError</p><p>本地内存（Native memory），也称为C-Heap，是供JVM自身进程使用的。当Java Heap空间不足时会触发GC，但Native memory空间不够却不会触发GC。</p><p>默认情况下元空间是可以无限使用本地内存的</p><p>思考一下，为什么使用元空间替换永久代？</p><p>表面上看是为了避免OOM异常。因为通常使用PermSize和MaxPermSize设置永久代的大小就决定了永久代的上限，但是不是总能知道应该设置为多大合适, 如果使用默认值很容易遇到OOM错误。</p><p>当使用元空间时，可以加载多少类的元数据就不再由MaxPermSize控制, 而由系统的实际可用空间来控制。</p><p>更深层的原因还是要合并HotSpot和JRockit的代码，JRockit从来没有所谓的永久代，也不需要开发运维人员设置永久代的大小，但是运行良好。同时也不用担心运行性能问题了,在覆盖到的测试中, 程序启动和运行速度降低不超过1%，但是这点性能损失换来了更大的安全保障。</p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ul><li>每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><ol><li><p>垃圾回收是否涉及栈内存？</p><p>垃圾回收主要指就是堆内存，当栈帧弹栈以后，内存就会释放</p></li><li><p>栈内存分配越大越好吗？</p><p>未必，默认的栈内存通常为1024k</p><p>栈帧过大会导致线程数变少，例如，机器总内存为512m，目前能活动的线程数则为512个，如果把栈内存改为2048k，那么能活动的栈帧就会减半</p></li><li><p>方法内的局部变量是否线程安全？</p><ul><li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li><li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li><li>比如以下代码：</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230928092632122.png"></p></li></ol><p>关于第三种情况线程不安全的解释：<br><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230928092709134.png"></p><p>组成部分：堆、方法区、栈、本地方法栈、程序计数器</p><p>1、堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。<br>2、方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。<br>3、栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。<br>4、本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。<br>5、程序计数器（PC寄存器）中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>JDK7里面叫方法区&#x2F;永久代，JDK8里面改名叫元空间，位置从堆空间移动到本地内存里。</p><ul><li>方法区(Method Area)是各个线程共享的内存区域</li><li>主要存储类的信息、运行时常量池</li><li>虚拟机启动的时候创建，关闭虚拟机时释放</li><li>如果方法区域中的内存无法满足分配请求，则会抛出OutOfMemoryError: Metaspace</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231009172140584.png"></p><ul><li>常量池：可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</li><li>当类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</li></ul><p>方法区是JVM规范</p><p>落地： JDK7之前，永久代，是JVM虚拟机自己的内存。无法估计大小，无法设置</p><p>JDK8之后，元空间，直接内存。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存：并不属于JVM中的内存结构，不由JVM进行管理。是虚拟机的系统内存，常见于 NIO 操作时，用于数据缓冲区，它分配回收成本较高，但读写性能高</p><p>常规的IO：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231009172514945.png"></p><p>NIO</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231009172539787.png"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将<strong>字节码文件加载到JVM中</strong>，从而让Java程序能够启动起来。</p><p>类加载器根据各自加载范围的不同，划分为四种类加载器：</p><ul><li><p><strong>启动类加载器(BootStrap ClassLoader)：</strong></p><p>该类并不继承ClassLoader类，其是由C++编写实现。用于加载<strong>JAVA_HOME&#x2F;jre&#x2F;lib</strong>目录下的类库。</p></li><li><p><strong>扩展类加载器(ExtClassLoader)：</strong></p><p>该类是ClassLoader的子类，主要加载<strong>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</strong>目录中的类库。</p></li><li><p><strong>应用类加载器(AppClassLoader)：</strong></p><p>该类是ClassLoader的子类，主要用于加载<strong>classPath</strong>下的类，也就是加载开发者自己编写的Java类。</p></li><li><p><strong>自定义类加载器：</strong></p><p>开发者自定义类继承ClassLoader，实现自定义类加载规则。</p></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231009173609834.png"></p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>加载某一个类，先委托上一级的加载器进行加载，如果上级加载器也有上级，则会继续向上委托，如果该类委托上级没有被加载，子加载器尝试加载该类</p><p>好处：</p><p>（1）通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。<br>（2）为了安全，保证类库API不会被修改</p><p>由于是双亲委派的机制，java.lang.String的在启动类加载器得到加载，这样就能防止恶意篡改核心API库。</p><h2 id="对象什么时候被回收"><a href="#对象什么时候被回收" class="headerlink" title="对象什么时候被回收"></a>对象什么时候被回收</h2><p>简单一句就是：如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。</p><p>引用计数法一般不用，因为会有循环引用的问题。</p><p>一般用可达性分析算法，扫描堆中的对象，看是否能够沿着 GC Root 对象 为起点的引用链找到该对象，找不到，表示可以回收</p><p>哪些变量可以作为GC Root ，new的普通变量，静态变量，常量 都可以</p><p>严格一点：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</li></ol><h2 id="JVM的垃圾回收算法有哪些？"><a href="#JVM的垃圾回收算法有哪些？" class="headerlink" title="JVM的垃圾回收算法有哪些？"></a>JVM的垃圾回收算法有哪些？</h2><p>1.标记清除算法</p><p>标记清除算法，是将垃圾回收分为2个阶段，分别是<strong>标记和清除</strong>。</p><p>1.根据可达性分析算法得出的垃圾进行标记</p><p>2.对这些标记为可回收的内容进行垃圾回收</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506112047190.png"></p><p>可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。</p><p>同样，标记清除算法也是有缺点的：</p><ul><li>效率较低，<strong>标记和清除两个动作都需要遍历所有的对象</strong>，并且在GC时，<strong>需要停止应用程序</strong>，对于交互性要求比较高的应用而言这个体验是非常差的。</li><li>（<strong>重要</strong>）通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。</li></ul><p>2.复制算法</p><p>复制算法的核心就是，<strong>将原有的内存空间一分为二，每次只用其中的一块</strong>，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p><p>​如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。 </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506111919008.png"></p><p>1）将内存区域分成两部分，每次操作其中一个。</p><p>2）当进行垃圾回收时，将正在使用的内存区域中的存活对象移动到未使用的内存区域。当移动完对这部分内存区域一次性清除。</p><p>3）周而复始。</p><p>优点：</p><ul><li>在垃圾对象多的情况下，效率较高</li><li>清理后，内存无碎片</li></ul><p>缺点：</p><ul><li>分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低</li></ul><p>3.标记整理算法</p><p>标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的直接清理可回收对象，而是将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506111957793.png"></p><p>1）标记垃圾。</p><p>2）需要清除向右边走，不需要清除的向左边走。</p><p>3）清除边界以外的垃圾。</p><p>优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记整理算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。</p><p>与复制算法对比：复制算法标记完就复制，但标记整理算法得等把所有存活对象都标记完毕，再进行整理</p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>在java8时，堆被分为了两份：<strong>新生代和老年代【1：2】</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131229649.png"></p><p>对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区【8：1：1】</p><p>当对新生代产生GC：MinorGC【young GC】</p><p>当对老年代代产生GC：Major GC </p><p>当对新生代和老年代产生FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长，<strong>应尽力避免</strong></p><ul><li><p>MinorGC【young GC】发生在新生代的垃圾回收，暂停时间短（STW）</p></li><li><p>Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有</p></li><li><p>FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长（STW），应尽力避免？</p></li></ul><blockquote><p>名词解释：</p><p>STW（Stop-The-World）：暂停所有应用程序线程，等待垃圾回收的完成</p></blockquote><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131308654.png"></p><ul><li>新创建的对象，都会先分配到eden区</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131415418.png"></p><ul><li><p>当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象</p></li><li><p>将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放</p></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131442503.png"></p><ul><li>经过一段时间后伊甸园的内存又出现不足，标记eden区域to区存活的对象，将存活的对象复制到from区</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131544447.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506131607645.png"></p><ul><li>当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）</li></ul><h2 id="JVM有哪些垃圾回收器"><a href="#JVM有哪些垃圾回收器" class="headerlink" title="JVM有哪些垃圾回收器"></a>JVM有哪些垃圾回收器</h2><p>在jvm中，实现了多种垃圾收集器，包括：</p><ul><li>串行垃圾收集器</li><li>并行垃圾收集器</li><li>CMS（并发）垃圾收集器</li><li>G1垃圾收集器</li></ul><h3 id="串行垃圾收集器"><a href="#串行垃圾收集器" class="headerlink" title="串行垃圾收集器"></a>串行垃圾收集器</h3><p>Serial和Serial Old串行垃圾收集器，是指使用单线程进行垃圾回收，堆内存较小，适合个人电脑</p><ul><li><p>Serial 作用于新生代，采用复制算法</p></li><li><p>Serial Old 作用于老年代，采用标记-整理算法</p></li></ul><p>垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154006266.png"></p><h3 id="并行垃圾收集器"><a href="#并行垃圾收集器" class="headerlink" title="并行垃圾收集器"></a>并行垃圾收集器</h3><p>Parallel New和Parallel Old是一个并行垃圾回收器，<strong>JDK8默认使用此垃圾回收器</strong></p><ul><li><p>Parallel New作用于新生代，采用复制算法</p></li><li><p>Parallel Old作用于老年代，采用标记-整理算法</p></li></ul><p>垃圾回收时，多个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154042673.png"></p><h3 id="CMS（并发）垃圾收集器"><a href="#CMS（并发）垃圾收集器" class="headerlink" title="CMS（并发）垃圾收集器"></a>CMS（并发）垃圾收集器</h3><p>CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器，该回收器是针对老年代垃圾回收的，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。其最大特点是在进行垃圾回收时，应用仍然能正常运行。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154117857.png"></p><h2 id="详细聊一下G1垃圾回收器"><a href="#详细聊一下G1垃圾回收器" class="headerlink" title="详细聊一下G1垃圾回收器"></a>详细聊一下G1垃圾回收器</h2><ul><li><p>应用于新生代和老年代，在JDK9之后默认使用G1</p></li><li><p>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</p></li><li><p>采用复制算法</p></li><li><p>响应时间与吞吐量兼顾</p></li><li><p>分成三个阶段：新生代回收、并发标记、混合收集</p></li><li><p>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</p></li><li></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154323950.png"></p><h3 id="Young-Collection-年轻代垃圾回收"><a href="#Young-Collection-年轻代垃圾回收" class="headerlink" title="Young Collection(年轻代垃圾回收)"></a>Young Collection(年轻代垃圾回收)</h3><ul><li><p>初始时，所有区域都处于空闲状态</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154542687.png"></p></li><li><p>创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154607558.png"></p></li><li><p>当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154633118.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154705088.png"></p></li><li><p>随着时间流逝，伊甸园的内存又有不足</p></li><li><p>将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154759809.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154826981.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506154859985.png"></p></li></ul><h3 id="Young-Collection-Concurrent-Mark-年轻代垃圾回收-并发标记"><a href="#Young-Collection-Concurrent-Mark-年轻代垃圾回收-并发标记" class="headerlink" title="Young Collection + Concurrent Mark (年轻代垃圾回收+并发标记)"></a>Young Collection + Concurrent Mark (年轻代垃圾回收+并发标记)</h3><p>当老年代占用内存超过阈值(默认是45%)后，触发并发标记，这时无需暂停用户线程</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155000503.png"></p><ul><li><p>并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。</p></li><li><p>这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据暂停时间目标优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155047765.png"></p></li></ul><h3 id="Mixed-Collection-混合垃圾回收"><a href="#Mixed-Collection-混合垃圾回收" class="headerlink" title="Mixed Collection (混合垃圾回收)"></a>Mixed Collection (混合垃圾回收)</h3><p>复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155116267.png"></p><p>其中H叫做巨型对象，如果对象非常大，会开辟一块连续的空间存储巨型对象</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155146370.png"></p><h2 id="强引用、软引用、弱引用、虚引用的区别？"><a href="#强引用、软引用、弱引用、虚引用的区别？" class="headerlink" title="强引用、软引用、弱引用、虚引用的区别？"></a>强引用、软引用、弱引用、虚引用的区别？</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>强引用：只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155341703.png"></p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用：仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次出发垃圾回收</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SoftReference softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155416293.png"></p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用：仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WeakReference weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155501557.png"></p><blockquote><p>延伸话题：ThreadLocal内存泄漏问题</p></blockquote><p>ThreadLocal用的就是弱引用，看以下源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>    Object value<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>         value <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强引用，不会被回收</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Entry</code>的key是当前ThreadLocal，value值是我们要设置的数据。</p><p><code>WeakReference</code>表示的是弱引用，当JVM进行GC时，一旦发现了只具有弱引用的对象，不管当前内存空间是否足够，都会回收它的内存。但是<code>value</code>是强引用，它不会被回收掉。</p><blockquote><p>ThreadLocal使用建议：使用完毕后注意调用清理方法。</p></blockquote><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用：必须配合引用队列使用，被引用对象回收时，会将虚引用入队，由 Reference Handler 线程调用虚引用相关方法释放直接内存</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155518510.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230506155552693.png"></p><h2 id="JVM调优的参数有哪些"><a href="#JVM调优的参数有哪些" class="headerlink" title="JVM调优的参数有哪些"></a>JVM调优的参数有哪些</h2><p>对于JVM调优，主要就是调整年轻代、老年代、元空间的内存空间大小及使用的垃圾回收器类型。</p><ul><li>设置堆空间大小</li><li>虚拟机栈的设置</li><li>年轻代中Eden区和两个Survivor区的大小比例</li><li>年轻代晋升老年代阈值</li><li>设置垃圾回收收集器</li></ul><h2 id="JVM调优的工具"><a href="#JVM调优的工具" class="headerlink" title="JVM调优的工具"></a>JVM调优的工具</h2><h3 id="命令工具"><a href="#命令工具" class="headerlink" title="命令工具"></a>命令工具</h3><p>jps          进程状态信息<br>jstack     查看java进程内线程的堆栈信息<br>jmap      查看堆转信息<br>jhat       堆转储快照分析工具<br>jstat      JVM统计监测工具</p><h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><p>jconsole      用于对jvm的内存，线程，类 的监控<br>VisualVM    能够监控线程，内存情况</p><p>Arthas  阿里巴巴开源的Java诊断工具</p><h2 id="java内存泄露的排查思路"><a href="#java内存泄露的排查思路" class="headerlink" title="java内存泄露的排查思路"></a>java内存泄露的排查思路</h2><p>内存泄漏通常是指堆内存，通常是指一些大对象不被回收的情况</p><p>1、通过jmap或设置jvm参数获取堆内存快照dump<br>2、通过工具， VisualVM去分析dump文件，VisualVM可以加载离线的dump文件<br>3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题<br>4、找到对应的代码，通过阅读上下文的情况，进行修复即可</p><h2 id="CPU飙高排查方案与思路？"><a href="#CPU飙高排查方案与思路？" class="headerlink" title="CPU飙高排查方案与思路？"></a>CPU飙高排查方案与思路？</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231013092157178.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231013092209502.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20231013092220808.png"></p><p>1.使用top命令查看占用cpu的情况<br>2.通过top命令查看后，可以查看是哪一个进程占用cpu较高<br>3.使用ps命令查看进程中的线程信息<br>4.使用jstack命令查看进程中哪些线程出现了问题，最终定位问题</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些正常的面试问题</title>
      <link href="/2023/09/25/yi-xie-zheng-chang-de-mian-shi-wen-ti/"/>
      <url>/2023/09/25/yi-xie-zheng-chang-de-mian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="一些正常的面试问题"><a href="#一些正常的面试问题" class="headerlink" title="一些正常的面试问题"></a>一些正常的面试问题</h1><p>降级和限流的区别</p><p>redis消息队列如何实现延时</p><p>redisson实现分布式锁和消息队列，介绍一下。</p><p>kafka里面消费者和分区的关系（如果分区小于消费者）（3个分区，4个消费者）</p><p>跨域</p><p>分布式场景下的雪花ID唯一，雪花和UUID的区别</p><p>实现一些对外提供的接口，如何去做。</p><p>为什么要用令牌桶，也有很多开源的限流的。</p><p>foreach的并行流和串行流</p><p>final修饰的变量特征，如果是map可以修改吗。</p><p>Java的深拷贝和浅拷贝</p><p>微服务如何保证事务一致性</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录6</title>
      <link href="/2023/09/22/xiang-mu-zi-xue-ji-lu-6/"/>
      <url>/2023/09/22/xiang-mu-zi-xue-ji-lu-6/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学目录6"><a href="#项目自学目录6" class="headerlink" title="项目自学目录6"></a>项目自学目录6</h1><h2 id="关于Future的深度解析"><a href="#关于Future的深度解析" class="headerlink" title="关于Future的深度解析"></a>关于Future的深度解析</h2><p><strong>Future表示一个任务的周期，并提供了相应的方法来判断是否已经完成或者取消，以及获取任务的结果和取消任务</strong></p><p><strong>Future是一个接口，是无法生成一个实例的，所以又有了FutureTask</strong>。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%956/image/image-11.png"></p><p>Future中有5个方法</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%956/image/image-20230922163237806.png"></p><p>1、cancel()：取消一个任务，并返回取消结果。参数表示是否中断线程<br>2、isCancelled()：任务是否取消成功<br>3、isDone()：判断当前任务是否执行完毕，包括正常执行完毕、执行异常或者任务取消<br>4、get()：获取任务执行结果，任务结束之前会阻塞<br>5、get(long count,TimeUnit)：在指定时间内尝试获取执行结果。若超时则抛出超时异常</p><p>ThreadPoolExecutor提供了三个方法，来获取返回值</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%956/image/image-20230922163400742.png"></p><p>FutureTask是一个具体的实现类，ThreadPoolExecutor的submit方法返回的就是一个Future的实现，这个实现就是FutureTask的一个具体实例，FutureTask帮助实现了具体的任务执行，以及和Future接口中的get方法的关联。</p><p>futureTask.get()执行时如果该任务已经执行完了则直接返回执行结果，如果没有执行完则线程会阻塞在这里，直至任务执行完毕。还可以用get(long timeout, TimeUnit unit)来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。</p><p>总结</p><p> 总的来说Future模式的思想就是在子线程进行执行的时候，主线程不阻塞继续执行。等到主线程需要子线程的结果的时候再去获取子线程的结果（此时子线程没有执行完成的话就会阻塞直至执行完成）。主线程还可以根据一定的业务逻辑去判断是否要取消执行子线程，还可以设置一个超时时间。若阻塞时间超过了超时时间子线程仍然没有执行完成的话，可以直接返回null。</p><h2 id="DateFormatUtils-format-date-pattern-日期格式化的优雅写法"><a href="#DateFormatUtils-format-date-pattern-日期格式化的优雅写法" class="headerlink" title="DateFormatUtils.format(date, pattern)日期格式化的优雅写法"></a>DateFormatUtils.format(date, pattern)日期格式化的优雅写法</h2><pre><code>import org.apache.commons.lang3.time.DateFormatUtils;</code></pre><p>引入依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>前面传个new Date()的参数，后面传个 “yyyy-MM-dd”的参数</p><h2 id="把JSON转为hashmap"><a href="#把JSON转为hashmap" class="headerlink" title="把JSON转为hashmap"></a>把JSON转为hashmap</h2><p>注意要用alibaba.fastjson而不是hutool的json</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%956/image/image-20230926093754426.png"></p><p>不过要注意，他的key好像是转为string了，而value则智能的转为数字了。</p><h2 id="编译优化？—-将成员变量转为局部变量"><a href="#编译优化？—-将成员变量转为局部变量" class="headerlink" title="编译优化？— 将成员变量转为局部变量"></a>编译优化？— 将成员变量转为局部变量</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%956/image/image-20230926100913080.png"></p><p>原来我是用成员变量map直接去put,但是他install到别的文件后，新增了var10000这个局部变量。</p><p>当然这个map不能直接声明在beforeCreateOfd()里，因为下面还有个函数也用到了map</p><h2 id="BigDecimal再探"><a href="#BigDecimal再探" class="headerlink" title="BigDecimal再探"></a>BigDecimal再探</h2><h3 id="BigDecimal要用BigDecimal-String-构造器创建对象才有意义"><a href="#BigDecimal要用BigDecimal-String-构造器创建对象才有意义" class="headerlink" title="BigDecimal要用BigDecimal(String)构造器创建对象才有意义"></a>BigDecimal要用BigDecimal(String)构造器创建对象才有意义</h3><p>其他的如BigDecimal b &#x3D; new BigDecimal(1)这种，还是会发生精度丢失的问题。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimal</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>BigDecimal<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BigInteger intVal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> scale<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="比较BigDecimal要用compareTo"><a href="#比较BigDecimal要用compareTo" class="headerlink" title="比较BigDecimal要用compareTo"></a>比较BigDecimal要用compareTo</h3><p>在比较两个<code>BigDecimal</code>的值是否相等时，要特别注意，使用<code>equals()</code>方法不但要求两个<code>BigDecimal</code>的值相等，还要求它们的<code>scale()</code>相等.</p><p>必须使用<code>compareTo()</code>方法来比较，它根据两个值的大小分别返回负数、正数和<code>0</code>，分别表示小于、大于和等于。</p><h3 id="一些和小数有关的方法"><a href="#一些和小数有关的方法" class="headerlink" title="一些和小数有关的方法"></a>一些和小数有关的方法</h3><p><code>BigDecimal</code>用<code>scale()</code>表示小数位数</p><p>通过<code>BigDecimal</code>的<code>stripTrailingZeros()</code>方法，可以将一个<code>BigDecimal</code>格式化为一个相等的，但去掉了末尾0的<code>BigDecimal</code>：</p><p>如果他本身的scale()是大于0的数字，那还好。去掉末尾的0；如果是一个整数，则直接变为科学计数法了。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BigDecimal d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123.4500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal d2 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">stripTrailingZeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2,因为去掉了00</span>        BigDecimal d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1234500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal d4 <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">stripTrailingZeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d4<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//123.4500</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//123.45</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1234500</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1.2345E+6</span>                BigDecimal d5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1230.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal d6<span class="token operator">=</span>d5<span class="token punctuation">.</span><span class="token function">stripTrailingZeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d5<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d5<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1230.00</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d6<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d6<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1.23E+3</span>    <span class="token punctuation">}</span></code></pre><h3 id="设置小数的精度"><a href="#设置小数的精度" class="headerlink" title="设置小数的精度"></a>设置小数的精度</h3><p>可以对一个<code>BigDecimal</code>设置它的<code>scale</code>，如果精度比原始值低，那么按照指定的方法进行四舍五入或者直接截断：</p><pre class=" language-java"><code class="language-java">BigDecimal d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123.456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal d2 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 四舍五入，123.4568</span>BigDecimal d3 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接截断，123.4567</span></code></pre><h3 id="一些BigDecimal的除法相关"><a href="#一些BigDecimal的除法相关" class="headerlink" title="一些BigDecimal的除法相关"></a>一些BigDecimal的除法相关</h3><p>对<code>BigDecimal</code>做加、减、乘时，精度不会丢失，但是做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断：</p><pre class=" language-java"><code class="language-java">BigDecimal d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123.456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"23.456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal d3 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留10位小数并四舍五入</span>BigDecimal d4 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错：ArithmeticException，因为除不尽</span></code></pre><p>调用<code>divideAndRemainder()</code>方法时，返回的数组包含两个<code>BigDecimal</code>，分别是商和余数，其中商总是整数，余数不会大于除数。我们可以利用这个方法判断两个<code>BigDecimal</code>是否是整数倍数</p><pre class=" language-java"><code class="language-java">BigDecimal n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"12.75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal<span class="token punctuation">[</span><span class="token punctuation">]</span> dr <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// n是m的整数倍</span><span class="token punctuation">}</span></code></pre><p>dr[0] 为 商，恒为整数， dr[1]为余数，其很可能为小数。</p><h3 id="BigDecimal的3个toString方法的区别"><a href="#BigDecimal的3个toString方法的区别" class="headerlink" title="BigDecimal的3个toString方法的区别"></a>BigDecimal的3个toString方法的区别</h3><p>BigDecimal类有3个toString方法，分别是toEngineeringString、toPlainString和toString，</p><p>从BigDecimal的注释中可以看到这3个方法的区别：</p><p>toEngineeringString：有必要时使用工程计数法。工程记数法是一种工程计算中经常使用的记录数字的方法，与科学技术法类似，但要求10的幂必须是3的倍数</p><p>toPlainString：不使用任何指数</p><p>toString：有必要时使用科学计数法</p><table><thead><tr><th>不使用指数</th><th>科学记数法</th><th>工程记数法</th></tr></thead><tbody><tr><td>2700</td><td>2.7 × 10³</td><td>2.7 × 10³</td></tr><tr><td>27000</td><td>2.7 × 10⁴</td><td>27 × 10³</td></tr><tr><td>270000</td><td>2.7 × 10⁵</td><td>270 × 10³</td></tr><tr><td>2700000</td><td>2.7 × 10⁶</td><td>2.7 × 10⁶</td></tr></tbody></table><h3 id="严格的只保留两位小数"><a href="#严格的只保留两位小数" class="headerlink" title="严格的只保留两位小数"></a>严格的只保留两位小数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>formatDecimal<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   DecimalFormat decimalFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   resDecimal <span class="token operator">=</span>  decimalFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>DecimalFormat format方法:<br>1：new DecimalFormat(“00.000”).format(pi) &#x2F;&#x2F;结果：03.142<br>2：new DecimalFormat(“##.###”).format(pi) &#x2F;&#x2F;结果：3.142<br>都是对pi进行格式化，但第一个的结果是03.142,第二个的结果是3.142<br>这是什么原因呢？<br>0和#都是占位符，但在不同的地方，作用不一样。下面对他们做了具体的比较。<br>希望对大家有所帮助。<br>0：<br>比实际数字的位数多，不足的地方用0补上。<br>new DecimalFormat(“00.00”).format(3.14) &#x2F;&#x2F;结果：03.14<br>new DecimalFormat(“0.000”).format(3.14) &#x2F;&#x2F;结果： 3.140<br>new DecimalFormat(“00.000”).format(3.14) &#x2F;&#x2F;结果：03.140<br>比实际数字的位数少：整数部分不改动，小数部分，四舍五入<br>new DecimalFormat(“0.000”).format(13.146) &#x2F;&#x2F;结果：13.146<br>new DecimalFormat(“00.00”).format(13.146) &#x2F;&#x2F;结果：13.15<br>new DecimalFormat(“0.00”).format(13.146) &#x2F;&#x2F;结果：13.15<br>#：<br>比实际数字的位数多，不变。<br>new DecimalFormat(“##.##”).format(3.14) &#x2F;&#x2F;结果：3.14<br>new DecimalFormat(“#.###”).format(3.14) &#x2F;&#x2F;结果： 3.14<br>new DecimalFormat(“##.###”).format(3.14) &#x2F;&#x2F;结果：3.14<br>比实际数字的位数少：整数部分不改动，小数部分，四舍五入<br>new DecimalFormat(“#.###”).format(13.146) &#x2F;&#x2F;结果：13.146<br>new DecimalFormat(“##.##”).format(13.146) &#x2F;&#x2F;结果：13.15<br>new DecimalFormat(“#.##”).format(13.146) &#x2F;&#x2F;结果：13.15</p><h2 id="在set属性内容的时候，推荐多使用三目运算符，以保证不set进Null值"><a href="#在set属性内容的时候，推荐多使用三目运算符，以保证不set进Null值" class="headerlink" title="在set属性内容的时候，推荐多使用三目运算符，以保证不set进Null值"></a>在set属性内容的时候，推荐多使用三目运算符，以保证不set进Null值</h2><pre class=" language-java"><code class="language-java">domain<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span>null<span class="token operator">==</span>vatInvoicedQueryVO<span class="token punctuation">.</span><span class="token function">getMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>vatInvoicedQueryVO<span class="token punctuation">.</span><span class="token function">getMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果为null就set进去一个空字符串，反正后面也会用notBlank做校验。</p><h2 id="StringUtils-nvl"><a href="#StringUtils-nvl" class="headerlink" title="StringUtils.nvl"></a>StringUtils.nvl</h2><p>自己封装的，为null则返回默认值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">nvl</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> T defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> null <span class="token operator">?</span> value <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="当在-try-块或-catch-块中遇到-return-语句时，finally-语句块将在方法返回之前被执行。"><a href="#当在-try-块或-catch-块中遇到-return-语句时，finally-语句块将在方法返回之前被执行。" class="headerlink" title="当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。"></a>当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</h2><p>同时，</p><p><strong>注意：不要在 finally 语句块中使用 return!</strong> 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</p><p>在某些情况下，finally 中的代码不会被执行。</p><p>就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。以及程序所在的线程死亡或者关闭CPU，也会导致finally块的代码不会被执行。</p><h2 id="线程工厂的命名"><a href="#线程工厂的命名" class="headerlink" title="线程工厂的命名"></a>线程工厂的命名</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor(核心线程池大小, 最大线程池大小, 线程最大空闲时间, 时间单位, 线程等待队列, 拒绝策略)</span>        ThreadFactory namedThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"Job-InvStocSync-pool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>poolSize<span class="token punctuation">,</span> poolSize<span class="token punctuation">,</span> 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> namedThreadFactory<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="swap函数在Java里的书写"><a href="#swap函数在Java里的书写" class="headerlink" title="swap函数在Java里的书写"></a>swap函数在Java里的书写</h2><h3 id="第一种，借助数组"><a href="#第一种，借助数组" class="headerlink" title="第一种，借助数组"></a>第一种，借助数组</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="第二种，借助类"><a href="#第二种，借助类" class="headerlink" title="第二种，借助类"></a>第二种，借助类</h3><p>写一个类似于Integer的类，里面封装一个int的属性。这样swap传入的就是对象的引用了，就可以修改Int的属性值了。</p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// usage: y = swap(x, x=y);</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用方法就是y &#x3D; swap(x, x&#x3D;y);</p>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录5</title>
      <link href="/2023/09/20/xiang-mu-zi-xue-ji-lu-5/"/>
      <url>/2023/09/20/xiang-mu-zi-xue-ji-lu-5/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学目录5"><a href="#项目自学目录5" class="headerlink" title="项目自学目录5"></a>项目自学目录5</h1><h2 id="Resource-和-Autowire"><a href="#Resource-和-Autowire" class="headerlink" title="Resource 和 Autowire"></a>Resource 和 Autowire</h2><p>@Autowired</p><ul><li>类型注入</li></ul><p>@Resource</p><ul><li>名字注入优先，找不到名字找类型</li></ul><h2 id="Resource直接注入失败，要调get方法的问题"><a href="#Resource直接注入失败，要调get方法的问题" class="headerlink" title="Resource直接注入失败，要调get方法的问题"></a>Resource直接注入失败，要调get方法的问题</h2><p>在conf里</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 税控发票库存同步任务     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"invStocSyncJobService"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"invStocSyncJobService"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> InvStocSyncJobService <span class="token function">invStocSyncJobService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意这里要对应好</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PROVIDER_HLZS<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InvStocSync4HLJobServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最终会导致InvStocSyncJobService 的返回值为Null。</p><p>所以对于下面的handler类来说</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvStocSyncJobHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> InvStocSyncJobService <span class="token function">getInvStocSyncJobService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SpringUtils<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"invStocSyncJobService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个get方法代替的是</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>InvStocSyncJobService invStocSyncJobService</code></pre><p>下面所有的invStocSyncJobService.函数，也变为getInvStocSyncJobService().函数</p><p>应该是一个注入时间的问题</p><p>如果你要在<strong>实例化一个类的时候</strong>把另一个类以属性的方式注入那你就用<code>@Resource</code>好了，<br>但是不想那么早注入，只在<strong>某个方法被调用时</strong>采取获取那个对象那就用<code>context.getBean()</code>呗。</p><p>如果实例化类的时候（很早）就注入，会导致程序无法启动成功。用下面这种方式程序可以启动也可以跑通。</p><p>其中的SpringUtils是自己写的工具类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringUtils</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ConfigurableListableBeanFactory beanFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SpringUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        SpringUtils<span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        T result <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getAopProxy</span><span class="token punctuation">(</span>T invoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Future的get-方法"><a href="#Future的get-方法" class="headerlink" title="Future的get()方法"></a>Future的get()方法</h2><h3 id="JDK里的Future"><a href="#JDK里的Future" class="headerlink" title="JDK里的Future"></a>JDK里的Future</h3><p>比如启动一个main方法，main中又包含了若干个其它任务，在不使用Java Future的情况下，main方法中的任务会同步阻塞执行，一个执行完成后，才能去执行另一个；如果使用java Future，则main方法中的任务会异步执行，main方法不用等待一个任务的执行完成，只需往下执行就行。<strong>一个任务的执行结果又该怎么获取呢?这里就需要用到Future接口中的isDone()方法来判断任务是否执行完</strong>，如果执行完成则可获取结果，如果没有完成则需要等待。 <strong>可见虽然主线程中的多个任务是异步执行，但是无法确定任务什么时候执行完成，只能通过不断去监听以获取结果，所以这里是阻塞的。</strong>这样，可能某一个任务执行时间很长会拖累整个主任务的执行。</p><p>如果用java.util.concurrent.Future这种原生的，<strong>要使用while循环不停的监听</strong>。而且结果是先输出第一行，然后光速输出第二第三行。  </p><p>Thread1  ——&gt; Task1  10s<br>Thread2  ——&gt; Task2  2s<br>Thread3  ——&gt; Task3  3s</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/111.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aplus<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * @author whb */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/guava"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaController</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务1</span>        Future<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> booleanTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务2</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> stringTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务3</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>booleanTask<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Boolean result <span class="token operator">=</span> booleanTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1-10s： "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stringTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stringTask<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String result <span class="token operator">=</span> stringTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2-3s： "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>integerTask<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Integer result <span class="token operator">=</span> integerTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3-2s："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 执行时间</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="Guava里的Future"><a href="#Guava里的Future" class="headerlink" title="Guava里的Future"></a>Guava里的Future</h3><p>Guava Future 能够 <strong>减少主函数的等待时间，使得多任务能够异步非阻塞执行</strong></p><p>ListenableFuture是可以监听的Future，它是对java原生Future的扩展增强。Future表示一个异步计算任务，当任务完成时可以得到计算结果。如果希望计算完成时马上就拿到结果展示给用户或者做另外的计算，就必须使用另一个线程不断的查询计算状态。这样做会使得代码复杂，且效率低下。如果使用ListenableFuture，Guava会帮助检测Future是否完成了，如果完成就自动调用回调函数，这样可以减少并发程序的复杂度。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aplus<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * @author whb */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/guava"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaController</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ListeningExecutorService service <span class="token operator">=</span> MoreExecutors<span class="token punctuation">.</span><span class="token function">listeningDecorator</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务1</span>        ListenableFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> booleanTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Futures<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>booleanTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>Boolean result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanTask.任务1-10s: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BooleanTask.throwable: "</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务2</span>        ListenableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> stringTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Futures<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>stringTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringTask.任务2-3s: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 任务3</span>        ListenableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Futures<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>integerTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>Integer result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IntegerTask.任务3-2s：: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 执行时间</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>Thread1  ——&gt; Task1  10s<br>Thread2  ——&gt; Task2  2s<br>Thread3  ——&gt; Task3  3s</p><p>执行结果是可以先输出Task2和Task3</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/222.png"></p><p>说明它获取结果时，只要结果有反馈，就能获取到，因为它是非阻塞的。</p><h2 id="threadPool的shutdown方法"><a href="#threadPool的shutdown方法" class="headerlink" title="threadPool的shutdown方法"></a>threadPool的shutdown方法</h2><p>将线程池状态置为<code>SHUTDOWN</code>,并不会立即停止：</p><ul><li>停止接收外部submit的任务</li><li>内部正在跑的任务和队列里等待的任务，会执行完</li><li>等到第二步完成后，才真正停止</li></ul><pre class=" language-java"><code class="language-java">singleThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="PostConstruct注解"><a href="#PostConstruct注解" class="headerlink" title="PostConstruct注解"></a>PostConstruct注解</h2><p><strong>该注解的方法在整个Bean初始化中的执行顺序：</strong></p><p>Constructor(构造方法) -&gt; @Autowired(依赖注入) -&gt; @PostConstruct(注释的初始化方法)</p><p><strong>该注解的功能：</strong>当依赖注入完成后用于执行初始化的方法，并且只会被执行一次</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span> <span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//userService注入后执行一些初始化操作</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="前端刷新按钮的书写"><a href="#前端刷新按钮的书写" class="headerlink" title="前端刷新按钮的书写"></a>前端刷新按钮的书写</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/image-20230915154006504.png"></p><p>首先找到应该在前端哪个页面，哪个位置写。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/image-20230915154106484.png"></p><p>因为是发送post请求，所以简单的导入一个post</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/ajax'</span></code></pre><p>然后就是写@click对应的函数</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9998/handlers"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="IDEA在打断点期间。Ctrl-u进入Evaluate-Expression界面"><a href="#IDEA在打断点期间。Ctrl-u进入Evaluate-Expression界面" class="headerlink" title="IDEA在打断点期间。Ctrl+u进入Evaluate Expression界面"></a>IDEA在打断点期间。Ctrl+u进入Evaluate Expression界面</h2><p>可以输入一些代码，进行调试。得到粒度更细的结果。</p><h2 id="一个Service如何搞多个ServiceImpl"><a href="#一个Service如何搞多个ServiceImpl" class="headerlink" title="一个Service如何搞多个ServiceImpl"></a>一个Service如何搞多个ServiceImpl</h2><p>以前的普通实现类，都是类似这种，一个service绑定一个ServiceImpl</p><pre><code>@Servicepublic class TaxPeriodAndStatStateSync4LqJobServiceImpl implements TaxPeriodAndStatStateSyncJobService</code></pre><p>如果要搞多个，就要自己配置. 搞个配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 任务实现配置器 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputinvJobConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 合力中税     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROVIDER_HLZS <span class="token operator">=</span> <span class="token string">"hlzs"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 乐企     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROVIDER_LQ <span class="token operator">=</span> <span class="token string">"lq"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * lq, hlzs     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${zbiti.config.vat.job.inputinv.service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String provider<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**     * 税款所属期及属期统计状态同步任务     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"taxPeriodAndStatStateSyncJobService"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"taxPeriodAndStatStateSyncJobService"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TaxPeriodAndStatStateSyncJobService <span class="token function">taxPeriodAndStatStateSyncJobService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PROVIDER_LQ<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaxPeriodAndStatStateSync4LqJobServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>PROVIDER_HLZS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaxPeriodAndStatStateSync4HLJobServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>是合力的就走合力的实现类Impl,是乐企的就走乐企的。 </p><p>两个注解的意思是，如果没有在Spring容器里找到这个，就在这进行初始化为Bean</p><h2 id="XxlJob-value-x3D-“TaxpayerInfoJobHandler”-label-x3D-“纳税人基础信息同步任务”-params-x3D"><a href="#XxlJob-value-x3D-“TaxpayerInfoJobHandler”-label-x3D-“纳税人基础信息同步任务”-params-x3D" class="headerlink" title="@XxlJob(value &#x3D; “TaxpayerInfoJobHandler”, label &#x3D; “纳税人基础信息同步任务”, params &#x3D; {})"></a>@XxlJob(value &#x3D; “TaxpayerInfoJobHandler”, label &#x3D; “纳税人基础信息同步任务”, params &#x3D; {})</h2><p>其实这个注解没有很理解，因为暂时还没碰到xxlJob。</p><p>这个的结果是</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/image-20230915160833898.png"></p><h2 id="String-format可以实现一定的正则效果"><a href="#String-format可以实现一定的正则效果" class="headerlink" title="String.format可以实现一定的正则效果"></a>String.format可以实现一定的正则效果</h2><pre class=" language-java"><code class="language-java">String title <span class="token operator">=</span> <span class="token string">"税控发票库存同步任务 "</span><span class="token punctuation">;</span>String tmpMsg <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">">>>>>%s开始"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://blog.csdn.net/lonely_fireworks/article/details/7962171">https://blog.csdn.net/lonely_fireworks/article/details/7962171</a></p><h2 id="StringUtil-isEmpty和StringUtil-isBlank"><a href="#StringUtil-isEmpty和StringUtil-isBlank" class="headerlink" title="StringUtil.isEmpty和StringUtil.isBlank"></a>StringUtil.isEmpty和StringUtil.isBlank</h2><p>直接看源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str <span class="token operator">==</span> null <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBlank</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> strLen<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>strLen <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断字符是否为空格、制表符、tab</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>isEmpty只支持两种情况，isBlank还多支持多个空格的字符串情况</p><h2 id="finally的注意事项-不要写return"><a href="#finally的注意事项-不要写return" class="headerlink" title="finally的注意事项-不要写return"></a>finally的注意事项-不要写return</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>    return20<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样，无论最后有没有异常，都是return 20</p><p><strong>而且如果finally里有return的话，会吞掉异常！！</strong></p><h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>InputStreamis<span class="token operator">=</span><span class="token function">newFileInputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOExceptione<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以把实现了资源接口的放到try的括号里。编译器会自动在finally里关闭资源。（重写代码）</p><p>他会写两个try，非常严谨。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%955/image/image-20230920154125896.png"></p><h2 id="对金额的处理-joda-money"><a href="#对金额的处理-joda-money" class="headerlink" title="对金额的处理 joda-money"></a>对金额的处理 joda-money</h2><p>存储金额的数据类型Decmial。</p><p>在Java中，可以使用<code>java.math.BigDecimal</code>类来表示<code>Decimal</code>类型的数据。<code>BigDecimal</code>对象可以存储任意精度的小数，具有高度的可靠性和精度。使用<code>BigDecimal</code>来存储金额等金融数据时，需要注意设置其精度和舍入模式，以确保数据的准确性。</p><p>除了<code>BigDecimal</code>之外，还有一些其他的数据类型可以用来存储金额等金融数据。例如，可以使用<code>long</code>类型来存储以分为单位的金额，这样可以避免使用浮点数产生的精度问题。在需要进行计算时，可以将<code>long</code>类型的金额转换为<code>BigDecimal</code>类型进行运算。</p><p>另外，还可以使用一些开源的库，如<code>joda-money</code>和<code>money-api</code>等，它们提供了更加方便和可读的API来处理货币和金额等金融数据。这些库可以自动处理金额的舍入、转换和格式化等问题，方便程序员进行开发和维护。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>money<span class="token punctuation">.</span>CurrencyUnit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>money<span class="token punctuation">.</span>Money<span class="token punctuation">;</span>Coffee latte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPrice</span><span class="token punctuation">(</span>Money<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>CurrencyUnit<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"CNY"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然对应的还有很多要配置的，money和long之间的转换，在Mybatis中也要配置。</p><h2 id="Nosql的了解"><a href="#Nosql的了解" class="headerlink" title="Nosql的了解"></a>Nosql的了解</h2><p>一般分为四大类：</p><ol><li>k-v类型的 ，比如redis</li><li>文档类型的，比如mongoDB</li><li>列存储的，HBase</li><li>图数据库，比如Ne04j</li></ol>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录4</title>
      <link href="/2023/09/01/xiang-mu-zi-xue-ji-lu-4/"/>
      <url>/2023/09/01/xiang-mu-zi-xue-ji-lu-4/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录4"><a href="#项目自学记录4" class="headerlink" title="项目自学记录4"></a>项目自学记录4</h1><h2 id="根据另外一张表中出现的次数排序"><a href="#根据另外一张表中出现的次数排序" class="headerlink" title="根据另外一张表中出现的次数排序"></a>根据另外一张表中出现的次数排序</h2><p>背景：<br><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%954/image/image-20230814083849425.png"></p><p>主表是风险场景，要根据风险报告中的出现次数排序，可以出现0次的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s<span class="token punctuation">.</span>scene_id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>scene_name <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>scene_id<span class="token punctuation">)</span> <span class="token keyword">as</span> count        <span class="token keyword">from</span> rc_scene s        <span class="token keyword">left</span> <span class="token keyword">join</span> rc_risk_report r <span class="token keyword">on</span> s<span class="token punctuation">.</span>scene_id  <span class="token operator">=</span> r<span class="token punctuation">.</span>scene_id        <span class="token keyword">where</span> s<span class="token punctuation">.</span>company_id <span class="token operator">=</span><span class="token number">100</span>        <span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>scene_id         <span class="token keyword">order</span> <span class="token keyword">by</span> count <span class="token keyword">desc</span></code></pre><p>如果是不出现0次的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>scene_id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>scene_name  <span class="token keyword">FROM</span> rc_scene s  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>      <span class="token keyword">SELECT</span> scene_id <span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count      <span class="token keyword">FROM</span> rc_risk_report r     <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> scene_id  <span class="token punctuation">)</span> r <span class="token keyword">ON</span> s<span class="token punctuation">.</span>scene_id <span class="token operator">=</span> r<span class="token punctuation">.</span>scene_id <span class="token keyword">where</span> s<span class="token punctuation">.</span>company_id <span class="token operator">=</span><span class="token number">100</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> r<span class="token punctuation">.</span>count <span class="token keyword">DESC</span><span class="token punctuation">;</span></code></pre><h2 id="关于给数组添加元素（引用的问题⭐）"><a href="#关于给数组添加元素（引用的问题⭐）" class="headerlink" title="关于给数组添加元素（引用的问题⭐）"></a>关于给数组添加元素（引用的问题⭐）</h2><p>如果是下面这样，会导致所有添加的元素都一样</p><pre class=" language-java"><code class="language-java"> GeneratorReportVO<span class="token punctuation">.</span>RcModel rcModel1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GeneratorReportVO<span class="token punctuation">.</span>RcModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>RcModelDomain rc1<span class="token operator">:</span>modelList<span class="token punctuation">)</span><span class="token punctuation">{</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>rc1<span class="token punctuation">,</span>rcModel1<span class="token punctuation">)</span><span class="token punctuation">;</span>            rcModelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rcModel1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>因为是引用的地址</p><p>所以应该把这个临时的new的对象放到for循环里</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">for</span><span class="token punctuation">(</span>RcModelDomain rc1<span class="token operator">:</span>modelList<span class="token punctuation">)</span><span class="token punctuation">{</span>            GeneratorReportVO<span class="token punctuation">.</span>RcModel rcModel1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GeneratorReportVO<span class="token punctuation">.</span>RcModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>rc1<span class="token punctuation">,</span>rcModel1<span class="token punctuation">)</span><span class="token punctuation">;</span>            rcModelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rcModel1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="前端传Date失败"><a href="#前端传Date失败" class="headerlink" title="前端传Date失败"></a>前端传Date失败</h2><p>因为前端传的是2023-08-17的格式</p><p>所以后端要在定义类的属性的时候</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LocalDate birthday<span class="token punctuation">;</span></code></pre><h2 id="maven运行机制"><a href="#maven运行机制" class="headerlink" title="maven运行机制"></a>maven运行机制</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%954/image/qq_pic_merged_1692758472942.jpg"></p><p>我们的项目有一个启动项目（左边）和八个子模块。</p><p>在子模块里写代码，然后Intsall,然后再把主模块重新启动。</p><p>主模块的Java被编译成target下的class文件，再结合本地maven仓库里的lib库，就是项目了。</p><p>install可以把子模块里的东西搞到本地Maven的lib里。</p><p>一般不要随便刷maven，因为这是从私服里刷，可能会引入一些旧的依赖到lib里。</p><h2 id="关于select-的一个弊端"><a href="#关于select-的一个弊端" class="headerlink" title="关于select *的一个弊端"></a>关于select *的一个弊端</h2><p>如果数据库字段发生了改变，而实体类没变。会导致mapper的映射失败。因为查出来的东西不知道要塞到哪里去。</p><p>所以建议只写查的具体字段。</p><p>好像用map接可以避免一些问题。</p><h2 id="生成发票的难点解决（思维问题⭐）"><a href="#生成发票的难点解决（思维问题⭐）" class="headerlink" title="生成发票的难点解决（思维问题⭐）"></a>生成发票的难点解决（思维问题⭐）</h2><p>这个困难搞了我9天，第二周的周五才想出来。</p><p>因为要生成多页的ofd.而我手上的税局的底层模板(xml)有5个文件夹+3个xml</p><p>我唯一的多页发票是2个文件夹+3个xml</p><p>而且xml里格式也不一样。很难搞。</p><p>所以不从底层的xml下手。<strong>直接生成多个ofd,再对其进行合并。就可以得到一个多页的ofd了。</strong></p><p>合并代码：</p><pre class=" language-java"><code class="language-java">Path dst<span class="token operator">=</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src/main/generator/wzh.ofd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 提供待合并文件。</span>Path d1Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"main"</span><span class="token punctuation">,</span><span class="token string">"generator"</span><span class="token punctuation">,</span><span class="token string">"wzh0.ofd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Path d2Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"main"</span><span class="token punctuation">,</span><span class="token string">"generator"</span><span class="token punctuation">,</span><span class="token string">"wzh1.ofd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 创建合并对象</span><span class="token keyword">try</span> <span class="token punctuation">(</span>OFDMerger ofdMerger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OFDMerger</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 4. 添加合并文档和页面。</span>    ofdMerger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d1Path<span class="token punctuation">)</span><span class="token punctuation">;</span>    ofdMerger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d2Path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="将数字double转为String"><a href="#将数字double转为String" class="headerlink" title="将数字double转为String"></a>将数字double转为String</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 数字格式化(四舍五入)     *     * @param value 数值     * @param digit 小数位数     * @return 字符串类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%."</span><span class="token operator">+</span>digit<span class="token operator">+</span><span class="token string">"f"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h2><p>当想要忽略某个字段的,不让其映射数据库时候 可以使此注解@Transient</p><h2 id="Length"><a href="#Length" class="headerlink" title="@Length"></a>@Length</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"名字不能超过5位"</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个校验，在controller调用的时候用.比如一个controller的函数</p><p>void func(@RequestBody @Value Student1 stu){}</p><p>要加@Value注解，则会校验前端传过来的数据，不满足长度规则，则不会执行方法体内的方法，返回报错异常。</p><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="@Pattern"></a>@Pattern</h2><p>写正则表达式，下面的值必须满足正则表达式的规则</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"蓝字发票标志不可为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"[01]"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"蓝字发票标志只能是 0：蓝字发票，1：红字发票"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String lzfpbz<span class="token punctuation">;</span></code></pre><p>名称(中文字符、 字母、数字)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp<span class="token operator">=</span><span class="token string">"^[\u4e00-\u9fa5_a-zA-Z0-9]+$"</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"公司名称只能输入中文字符 字母、数字"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><p>用户名必须要有一个小写字母，一个大写字母和一个数字，并且是6-20位</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[A-Za-z0-9]{6,20}$"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名错误"</span><span class="token punctuation">)</span></code></pre><p>其他正则表达式，诸如数字校验，字符串校验，月份时间校验，Email校验，汉字校验，联系电话校验，密码校验。可以看<a href="https://blog.csdn.net/lk14478/article/details/111866635">这篇文章</a></p><h2 id="关于子类重写属性变量一事"><a href="#关于子类重写属性变量一事" class="headerlink" title="关于子类重写属性变量一事"></a>关于子类重写属性变量一事</h2><p>如果是同名但是不同属性值，是不行的。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%954/image/image-20230831093125200.png"></p><p>会生成两个getList方法，并且返回类型不一样。一个是返回List<String>,  一个是返回List<int></p><p>即使当时的业务场景是good2 extends good1,也不行</p><p>Error:(10, 17) java: me.Son中的getList()无法覆盖me.Father中的getList()<br>  返回类型java.util.List&lt;me.good2&gt;与java.util.List&lt;me.good1&gt;不兼容</p><p>所以说，不能同名。</p><h2 id="子类反射的结果"><a href="#子类反射的结果" class="headerlink" title="子类反射的结果"></a>子类反射的结果</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Father f1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Son</span>    <span class="token punctuation">}</span></code></pre><p>子类反射得到的类，还是子类。</p><h2 id="不用instanceof写if-else-用反射-策略模式-自定义函数式接口-⭐⭐⭐⭐⭐"><a href="#不用instanceof写if-else-用反射-策略模式-自定义函数式接口-⭐⭐⭐⭐⭐" class="headerlink" title="不用instanceof写if-else,用反射+策略模式+自定义函数式接口(⭐⭐⭐⭐⭐)"></a>不用instanceof写if-else,用反射+策略模式+自定义函数式接口(⭐⭐⭐⭐⭐)</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">CustomBiConsumer</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FapiaoOfdClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例级配置</span>    <span class="token keyword">private</span> InstanceConfiguration configuration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 私有构造函数     */</span>    <span class="token keyword">private</span> <span class="token function">FapiaoOfdClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        configuration <span class="token operator">=</span> InstanceConfiguration<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取实例化后的单例对象     * @return 电子发票OFD客户端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FapiaoOfdClient <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FapiaoOfdClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> CustomBiConsumer<span class="token operator">&lt;</span>EInvoiceDomain<span class="token punctuation">,</span> ZipOutputStream<span class="token operator">>></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeCreateOfd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里创建一个instance的目的是：不让createOfd声明为static函数</span>        BasicServiceFaPiaoOfdClient instance <span class="token operator">=</span> BasicServiceFaPiaoOfdClient<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"EInvoiceDomain"</span><span class="token punctuation">,</span>instance<span class="token operator">:</span><span class="token operator">:</span>createOfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建OFD文件     *     * @param invoiceInfoDomain 发票信息     * @param zos               输出流     * @throws IOException IO异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOfd</span><span class="token punctuation">(</span>EInvoiceDomain invoiceInfoDomain<span class="token punctuation">,</span> ZipOutputStream zos<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token function">beforeCreateOfd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String category<span class="token operator">=</span>invoiceInfoDomain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>invoiceInfoDomain<span class="token punctuation">,</span>zos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>首先自定义了一个函数式接口(Java8新特性），两个参数CustomBiConsumer</p><p>这个函数式接口作为hashMap的value值</p><p>然后往hashmap里塞值，key: 类名(字符串)   value: 函数</p><p>通过反射得到对象的类名</p><p>然后根据hashmap和key值来调用对应的value值，也就是对应的函数。</p><p>以下红色的是我写的核心代码</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%954/image/image-20230831162020129.png"></p><p>后面有什么新增的类，直接在beforeCreateOfd()里增加两行代码就行。不用修改其他的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-并发学习记录1</title>
      <link href="/2023/08/30/java-ba-gu-wen-bing-fa-xue-xi-ji-lu-1/"/>
      <url>/2023/08/30/java-ba-gu-wen-bing-fa-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><strong>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</strong></p><p><strong>并行（parallel）是同一时间动手做（doing）多件事情的能力</strong>（同一时刻）</p><h3 id="创建线程的四种方式"><a href="#创建线程的四种方式" class="headerlink" title="创建线程的四种方式"></a>创建线程的四种方式</h3><p>共有四种方式可以创建线程，分别是：继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程</p><h3 id="runnable-和-callable-有什么区别"><a href="#runnable-和-callable-有什么区别" class="headerlink" title="runnable 和 callable 有什么区别"></a>runnable 和 callable 有什么区别</h3><ol><li>Runnable 接口run方法没有返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</li><li>Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</li><li>Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛</li></ol><h3 id="线程的-run-和-start-有什么区别"><a href="#线程的-run-和-start-有什么区别" class="headerlink" title="线程的 run()和 start()有什么区别"></a>线程的 run()和 start()有什么区别</h3><p>start(): 用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。start方法只能被调用一次。</p><p>run(): 封装了要被线程执行的代码，可以被调用多次。</p><h3 id="线程包括哪些状态，状态之间是如何变化的"><a href="#线程包括哪些状态，状态之间是如何变化的" class="headerlink" title="线程包括哪些状态，状态之间是如何变化的"></a>线程包括哪些状态，状态之间是如何变化的</h3><p>线程的状态可以参考JDK中的Thread类中的枚举State</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 尚未启动的线程的线程状态         */</span>        NEW<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 可运行线程的线程状态。处于可运行状态的线程正在 Java 虚拟机中执行，但它可能正在等待来自 * 操作系统的其他资源，例如处理器。         */</span>        RUNNABLE<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 线程阻塞等待监视器锁的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法或在调          * 用Object.wait后重新进入同步块/方法。         */</span>        BLOCKED<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 等待线程的线程状态。由于调用以下方法之一，线程处于等待状态：        * Object.wait没有超时         * 没有超时的Thread.join         * LockSupport.park         * 处于等待状态的线程正在等待另一个线程执行特定操作。         * 例如，一个对对象调用Object.wait()的线程正在等待另一个线程对该对象调用Object.notify()* 或Object.notifyAll() 。已调用Thread.join()的线程正在等待指定线程终止。         */</span>        WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 具有指定等待时间的等待线程的线程状态。由于以指定的正等待时间调用以下方法之一，线程处于定          * 时等待状态：        * Thread.sleep        * Object.wait超时        * Thread.join超时        * LockSupport.parkNanos        * LockSupport.parkUntil         * &lt;/ul>         */</span>        TIMED_WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 已终止线程的线程状态。线程已完成执行         */</span>        TERMINATED<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>状态之间是如何变化的</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230503203629212.png"></p><p>分别是</p><ul><li>新建<ul><li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li><li>此时未与操作系统底层线程关联</li></ul></li><li>可运行<ul><li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li><li>此时与底层线程关联，由操作系统调度执行</li></ul></li><li>终结<ul><li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li><li>此时会取消与底层线程关联</li></ul></li><li>阻塞<ul><li>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li><li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li></ul></li><li>等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li></ul></li><li>有时限等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li></ul></li></ul><h3 id="在-java-中-wait-和-sleep-方法的不同？"><a href="#在-java-中-wait-和-sleep-方法的不同？" class="headerlink" title="在 java 中 wait 和 sleep 方法的不同？"></a>在 java 中 wait 和 sleep 方法的不同？</h3><p>共同点</p><ul><li>wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</li></ul><p>不同点</p><ul><li><p>方法归属不同</p><ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</li></ul></li><li><p>醒来时机不同</p><ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li>wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul></li><li><p>锁特性不同（重点）</p><ul><li>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</li><li>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）</li><li>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）</li></ul></li></ul><pre class=" language-java"><code class="language-java">Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"interrupted..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="如何停止一个正在运行的线程？"><a href="#如何停止一个正在运行的线程？" class="headerlink" title="如何停止一个正在运行的线程？"></a>如何停止一个正在运行的线程？</h3><ul><li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li><li>使用interrupt方法中断线程</li></ul><p>代码参考如下：</p><p>① <strong>使用退出标志，使线程正常退出</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterrupt1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 线程执行的退出标记</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread...run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建MyThread对象</span>        MyInterrupt1 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterrupt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程休眠6秒</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更改标记为true</span>        t1<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>使用interrupt方法中断线程</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterrupt3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.打断阻塞的线程</span>        <span class="token comment" spellcheck="true">/*Thread t1 = new Thread(()->{            System.out.println("t1 正在运行...");            try {                Thread.sleep(5000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }, "t1");        t1.start();        Thread.sleep(500);        t1.interrupt();        System.out.println(t1.isInterrupted());*/</span>        <span class="token comment" spellcheck="true">//2.打断正常的线程</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打断状态："</span><span class="token operator">+</span>interrupted<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打断阻塞的线程，会报异常。打断正常的线程没事。</p><h2 id="并发安全"><a href="#并发安全" class="headerlink" title="并发安全"></a>并发安全</h2><h3 id="synchronized关键字的底层原理"><a href="#synchronized关键字的底层原理" class="headerlink" title="synchronized关键字的底层原理"></a>synchronized关键字的底层原理</h3><p>synchronized同步基于的是Monitor监视锁来实现的,<code>monitor</code>另一个名字叫做管程</p><p><strong><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令。</strong>当执行 <code>monitorenter</code> 指令时，线程试图获取锁也就是获取 <strong>对象监视器 <code>monitor</code></strong> 的持有权。其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p><strong>不过两者的本质都是对对象监视器 monitor 的获取。</strong></p><blockquote><p>另外，<code>wait/notify</code>等方法也依赖于<code>monitor</code>对象，这就是为什么只有在同步的块或者方法中才能调用<code>wait/notify</code>等方法，否则会抛出<code>java.lang.IllegalMonitorStateException</code>的异常的原因</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230830110547540.png"></p><h3 id="synchronized的锁升级"><a href="#synchronized的锁升级" class="headerlink" title="synchronized的锁升级"></a>synchronized的锁升级</h3><p>Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230830111616821.png"></p><p>一旦锁发生了竞争，都会升级为重量级锁。  锁只能升级，不能降级。</p><h3 id="JMM-Java内存模型"><a href="#JMM-Java内存模型" class="headerlink" title="JMM(Java内存模型)"></a>JMM(Java内存模型)</h3><p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230504181638237.png"></p><p>特点：</p><ol><li><p>所有的共享变量都存储于主内存(计算机的RAM)这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p></li><li><p>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。</p></li><li><p>线程对变量的所有的操作(读，写)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存完成。</p></li></ol><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS的全称是： Compare And Swap(比较再交换)，它体现的一种乐观锁的思想，在无锁情况下保证线程操作共享数据的原子性。</p><p>在JUC（ java.util.concurrent ）包下实现的很多类都用到了CAS操作</p><ul><li>AbstractQueuedSynchronizer（AQS框架）</li><li>AtomicXXX类</li></ul><blockquote><p>一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当旧的预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。如果CAS操作失败，通过自旋的方式等待并再次尝试，直到成功</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230830134828544.png"></p><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架，它是构建锁或者其他同步组件的基础框架</p><p>AQS与Synchronized的区别</p><table><thead><tr><th><strong>synchronized</strong></th><th><strong>AQS</strong></th></tr></thead><tbody><tr><td>关键字，c++ 语言实现</td><td>java  语言实现</td></tr><tr><td>悲观锁，自动释放锁</td><td>悲观锁，手动开启和关闭</td></tr><tr><td>锁竞争激烈都是重量级锁，性能差</td><td>锁竞争激烈的情况下，提供了多种解决方案</td></tr></tbody></table><p>AQS常见的实现类</p><ul><li>ReentrantLock      阻塞式锁</li><li>Semaphore        信号量</li><li>CountDownLatch   倒计时锁</li></ul><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><ul><li>在AQS中维护了一个使用了volatile修饰的state属性来表示资源的状态，0表示无锁，1表示有锁</li><li>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</li><li>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505083840046.png"></p><blockquote><ul><li>线程0来了以后，去尝试修改state属性，如果发现state属性是0，就修改state状态为1，表示线程0抢锁成功</li><li>线程1和线程2也会先尝试修改state属性，发现state的值已经是1了，有其他线程持有锁，它们都会到FIFO队列中进行等待，</li><li>FIFO是一个双向队列，head属性表示头结点，tail表示尾结点</li></ul></blockquote><p><strong>如果多个线程共同去抢这个资源是如何保证原子性的呢？</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505084451193.png"></p><p>在去修改state状态的时候，使用的cas自旋锁来保证原子性，确保只能有一个线程修改成功，修改失败的线程将会进入FIFO队列中等待</p><p><strong>AQS是公平锁吗，还是非公平锁？</strong></p><ul><li><p>新的线程与队列中的线程共同来抢资源，是非公平锁</p></li><li><p>新的线程到队列中等待，只让队列中的head线程获取锁，是公平锁</p></li></ul><blockquote><p>比较典型的AQS实现类ReentrantLock，它默认就是非公平锁，新的线程与队列中的线程共同来抢资源</p></blockquote><h3 id="ReentrantLock的实现原理"><a href="#ReentrantLock的实现原理" class="headerlink" title="ReentrantLock的实现原理"></a>ReentrantLock的实现原理</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>ReentrantLock翻译过来是可重入锁，相对于synchronized它具备以下特点：</p><ul><li><p>可中断</p></li><li><p>可以设置超时时间</p></li><li><p>可以设置公平锁</p></li><li><p>支持多个条件变量</p></li><li><p>与synchronized一样，都支持重入</p></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505091736569.png"></p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>ReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似</p><p>构造方法接受一个可选的公平参数（默认非公平锁），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高，在许多线程访问的情况下，公平锁表现出较低的吞吐量。</p><p>查看ReentrantLock源码中的构造方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505091827720.png"></p><p>提供了两个构造方法，不带参数的默认为非公平</p><p>如果使用带参数的构造函数，并且传的值为true，则是公平锁</p><p>其中NonfairSync和FairSync这两个类父类都是Sync</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505092151244.png"></p><p>而Sync的父类是AQS，所以可以得出ReentrantLock底层主要实现就是基于AQS来实现的</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505091833629.png"></p><p><strong>工作流程</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505092340431.png"></p><ul><li><p>线程来抢锁后使用cas的方式修改state状态，修改状态成功为1，则让exclusiveOwnerThread属性指向当前线程，获取锁成功</p></li><li><p>假如修改状态失败，则会进入双向队列中等待，head指向双向队列头部，tail指向双向队列尾部</p></li><li><p>当exclusiveOwnerThread为null的时候，则会唤醒在双向队列中等待的线程</p></li><li><p>公平锁则体现在按照先后顺序获取锁，非公平体现在不在排队的线程也可以抢锁</p></li></ul><h3 id="synchronized和Lock的区别"><a href="#synchronized和Lock的区别" class="headerlink" title="synchronized和Lock的区别"></a>synchronized和Lock的区别</h3><ul><li>语法层面<ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li><li>使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁</li></ul></li><li>功能层面<ul><li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量</li><li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li></ul></li><li>性能层面<ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul></li></ul><h3 id="synchronized-和-volatile-有什么区别？"><a href="#synchronized-和-volatile-有什么区别？" class="headerlink" title="synchronized 和 volatile 有什么区别？"></a>synchronized 和 volatile 有什么区别？</h3><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul><li><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</li><li><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</li><li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性</li></ul><h3 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h3><p><strong>死锁</strong>：一个线程需要同时获取多把锁，这时就容易发生死锁</p><blockquote><p>例如：</p><p>t1 线程获得A对象锁，接下来想获取B对象的锁</p><p>t2 线程获得B对象锁，接下来想获取A对象的锁 </p></blockquote><h3 id="死锁诊断"><a href="#死锁诊断" class="headerlink" title="死锁诊断"></a>死锁诊断</h3><p>当程序出现了死锁现象，我们可以使用jdk自带的工具：jps和 jstack</p><p>步骤如下：</p><p>第一：查看运行的线程</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20220902171426738.png"></p><p>第二：使用jstack查看线程运行的情况，下图是截图的关键信息</p><p>运行命令：<code>jstack -l 46032</code></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20220902172229567.png"></p><p><strong>其他解决工具，可视化工具</strong></p><ul><li>jconsole</li></ul><p>用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具</p><p>打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行</p><ul><li>VisualVM：故障处理工具</li></ul><p>能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈</p><p>打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>下面这段代码会死循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForeverLoop</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"modify stop to true..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stopped... c:"</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为在JVM虚拟机中有一个JIT（即时编辑器）给代码做了优化。将stop给替换成了true</p><p>在修饰<code>stop</code>变量的时候加上<code>volatile</code>,表示当前代码禁用了即时编辑器，问题就可以解决，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><h4 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h4><p>先执行actor1中第二行代码，然后执行actor2获取结果—&gt;1,0(发生了指令重排序，影响结果)</p><p>应该添加读屏障和写屏障</p><p>在变量上添加volatile，禁止指令重排序，则可以解决问题</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505082835588.png"></p><p>屏障添加的示意图</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505082923729.png"></p><ul><li>写操作加的屏障是阻止上方其它写操作越过屏障排到volatile变量写之下</li><li>读操作加的屏障是阻止下方其它读操作越过屏障排到volatile变量读之上</li></ul><p>总结一个volatile使用的小妙招：</p><ul><li>写变量让volatile修饰的变量的在代码最后位置</li><li>读变量让volatile修饰的变量的在代码最开始位置</li></ul><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>采用 CAS + Synchronized来保证并发安全进行实现</p><ul><li>CAS控制数组节点的添加    (在判断数组中当前位置为null的时候，使用CAS来把这个新的Node写入数组中对应的位置)</li><li>synchronized只锁定当前链表或红黑二叉树的首节点，只要hash不冲突，就不会产生并发的问题 , 效率得到提升</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505093507265.png"></p><h3 id="导致并发程序出现问题的根本原因"><a href="#导致并发程序出现问题的根本原因" class="headerlink" title="导致并发程序出现问题的根本原因"></a>导致并发程序出现问题的根本原因</h3><p>Java并发编程三大特性</p><ul><li><p>原子性</p></li><li><p>可见性</p></li><li><p>有序性</p></li></ul><h4 id="（1）原子性"><a href="#（1）原子性" class="headerlink" title="（1）原子性"></a>（1）原子性</h4><p>一个线程在CPU中操作不可暂停，也不可中断，要不执行完成，要不不执行</p><p>比如，如下代码能保证原子性吗？</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505205200628.png"></p><p>以上代码会出现超卖或者是一张票卖给同一个人，执行并不是原子性的</p><p>解决方案：</p><p>1.synchronized：同步加锁</p><p>2.JUC里面的lock：加锁</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505210853493.png"></p><h4 id="（2）内存可见性"><a href="#（2）内存可见性" class="headerlink" title="（2）内存可见性"></a>（2）内存可见性</h4><p>内存可见性：让一个线程对共享变量的修改对另一个线程可见</p><p>比如，以下代码不能保证内存可见性</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505211002252.png"></p><p>解决方案：</p><ul><li><p>synchronized</p></li><li><p>volatile（推荐）</p></li><li><p>LOCK</p></li></ul><h4 id="（3）有序性"><a href="#（3）有序性" class="headerlink" title="（3）有序性"></a>（3）有序性</h4><p>指令重排：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的</p><p>还是之前的例子，如下代码：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505211209336.png"></p><p>解决方案：</p><ul><li>volatile</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="线程池的核心参数和执行流程"><a href="#线程池的核心参数和执行流程" class="headerlink" title="线程池的核心参数和执行流程"></a>线程池的核心参数和执行流程</h3><p>线程池核心参数主要参考ThreadPoolExecutor这个类的7个参数的构造函数</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505220514872.png"></p><ul><li><p>corePoolSize 核心线程数目</p></li><li><p>maximumPoolSize 最大线程数目 &#x3D; (核心线程+救急线程的最大数目)</p></li><li><p>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</p></li><li><p>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</p></li><li><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p></li><li><p>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</p></li><li><p>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略</p></li></ul><p><strong>工作流程</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505220701835.png"></p><blockquote><p>1，任务在提交的时候，首先判断核心线程数是否已满，如果没有满则直接添加到工作线程执行</p><p>2，如果核心线程数满了，则判断阻塞队列是否已满，如果没有满，当前任务存入阻塞队列</p><p>3，如果阻塞队列也满了，则判断线程数是否小于最大线程数，如果满足条件，则使用临时线程执行任务</p><p>如果核心或临时线程执行完成任务后会检查阻塞队列中是否有需要执行的线程，如果有，则使用非核心线程执行任务</p><p>4，如果所有线程都在忙着（核心线程+临时线程），则走拒绝策略</p></blockquote><p>拒绝策略：</p><p>1.AbortPolicy：直接抛出异常，默认策略；</p><p>2.CallerRunsPolicy：用调用者所在的线程来执行任务；</p><p>3.DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p><p>4.DiscardPolicy：直接丢弃任务；</p><p>参考代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThreadPoolExecutor</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> duration<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyTask</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">MyTask</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">long</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>duration <span class="token operator">=</span> duration<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                LoggerUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"myThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"running..."</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"MyTask("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        AtomicInteger c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayBlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolExecutor threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                queue<span class="token punctuation">,</span>                r <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"myThread"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">3600000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3600000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token number">3600000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showState</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span>ArrayBlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> queue<span class="token punctuation">,</span> ThreadPoolExecutor threadPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Runnable runnable <span class="token operator">:</span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Field callable <span class="token operator">=</span> FutureTask<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                callable<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object adapter <span class="token operator">=</span> callable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.concurrent.Executors$RunnableAdapter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Field task <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                task<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object o <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        LoggerUtils<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"pool size: {}, queue: {}"</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="线程池中有哪些常见的阻塞队列"><a href="#线程池中有哪些常见的阻塞队列" class="headerlink" title="线程池中有哪些常见的阻塞队列"></a>线程池中有哪些常见的阻塞队列</h3><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p><p>比较常见的有4个，用的最多是ArrayBlockingQueue和LinkedBlockingQueue</p><p>1.ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。</p><p>2.LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。</p><p>3.DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的</p><p>4.SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p><p><strong>ArrayBlockingQueue的LinkedBlockingQueue区别</strong></p><table><thead><tr><th><strong>LinkedBlockingQueue</strong></th><th><strong>ArrayBlockingQueue</strong></th></tr></thead><tbody><tr><td>默认无界，支持有界</td><td>强制有界</td></tr><tr><td>底层是链表</td><td>底层是数组</td></tr><tr><td>是懒惰的，创建节点的时候添加数据</td><td>提前初始化 Node  数组</td></tr><tr><td>入队会生成新 Node</td><td>Node需要是提前创建好的</td></tr><tr><td>两把锁（头尾）</td><td>一把锁</td></tr></tbody></table><p>左边是LinkedBlockingQueue加锁的方式，右边是ArrayBlockingQueue加锁的方式</p><ul><li>LinkedBlockingQueue读和写各有一把锁，性能相对较好</li><li>ArrayBlockingQueue只有一把锁，读和写公用，性能相对于LinkedBlockingQueue差一些</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505221424359.png"></p><h3 id="如何确定核心线程数"><a href="#如何确定核心线程数" class="headerlink" title="如何确定核心线程数"></a>如何确定核心线程数</h3><p>在设置核心线程数之前，需要先熟悉一些执行线程池执行任务的类型</p><ul><li>IO密集型任务</li></ul><p>一般来说：文件读写、DB读写、网络请求等</p><p>推荐：核心线程数大小设置为2N+1    （N为计算机的CPU核数）</p><ul><li>CPU密集型任务</li></ul><p>一般来说：计算型代码、Bitmap转换、Gson转换等</p><p>推荐：核心线程数大小设置为N+1    （N为计算机的CPU核数）</p><p>java代码查看CPU核数</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505221837189.png"></p><h3 id="线程池的种类有哪些"><a href="#线程池的种类有哪些" class="headerlink" title="线程池的种类有哪些"></a>线程池的种类有哪些</h3><p>在java.util.concurrent.Executors类中提供了大量创建连接池的静态方法，常见就有四种</p><ol><li><p>创建使用固定线程数的线程池</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505221959259.png"></p></li><li><p>单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505222050294.png"></p></li><li><p>可缓存线程池</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505222126391.png"></p></li><li><p>提供了“延迟”和“周期执行”功能的ThreadPoolExecutor。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505222203615.png"></p></li></ol><p>但是我们不建议用上面的，不建议用Executors创建线程池，希望用ThreadPoolExecutor的方法，自己调整参数，规避资源耗尽的风险。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="CountDownLatch、Future"><a href="#CountDownLatch、Future" class="headerlink" title="CountDownLatch、Future"></a>CountDownLatch、Future</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230831103126612.png"></p><p>示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化了一个倒计时锁 参数为 3</span>        CountDownLatch latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-begin..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//count--</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-end..."</span> <span class="token operator">+</span>latch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-begin..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//count--</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-end..."</span> <span class="token operator">+</span>latch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-begin..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//count--</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-end..."</span> <span class="token operator">+</span>latch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待其他线程完成</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-wait end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="案例一（ES批量导入）"><a href="#案例一（ES批量导入）" class="headerlink" title="案例一（ES批量导入）"></a>案例一（ES批量导入）</h3><p>在我们项目上线之前，我们需要把数据库中的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），当时我就想到可以使用线程池的方式导入，利用CountDownLatch来控制，就能避免一次性加载过多，防止内存溢出</p><p>整体流程就是通过CountDownLatch+线程池配合去执行</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230831103423024.png"></p><h3 id="案例二（数据汇总）"><a href="#案例二（数据汇总）" class="headerlink" title="案例二（数据汇总）"></a>案例二（数据汇总）</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230831103452404.png"></p><h3 id="案例三（异步调用）"><a href="#案例三（异步调用）" class="headerlink" title="案例三（异步调用）"></a>案例三（异步调用）</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230831103512890.png"></p><h3 id="如何控制某个方法允许并发访问线程的数量"><a href="#如何控制某个方法允许并发访问线程的数量" class="headerlink" title="如何控制某个方法允许并发访问线程的数量"></a>如何控制某个方法允许并发访问线程的数量</h3><p>Semaphore [ˈsɛməˌfɔr] 信号量，是JUC包下的一个工具类，我们可以通过其限制执行的线程数量，达到限流的效果</p><p>当一个线程执行时先通过其方法进行获取许可操作，获取到许可的线程继续执行业务逻辑，当线程执行完成后进行释放许可操作，未获取达到许可的线程进行等待或者直接结束。</p><p>Semaphore两个重要的方法</p><p>semaphore.acquire()： 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）</p><p>semaphore.release()：释放一个信号量，此时信号量个数+1</p><p>线程任务类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 创建 semaphore 对象</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 10个线程同时运行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 3. 获取许可</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 4. 释放许可</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal 主要功能有两个，第一个是可以实现资源对象的线程隔离，让每个线程各用各的资源对象，避免争用引发的线程安全问题，第二个是实现了线程内的资源共享.</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230831103933372.png"></p><h4 id="ThreadLocal基本使用"><a href="#ThreadLocal基本使用" class="headerlink" title="ThreadLocal基本使用"></a>ThreadLocal基本使用</h4><p>三个主要方法：</p><ul><li><p>set(value) 设置值</p></li><li><p>get() 获取值</p></li><li><p>remove() 清除值</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-after remove : "</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"itheima"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-after remove : "</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打印当前线程中本地内存中本地变量的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">" :"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清除本地内存中的本地变量</span>        threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ThreadLocal的原理"><a href="#ThreadLocal的原理" class="headerlink" title="ThreadLocal的原理"></a>ThreadLocal的原理</h4><p>在ThreadLocal内部维护了一个 ThreadLocalMap 类型的成员变量，用来存储资源对象。ThreadLocalMap中为每一个线程都维护了一个数组table(存储数据)</p><p>当我们调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</p><p>当调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</p><p>当调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</p><h3 id="ThreadLocal的内存泄露"><a href="#ThreadLocal的内存泄露" class="headerlink" title="ThreadLocal的内存泄露"></a>ThreadLocal的内存泄露</h3><p>其中key为使用弱引用的ThreadLocal实例，value为线程变量的副本</p><p>ThreadLocalMap 中的 key 是弱引用，值为强引用； key 会被GC 释放内存，关联 value 的内存并不会释放。建议主动 remove 释放 key，value</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230505224857538.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-常见集合学习记录1</title>
      <link href="/2023/08/27/java-ba-gu-wen-chang-jian-ji-he-xue-xi-ji-lu-1/"/>
      <url>/2023/08/27/java-ba-gu-wen-chang-jian-ji-he-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="常见集合"><a href="#常见集合" class="headerlink" title="常见集合"></a>常见集合</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="List和数组的转换"><a href="#List和数组的转换" class="headerlink" title="List和数组的转换"></a>List和数组的转换</h3><p>list转数组</p><p>这是深拷贝</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//要转换的list集合</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> testList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用toArray(T[] a)方法</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> testList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>testList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不能如下：</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String strings<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为toArray()返回的是一个Object[],  不能上转下</p><p>数组转list</p><p>可以使用asList()  或者 Collections.addAll()</p><p>不过你用asList，是浅拷贝，要受影响的。可以new一下，就不受影响了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下面的是浅拷贝，会受影响</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arrays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面的不是浅拷贝，是深拷贝</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arrays<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面是深拷贝</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> arrays<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="List的线程安全问题"><a href="#List的线程安全问题" class="headerlink" title="List的线程安全问题"></a>List的线程安全问题</h3><p>ArrayList和LinkedList都不是线程安全的</p><p>vector是线程安全的数组，但是其所有方法都加上锁了，效率很低</p><p>要实现List的线程安全,可以使用 Collections.synchronizedList,先看一下它的使用方法.</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Iterator i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Must be in synchronized block</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//foo(i.next());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>他的源码操作和vector类似，也是加锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>add()等方法的时候是加了synchronized关键字的,但是listIterator(),iterator()却没有加.所以在使用的时候需要加上synchronized.</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h3><ul><li>底层使用hash表数据结构，即数组+（链表 | 红黑树）</li><li>添加数据时，计算key的值确定元素在数组中的下标<br>key相同则替换<br>不同则存入链表或红黑树中</li><li>获取数据通过key的hash计算数组下标获取元素</li></ul><p>jdk1.7和jdk1.8的区别</p><p>JDK1.8之前采用的拉链法，数组+链表<br>JDK1.8之后采用数组+链表+红黑树，链表长度大于8且数组长度大于64则会从链表转化为红黑树</p><h3 id="HashMap的put方法的具体流程"><a href="#HashMap的put方法的具体流程" class="headerlink" title="HashMap的put方法的具体流程"></a>HashMap的put方法的具体流程</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230828190355821.png"></p><h3 id="讲一讲HashMap的扩容机制"><a href="#讲一讲HashMap的扩容机制" class="headerlink" title="讲一讲HashMap的扩容机制"></a>讲一讲HashMap的扩容机制</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230828190607873.png"></p><h3 id="hashMap的寻址算法"><a href="#hashMap的寻址算法" class="headerlink" title="hashMap的寻址算法"></a>hashMap的寻址算法</h3><ul><li>计算对象的 hashCode()</li><li>再进行调用 hash() 方法进行二次哈希， hashcode值右移16位再异或运算，让哈希分布更为均匀</li><li>最后 (capacity – 1) &amp; hash 得到索引</li></ul><h3 id="为何HashMap的数组长度一定是2的次幂？"><a href="#为何HashMap的数组长度一定是2的次幂？" class="headerlink" title="为何HashMap的数组长度一定是2的次幂？"></a>为何HashMap的数组长度一定是2的次幂？</h3><ul><li>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</li><li>扩容时重新计算索引效率更高： hash &amp; oldCap &#x3D;&#x3D; 0 的元素留在原来位置 ，否则新位置 &#x3D; 旧位置 + oldCap</li></ul><h3 id="hashmap在1-7情况下的多线程死循环问题"><a href="#hashmap在1-7情况下的多线程死循环问题" class="headerlink" title="hashmap在1.7情况下的多线程死循环问题"></a>hashmap在1.7情况下的多线程死循环问题</h3><p>在jdk1.7的hashmap中在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230828193103341.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230828193116678.png"></p><p>JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），尾插法，就避免了jdk7中死循环的问题。</p><h3 id="HashSet与HashMap的区别"><a href="#HashSet与HashMap的区别" class="headerlink" title="HashSet与HashMap的区别"></a>HashSet与HashMap的区别</h3><p>(1)HashSet实现了Set接口, 仅存储对象; HashMap实现了 Map接口, 存储的是键值对.</p><p>(2)HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230828191601056.png"></p><h3 id="HashTable与HashMap的区别"><a href="#HashTable与HashMap的区别" class="headerlink" title="HashTable与HashMap的区别"></a>HashTable与HashMap的区别</h3><p>主要区别：</p><table><thead><tr><th><strong>区别</strong></th><th><strong>HashTable</strong></th><th><strong>HashMap</strong></th></tr></thead><tbody><tr><td>数据结构</td><td>数组+链表</td><td>数组+链表+红黑树</td></tr><tr><td>是否可以为null</td><td>Key和value都不能为null</td><td>可以为null</td></tr><tr><td>hash算法</td><td>key的hashCode()</td><td>二次hash</td></tr><tr><td>扩容方式</td><td>当前容量翻倍 +1</td><td>当前容量翻倍</td></tr><tr><td>线程安全</td><td>同步(synchronized)的，线程安全</td><td>非线程安全</td></tr></tbody></table><p>在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性初探1</title>
      <link href="/2023/08/24/java8-xin-te-xing-chu-tan-1/"/>
      <url>/2023/08/24/java8-xin-te-xing-chu-tan-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性初探"><a href="#Java8新特性初探" class="headerlink" title="Java8新特性初探"></a>Java8新特性初探</h1><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><h3 id="一个最明显的排序使用"><a href="#一个最明显的排序使用" class="headerlink" title="一个最明显的排序使用"></a>一个最明显的排序使用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用 java 8 排序</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortUsingJava8</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h3 id="lambda表达式的语法特征"><a href="#lambda表达式的语法特征" class="headerlink" title="lambda表达式的语法特征"></a>lambda表达式的语法特征</h3><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li></ul><h3 id="用lambda表达式定义一些运算"><a href="#用lambda表达式定义一些运算" class="headerlink" title="用lambda表达式定义一些运算"></a>用lambda表达式定义一些运算</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Java8Tester tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Java8Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 类型声明</span>      MathOperation addition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 不用类型声明</span>      MathOperation subtraction <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 大括号中的返回语句</span>      MathOperation multiplication <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 没有大括号及返回语句</span>      MathOperation division <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> addition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 - 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> subtraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 x 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> multiplication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 / 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> division<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 不用括号</span>      GreetingService greetService1 <span class="token operator">=</span> message <span class="token operator">-</span><span class="token operator">></span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 用括号</span>      GreetingService greetService2 <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>              greetService1<span class="token punctuation">.</span><span class="token function">sayMessage</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      greetService2<span class="token punctuation">.</span><span class="token function">sayMessage</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">interface</span> <span class="token class-name">MathOperation</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">interface</span> <span class="token class-name">GreetingService</span> <span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">sayMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> MathOperation mathOperation<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> mathOperation<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Lambda 表达式主要用来定义行内执行的方法类型接口（例如，一个简单方法接口）。在上面例子中，我们使用各种类型的 Lambda 表达式来定义 MathOperation 接口的方法，然后我们定义了 operation 的执行。</li><li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予 Java 简单但是强大的函数化的编程能力。</li></ul><h3 id="lambda与final"><a href="#lambda与final" class="headerlink" title="lambda与final"></a>lambda与final</h3><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误</p><p>num实则自动为final变量了。同时lambda里不得声明与num同名的局部变量或参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Test</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>param <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  num =6;</span>        <span class="token comment" spellcheck="true">// Error:(9, 93) java: 从lambda 表达式引用的本地变量必须是最终变量或实际上的最终变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>方法引用通过方法的名字来指向一个方法。</p><p>方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p><p>方法引用使用一对冒号 <strong>::</strong> 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Baidu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Sina"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>就是类::方法，表示一个函数</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p><p>函数式接口可以被隐式转换为 lambda 表达式。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">GreetingService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>GreetingService greetService1 <span class="token operator">=</span> message <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Predicate&lt;Integer> predicate = n -> true</span>      <span class="token comment" spellcheck="true">// n 是一个参数传递到 Predicate 接口的 test 方法</span>      <span class="token comment" spellcheck="true">// n 如果存在则 test 方法返回 true</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出所有数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 传递参数 n</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token operator">></span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Predicate&lt;Integer> predicate1 = n -> n%2 == 0</span>      <span class="token comment" spellcheck="true">// n 是一个参数传递到 Predicate 接口的 test 方法</span>      <span class="token comment" spellcheck="true">// 如果 n%2 为 0 test 方法返回 true</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出所有偶数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token operator">></span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Predicate&lt;Integer> predicate2 = n -> n > 3</span>      <span class="token comment" spellcheck="true">// n 是一个参数传递到 Predicate 接口的 test 方法</span>      <span class="token comment" spellcheck="true">// 如果 n 大于 3 test 方法返回 true</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出大于 3 的所有数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Integer<span class="token operator">></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>Integer n<span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们有海量的类似于Predicate<T>的<a href="https://www.runoob.com/java/java8-functional-interfaces.html">接口</a></p><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p><strong>接口下面的普通函数不能有实现体。要想实现他，要定义为default或者 static方法</strong></p><p>print函数，如果是你类里自己实现了，就用类里的。如果想用接口的，要在前面加个  <strong>接口名.super.</strong></p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Vehicle vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vehicle<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">interface</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>   <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一辆车!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blowHorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按喇叭!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">interface</span> <span class="token class-name">FourWheeler</span> <span class="token punctuation">{</span>   <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一辆四轮车!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span><span class="token punctuation">,</span> FourWheeler <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Vehicle<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FourWheeler<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Vehicle<span class="token punctuation">.</span><span class="token function">blowHorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一辆汽车!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><h3 id="生成流stream"><a href="#生成流stream" class="headerlink" title="生成流stream()"></a>生成流stream()</h3><p>在 Java 8 中, 集合接口有两个方法来生成流：</p><ul><li><strong>stream()</strong> − 为集合创建串行流。</li><li><strong>parallelStream()</strong> − 为集合创建并行流</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> squaresList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> i <span class="token operator">-</span><span class="token operator">></span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取空字符串的数量</span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="parallelStream"><a href="#parallelStream" class="headerlink" title="parallelStream"></a>parallelStream</h3><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取空字符串的数量</span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h3><p>Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>String mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IntSummaryStatistics stats <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><pre class=" language-java"><code class="language-java">          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用 Java 8: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表: "</span> <span class="token operator">+</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>              count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string<span class="token operator">-</span><span class="token operator">></span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空字符串数量为: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>              count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串长度为 3 的数量为: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>              filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选后的列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>              mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span>              squaresList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> i <span class="token operator">-</span><span class="token operator">></span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Squares List: "</span> <span class="token operator">+</span> squaresList<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表: "</span> <span class="token operator">+</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>              IntSummaryStatistics stats <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 并行处理</span>      count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空字符串的数量为: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>数字平方排序（倒叙）输出。字符串转 map 输出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对应的平方数</span><span class="token comment" spellcheck="true">//        List&lt;Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> squaresList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">*</span> i<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> y <span class="token operator">-</span> x<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        squaresList.forEach(System.out::println);</span>        squaresList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"ba"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"cbb"</span><span class="token punctuation">,</span> <span class="token string">"bba"</span><span class="token punctuation">,</span> <span class="token string">"cab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> strMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strMap <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span> Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span> str <span class="token operator">-</span><span class="token operator">></span> strList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> str <span class="token operator">-</span><span class="token operator">></span> str <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                strMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-text"><code class="language-text">5026101010550::a1::ba2::bb3::abc4::cbb5::bba6::cab</code></pre><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>出发点是为了不显式进行nullpointer检查，有点臃肿了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         Java8Tester java8Tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Java8Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer value1 <span class="token operator">=</span> null<span class="token punctuation">;</span>      Integer value2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Optional.ofNullable - 允许传递为 null 参数</span>      Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> a <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span>      Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> b <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>java8Tester<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">public</span> Integer <span class="token function">sum</span><span class="token punctuation">(</span>Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> a<span class="token punctuation">,</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Optional.isPresent - 判断值是否存在</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个参数值存在: "</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个参数值存在: "</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span>      Integer value1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//Optional.get - 获取值，值需要存在</span>      Integer value2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value1 <span class="token operator">+</span> value2<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="新的JS引擎"><a href="#新的JS引擎" class="headerlink" title="新的JS引擎"></a>新的JS引擎</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptException<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         ScriptEngineManager scriptEngineManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ScriptEngine nashorn <span class="token operator">=</span> scriptEngineManager<span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String name <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span>      Integer result <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>         nashorn<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"print('"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         result <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> nashorn<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"10 + 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ScriptException e<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行脚本错误: "</span><span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java8新的日期API"><a href="#Java8新的日期API" class="headerlink" title="Java8新的日期API"></a>Java8新的日期API</h2><p>在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：</p><ul><li><strong>非线程安全</strong> − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。</li><li><strong>设计很差</strong> − Java的日期&#x2F;时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。</li><li><strong>时区处理麻烦</strong> − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</li></ul><p>Java 8 在 <strong>java.time</strong> 包下提供了很多新的 API。以下为两个比较重要的 API：</p><ul><li><strong>Local(本地)</strong> − 简化了日期时间的处理，没有时区的问题。</li><li><strong>Zoned(时区)</strong> − 通过制定的时区处理日期时间。</li></ul><p>新的java.time包涵盖了所有处理日期，时间，日期&#x2F;时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p><h3 id="本地化日期时间API"><a href="#本地化日期时间API" class="headerlink" title="本地化日期时间API"></a>本地化日期时间API</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取当前的日期时间</span>      LocalDateTime currentTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间: "</span> <span class="token operator">+</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当前时间: 2016-04-15T16:55:48.668</span>              LocalDate date1 <span class="token operator">=</span> currentTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1: "</span> <span class="token operator">+</span> date1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// date1: 2016-04-15</span>              Month month <span class="token operator">=</span> currentTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> day <span class="token operator">=</span> currentTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> seconds <span class="token operator">=</span> currentTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月: "</span> <span class="token operator">+</span> month <span class="token operator">+</span><span class="token string">", 日: "</span> <span class="token operator">+</span> day <span class="token operator">+</span><span class="token string">", 秒: "</span> <span class="token operator">+</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//月: APRIL, 日: 15, 秒: 48</span>              LocalDateTime date2 <span class="token operator">=</span> currentTime<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date2: "</span> <span class="token operator">+</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//date2: 2012-04-10T16:55:48.668</span>              <span class="token comment" spellcheck="true">// 12 december 2014</span>      LocalDate date3 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date3: "</span> <span class="token operator">+</span> date3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//date3: 2014-12-12</span>              <span class="token comment" spellcheck="true">// 22 小时 15 分钟</span>      LocalTime date4 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date4: "</span> <span class="token operator">+</span> date4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//date4: 22:15</span>              <span class="token comment" spellcheck="true">// 解析字符串</span>      LocalTime date5 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"20:15:30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date5: "</span> <span class="token operator">+</span> date5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//date5: 20:15:30</span>   <span class="token punctuation">}</span></code></pre><h3 id="使用时区的日期时间API"><a href="#使用时区的日期时间API" class="headerlink" title="使用时区的日期时间API"></a>使用时区的日期时间API</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取当前时间日期</span>      ZonedDateTime date1 <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2015-12-03T10:15:30+05:30[Asia/Shanghai]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1: "</span> <span class="token operator">+</span> date1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//date1: 2015-12-03T10:15:30+08:00[Asia/Shanghai]</span>              ZoneId id <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Paris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ZoneId: "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ZoneId: Europe/Paris</span>              ZoneId currentZone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当期时区: "</span> <span class="token operator">+</span> currentZone<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当期时区: Asia/Shanghai</span>   <span class="token punctuation">}</span></code></pre><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Java 8 内置了 Base64 编码的编码器和解码器。</p><p>Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：</p><ul><li><strong>基本：</strong>输出被映射到一组字符A-Za-z0-9+&#x2F;，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+&#x2F;。</li><li><strong>URL：</strong>输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</li><li><strong>MIME：</strong>输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。编码输出最后没有行分割。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 使用基本编码</span>         String base64encodedString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token string">"runoob?java8"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base64 编码字符串 (基本) :"</span> <span class="token operator">+</span> base64encodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 解码</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> base64decodedBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64encodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始字符串: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>base64decodedBytes<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         base64encodedString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token string">"runoob?java8"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base64 编码字符串 (URL) :"</span> <span class="token operator">+</span> base64encodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>                 StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>                 <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mimeBytes <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String mimeEncodedString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getMimeEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>mimeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base64 编码字符串 (MIME) :"</span> <span class="token operator">+</span> mimeEncodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>UnsupportedEncodingException e<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error :"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为</p><pre class=" language-text"><code class="language-text">Base64 编码字符串 (基本) :cnVub29iP2phdmE4原始字符串: runoob?java8Base64 编码字符串 (URL) :cnVub29iP2phdmE4Base64 编码字符串 (MIME) :NzcxODBmMDAtODc1NS00YTk5LThmYTctYjIyZGZhMDU1NzJhYmMxMDJhNTgtZDMwZi00NmIxLWIxNjktYzEzMmYzODQzNWViOGRiOGNkMjMtMzk1MS00ZjY2LWI3YzktNTg2MTdmM2Y5ZTIwNGQ1ODE3OTgtMzY2MC00YmY4LTllOTctZTMxNzU3MWZjYzU4NjE2MTRhM2QtNGJjZC00MDY5LWE5MDgtODlmZjQ0MjEzYTU0ZDk2ZjE0OWQtMWE5YS00MGNiLWI5MDctOTUyNDQzMzhiM2RkYjRjYTMwZTktYWYwOS00ZDZmLWI0MzAtMzc4M2I3NDRiMDNjMDM1MDE0MWUtMDBjZS00NDdlLThkYjktZjlmYWYxNWMxYmE5YTg3NmY4ZjctNzc2Mi00ZDRjLTk2ZGUtYjM5MDNmODBiOGVkZDFjMDgzN2QtZGFjYy00YWE1LWFlYzgtY2UwODcyNDM2MmIy</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-消息队列学习记录1</title>
      <link href="/2023/08/24/java-ba-gu-wen-xiao-xi-dui-lie-xue-xi-ji-lu-1/"/>
      <url>/2023/08/24/java-ba-gu-wen-xiao-xi-dui-lie-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>在哪些场景可能用到消息队列：</p><ul><li>异步发送（验证码、短信、邮件…）</li><li>MYSQL和Redis , ES之间的数据同步</li><li>分布式事务</li><li>削峰填谷</li></ul><h2 id="RabbitMQ-如何保证消息不丢失"><a href="#RabbitMQ-如何保证消息不丢失" class="headerlink" title="RabbitMQ-如何保证消息不丢失"></a>RabbitMQ-如何保证消息不丢失</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823110003222.png"></p><p><strong>第一个是开启生产者确认机制</strong>，确保生产者的消息能到达队列，如果报错可以先记录到日志中，再去修复数据</p><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功</p><p>消息失败之后如何处理呢？</p><ul><li>回调方法即时重发</li><li>记录日志</li><li>保存到数据库然后定时重发，成功发送后即刻删除表中的数据</li></ul><p><strong>第二个是开启持久化功能</strong>，确保消息未消费前在队列中不会丢失，其中的交换机、队列、和消息都要做持久化</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823110450167.png"></p><p><strong>第三个是开启消费者确认机制为auto</strong>，由spring确认消息处理成功后完成ack，当然也需要设置一定的重试次数，我们当时设置了3次，如果重试3次还没有收到消息，就将失败后的消息投递到异常交换机，交由人工处理</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823110532866.png"></p><h2 id="RabbitMQ-消费重复问题"><a href="#RabbitMQ-消费重复问题" class="headerlink" title="RabbitMQ-消费重复问题"></a>RabbitMQ-消费重复问题</h2><p>我们当时消费者是设置了自动确认机制，当服务还没来得及给MQ确认的时候，服务宕机了，导致服务重启之后，又消费了一次消息。这样就重复消费了（或者也可能是因为网络波动）</p><p>因为我们当时处理的支付（订单|业务唯一标识），它有一个业务的唯一标识，我们再处理消息时，先到数据库查询一下，这个数据是否存在，如果不存在，说明没有处理过，这个时候就可以正常处理这个消息了。如果已经存在这个数据了，就说明消息重复消费了，我们就不需要再消费了</p><p>解决方案：<br>每条消息设置一个唯一的标识id<br>幂等方案：【 分布式锁、数据库锁（悲观锁、乐观锁） 】</p><h2 id="RabbitMQ-死信交换机-x2F-延迟队列"><a href="#RabbitMQ-死信交换机-x2F-延迟队列" class="headerlink" title="RabbitMQ-死信交换机&#x2F;延迟队列"></a>RabbitMQ-死信交换机&#x2F;延迟队列</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823140038306.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823140047829.png"></p><p>延迟队列：进入队列的消息会被延迟消费的队列   延迟队列&#x3D;死信交换机+TTL（生存时间）</p><p>场景：超时订单、限时优惠、定时发布</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息堆积满了，最早的消息可能成为死信</li></ul><p>DelayExchange插件，需要安装在RabbitMQ中<br>RabbitMQ有一个官方的插件社区，地址为：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a> </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823145753634.png"></p><h2 id="RabbitMQ-消息堆积"><a href="#RabbitMQ-消息堆积" class="headerlink" title="RabbitMQ-消息堆积"></a>RabbitMQ-消息堆积</h2><p>解决消息堆积有三种种思路：</p><ul><li>增加更多消费者，提高消费速度</li><li>在消费者内开启线程池加快消息处理速度</li><li>扩大队列容积，提高堆积上限</li></ul><p>扩大队列容积可以使用RabbitMQ惰性队列。</p><ul><li>在声明队列的时候可以设置属性x-queue-mode为lazy，即为惰性队列</li><li>基于磁盘存储，消息上限高</li><li>性能比较稳定，但基于磁盘存储，受限于磁盘IO，时效性会降低</li></ul><p>惰性队列的流程特点：</p><p>①接收到消息后直接存入磁盘而非内存</p><p>②消费者要消费消息时才会从磁盘中读取并加载到内存</p><p>③支持数百万条的消息存储</p><h2 id="RabbitMQ的高可用机制（未看）"><a href="#RabbitMQ的高可用机制（未看）" class="headerlink" title="RabbitMQ的高可用机制（未看）"></a>RabbitMQ的高可用机制（未看）</h2><p>镜像集群、仲裁队列</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823150242791.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230823150256205.png"></p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="Kafka-如何保证消息不丢失"><a href="#Kafka-如何保证消息不丢失" class="headerlink" title="Kafka-如何保证消息不丢失"></a>Kafka-如何保证消息不丢失</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824093113385.png"></p><h3 id="生产者发送-丢失"><a href="#生产者发送-丢失" class="headerlink" title="生产者发送-丢失"></a>生产者发送-丢失</h3><p>1.异步发送  2.消息重试</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824093227344.png"></p><h3 id="broker存储-丢失"><a href="#broker存储-丢失" class="headerlink" title="broker存储-丢失"></a>broker存储-丢失</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824093340814.png"></p><p>可以将acks&#x3D;all.</p><h3 id="消费者接受-丢失"><a href="#消费者接受-丢失" class="headerlink" title="消费者接受-丢失"></a>消费者接受-丢失</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824093908785.png"></p><h2 id="Kafka-重复消费问题"><a href="#Kafka-重复消费问题" class="headerlink" title="Kafka-重复消费问题"></a>Kafka-重复消费问题</h2><p>kafka消费消息都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，默认是每隔5s提交一次，如果出现重平衡的情况，可能会重复消费或丢失数据。我们一般都会禁用掉自动提价偏移量，改为手动提交，当消费成功以后再报告给broker消费的位置，这样就可以避免消息丢失和重复消费了</p><p>为了消息的幂等，我们也可以设置唯一主键来进行区分，或者是加锁，数据库的锁，或者是redis分布式锁，都能解决幂等的问题</p><h2 id="Kafka-保证消费的顺序性"><a href="#Kafka-保证消费的顺序性" class="headerlink" title="Kafka-保证消费的顺序性"></a>Kafka-保证消费的顺序性</h2><p>一个topic的数据可能存储在不同的分区中，每个分区都有一个按照顺序的存储的偏移量，如果消费者关联了多个分区不能保证顺序性</p><p><strong>把消息都存储同一个分区下就行了</strong>，可以通过指定分区号或指定key。（因为默认情况下分区也是通过key的hashcode值来选择分区的）</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094249276.png"></p><h2 id="Kafka-高可用机制"><a href="#Kafka-高可用机制" class="headerlink" title="Kafka-高可用机制"></a>Kafka-高可用机制</h2><p><strong>集群+分区备份</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094355835.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094420940.png"></p><p>选举新Leader：</p><p>如果leader失效后，需要选出新的leader，选举的原则如下：</p><p>第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的</p><p>第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取</p><p><strong>ISR（in-sync replica）需要同步复制保存的follower</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094540780.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094548031.png"></p><h2 id="Kafka-文件存储机制"><a href="#Kafka-文件存储机制" class="headerlink" title="Kafka-文件存储机制"></a>Kafka-文件存储机制</h2><p>橙色的itheima是主题topic(逻辑概念），蓝色的itheima-0是分区（物理概念），分区如果文件过大会分段存储segment</p><p>每个分段都在磁盘上以索引(xxxx.index)和日志文件(xxxx.log)的形式存储，这样分段的好处是，第一能够减少单个文件内容的大小，查找数据方便，第二方便kafka进行日志清理。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824095010614.png"></p><h2 id="Kafka-数据清理机制"><a href="#Kafka-数据清理机制" class="headerlink" title="Kafka-数据清理机制"></a>Kafka-数据清理机制</h2><p>在kafka中提供了两个日志的清理策略：</p><p>第一，根据消息的保留时间，当消息保存的时间超过了指定的时间，就会触发清理，默认是168小时（ 7天）</p><p>第二是根据topic存储的数据大小，当topic所占的日志文件大小大于一定的阈值，则开始删除最久的消息。这个默认是关闭的</p><p>这两个策略都可以通过kafka的broker中的配置文件进行设置</p><h2 id="Kafka-高性能设计"><a href="#Kafka-高性能设计" class="headerlink" title="Kafka-高性能设计"></a>Kafka-高性能设计</h2><p>Kafka 高性能，是多方面协同的结果，包括宏观架构、分布式存储、ISR 数据同步、以及高效的利用磁盘、操作系统特性等。主要体现有这么几点：</p><ol><li><p>消息分区：不受单台服务器的限制，可以不受限的处理更多的数据</p></li><li><p>顺序读写：磁盘顺序读写，提升读写效率</p></li><li><p>页缓存：把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问</p></li><li><p>零拷贝：减少上下文切换及数据拷贝</p></li><li><p>消息压缩：减少磁盘IO和网络IO</p></li><li><p>分批发送：将消息打包批量发送，减少网络开销</p></li></ol><p>其中的页拷贝</p><p>将数据原本需要复制四次，改为了复制两次</p><p>原来四次：从磁盘文件-&gt;页缓存,再到kafka，再到socket缓冲区，再到网卡</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094756675.png"></p><p>改了之后直接从页缓存到网卡</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230824094913804.png">**</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-微服务学习记录1</title>
      <link href="/2023/08/22/java-ba-gu-wen-wei-fu-wu-xue-xi-ji-lu-1/"/>
      <url>/2023/08/22/java-ba-gu-wen-wei-fu-wu-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务学习记录1"><a href="#微服务学习记录1" class="headerlink" title="微服务学习记录1"></a>微服务学习记录1</h1><h2 id="SpringCloud的五大组件"><a href="#SpringCloud的五大组件" class="headerlink" title="SpringCloud的五大组件"></a>SpringCloud的五大组件</h2><p>Eureka   : 注册中心，所有的微服务都会把其地址信息给注册中心<br>Ribbon  : 负载均衡，比如文章微服务有80，81，82三个，那用户要选哪个，用户微服务里通过负载均衡挑选一个<br>Feign     : 远程调用，不同的微服务互相调用<br>Hystrix :  服务熔断,    应对降级，熔断场景<br>Zuul&#x2F;Gateway  : 网关，对外暴露接口，网关是服务的入口</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818171149688.png"></p><p>随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件<br>注册中心&#x2F;配置中心 Nacos<br>负载均衡 Ribbon<br>服务调用 Feign<br>服务保护 sentinel<br>服务网关 Gateway</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822085338175.png"></p><p><strong>服务注册</strong>：服务提供者需要把自己的信息注册到eureka，由eureka来保存这些信息，比如服务名称、ip、端口等等</p><p><strong>服务发现</strong>：消费者向eureka拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用</p><p><strong>服务监控</strong>：服务提供者会每隔30秒向eureka发送心跳，报告健康状态，如果eureka服务90秒没接收到心跳，从eureka中剔除</p><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822085616692.png"></p><ul><li>共同点</li></ul><p>Nacos与eureka都支持服务注册和服务拉取，都支持服务提供者心跳方式做健康检测</p><ul><li>Nacos与Eureka的区别</li></ul><p>①Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</p><p>②临时实例心跳不正常会被剔除，非临时实例则不会被剔除</p><p>③Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</p><p>④Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822091245310.png"></p><p>记住这个负载均衡是在服务消费者做的</p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ol><li><strong>RoundRobinRule：简单轮询服务列表来选择服务器</strong></li><li><strong>WeightedResponseTimeRule：按照权重来选择服务器，响应时间越长，权重越小</strong></li><li><strong>RandomRule：随机选择一个可用的服务器</strong></li><li>BestAvailableRule：忽略那些短路的服务器，并选择并发数较低的服务器</li><li>RetryRule：重试机制的选择逻辑<br>AvailabilityFilteringRule：可用性敏感策略，先过滤非健康的，再</li><li>选择连接数较小的实例</li><li><strong>ZoneAvoidanceRule：以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询</strong></li></ol><h3 id="自定义的负载均衡策略"><a href="#自定义的负载均衡策略" class="headerlink" title="自定义的负载均衡策略"></a>自定义的负载均衡策略</h3><p>提供了两种方式：<br>1，创建类实现IRule接口，可以指定负载均衡策略（全局）<br>2，在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略（局部）</p><h2 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h2><ul><li>服务雪崩：一个服务失败，导致整条链路的服务都失败的情形</li><li>服务降级：服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃，一般在实际开发中与feign接口整合，编写降级逻辑</li><li>服务熔断：默认关闭，需要手动打开(在引导类上添加注解：@EnableCircuitBreaker)，如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔 5 秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822093029208.png"></p><h2 id="skywalking"><a href="#skywalking" class="headerlink" title="skywalking"></a>skywalking</h2><p>一个分布式系统的应用程序性能监控工具（ Application Performance Managment ），提供了完善的链路追踪能力， apache的顶级项目</p><ul><li>服务（service）：业务资源应用系统（微服务）</li><li>端点（endpoint）：应用系统对外暴露的功能接口（接口）</li><li>实例（instance）：物理机</li></ul><p>我们项目中采用的skywalking进行监控的<br>1，skywalking主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。<br>2，我们还在skywalking设置了告警规则，特别是在项目上线以后，如果报错，我们分别设置了可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h3 id="Nginx-漏桶算法"><a href="#Nginx-漏桶算法" class="headerlink" title="Nginx 漏桶算法"></a>Nginx 漏桶算法</h3><p>漏桶算法是把请求存入到桶中，以固定速率从桶中流出，可以让我们的服务做到绝对的平均，起到很好的限流效果</p><h3 id="网关-令牌桶算法"><a href="#网关-令牌桶算法" class="headerlink" title="网关-令牌桶算法"></a>网关-令牌桶算法</h3><p>令牌桶算法在桶中存储的是令牌，按照一定的速率生成令牌，每个请求都要先申请令牌，申请到令牌以后才能正常请求，也可以起到很好的限流作用</p><p>它们的区别是，漏桶和令牌桶都可以处理突发流量，其中漏桶可以做到绝对的平滑，令牌桶有可能会产生突发大量请求的情况，一般nginx限流采用的漏桶，spring cloud gateway中可以支持令牌桶算法</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP主要是在分布式项目下的一个理论。包含了三项，一致性、可用性、分区容错性</p><ul><li>一致性(Consistency)是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致(强一致性)，不能存在中间状态。</li><li>可用性(Availability) 是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</li><li>分区容错性(Partition tolerance) 是指分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</li></ul><p>分布式系统无法同时保证一致性和可用性</p><p>首先一个前提，对于分布式系统而言，分区容错性是一个最基本的要求，因此基本上我们在设计分布式系统的时候只能从一致性（C）和可用性（A）之间进行取舍。</p><p>如果保证了一致性（C）：对于节点N1和N2，当往N1里写数据时，N2上的操作必须被暂停，只有当N1同步数据到N2时才能对N2进行读写请求，在N2被暂停操作期间客户端提交的请求会收到失败或超时。显然，这与可用性是相悖的。</p><p>如果保证了可用性（A）：那就不能暂停N2的读写操作，但同时N1在写数据的话，这就违背了一致性的要求。</p><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE是CAP理论中AP方案的延伸，核心思想是即使无法做到强一致性（StrongConsistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。它的思想包含三方面：</p><p>1、Basically Available（基本可用）：基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性，但不等于系统不可用。</p><p>2、Soft state（软状态）：即是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</p><p>3、Eventually consistent（最终一致性）：强调系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。其本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><h2 id="分布式事务解决方案-有点难，先不写"><a href="#分布式事务解决方案-有点难，先不写" class="headerlink" title="分布式事务解决方案(有点难，先不写)"></a>分布式事务解决方案(有点难，先不写)</h2><p>Seata框架(XA、AT、TCC)<br>MQ</p><h2 id="分布式服务的接口幂等性如何设计？"><a href="#分布式服务的接口幂等性如何设计？" class="headerlink" title="分布式服务的接口幂等性如何设计？"></a>分布式服务的接口幂等性如何设计？</h2><p>幂等: 多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致。</p><p>需要幂等场景:  用户重复点击(网络波动),  MQ消息重复,  应用使用失败或超时重试机制</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822095819414.png"></p><h2 id="xxl-job"><a href="#xxl-job" class="headerlink" title="xxl-job"></a>xxl-job</h2><p>xxl-job解决的问题：解决集群任务的重复执行问题,cron表达式定义灵活,定时任务失败了，重试和统计,任务量大，分片执行</p><h3 id="路由策略"><a href="#路由策略" class="headerlink" title="路由策略"></a>路由策略</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822095942198.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230822095956511.png"></p><h3 id="xxl-job任务执行失败怎么解决"><a href="#xxl-job任务执行失败怎么解决" class="headerlink" title="xxl-job任务执行失败怎么解决"></a>xxl-job任务执行失败怎么解决</h3><p>故障转移+失败重试，查看日志分析—-&gt; 邮件告警</p><h3 id="大数据量的任务同时都需要执行"><a href="#大数据量的任务同时都需要执行" class="headerlink" title="大数据量的任务同时都需要执行"></a>大数据量的任务同时都需要执行</h3><p>我们会让部署多个实例，共同去执行这些批量的任务，其中任务的路由策略是分片广播</p><p>在任务执行的代码中可以获取分片总数和当前分片，按照取模的方式分摊到各个实例执行就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-框架学习记录1</title>
      <link href="/2023/08/18/java-ba-gu-wen-kuang-jia-xue-xi-ji-lu-1/"/>
      <url>/2023/08/18/java-ba-gu-wen-kuang-jia-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="框架学习记录1"><a href="#框架学习记录1" class="headerlink" title="框架学习记录1"></a>框架学习记录1</h1><h2 id="Spring框架中的单例bean是线程安全的吗？"><a href="#Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="Spring框架中的单例bean是线程安全的吗？"></a>Spring框架中的单例bean是线程安全的吗？</h2><p>首先Spring的bean是单例的，默认就是singleton</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818153815642.png"></p><ul><li>singleton:bean在每个Spring IOC容器中只有一个实例。</li><li>prototype:一个bean的定义可以有多个实例。</li></ul><p>bean不是线程安全的，因为id为传入的参数，临时变量。所以count不是线程安全的。可以通过多例或者加锁解决。</p><p>不过userService无状态，不会被修改。所以userService是线程安全的。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818155902679.png"></p><h2 id="对AOP的理解"><a href="#对AOP的理解" class="headerlink" title="对AOP的理解"></a>对AOP的理解</h2><p>AOP是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做为公共日志保存，事务处理等</p><p>我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志</p><p>主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数据库</p><h2 id="Spring中事务失效的场景"><a href="#Spring中事务失效的场景" class="headerlink" title="Spring中事务失效的场景"></a>Spring中事务失效的场景</h2><h3 id="1-你自己捕获了异常"><a href="#1-你自己捕获了异常" class="headerlink" title="1.你自己捕获了异常"></a>1.你自己捕获了异常</h3><p>原因：事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉</p><p>解决：在catch块添加throw new RuntimeException(e)抛出</p><h3 id="2-抛出检查异常"><a href="#2-抛出检查异常" class="headerlink" title="2.抛出检查异常"></a>2.抛出检查异常</h3><p>原因：Spring 默认只会回滚非检查异常,也就是运行时异常。（文件找不到FileNotFoundException 就属于检查异常)</p><p>解决：配置rollbackFor属性  @Transactional(roolbackFor &#x3D; Exception.class)</p><h3 id="3-非public方法导致的事务失效"><a href="#3-非public方法导致的事务失效" class="headerlink" title="3.非public方法导致的事务失效"></a>3.非public方法导致的事务失效</h3><p>原因：Spring 为方法创建代理、添加事务通知、前提条件都是该方法是 public 的</p><p>解决：将Transactional注解的函数改为public函数</p><h3 id="4-一个带事务的方法被不带事务的方法调用"><a href="#4-一个带事务的方法被不带事务的方法调用" class="headerlink" title="4.一个带事务的方法被不带事务的方法调用"></a>4.一个带事务的方法被不带事务的方法调用</h3><p>不带事务的方法调用该类中带事务的方法，不会回滚。因为spring的回滚是用过代理模式生成的，如果是一个不带事务的方法调用该类的带事务的方法，直接通过<code>this.xxx()</code>调用，而不生成代理事务，所以事务不起作用。常见解决方法，拆类。</p><p>问题原因：JDK的动态代理。只有被动态代理直接调用时才会产生事务。在SpringIoC容器中返回的调用的对象是代理对象而不是真实的对象。而这里的this是<code>EmployeeService</code>真实对象而不是代理对象。</p><p>解决方法：<br>1.在方法A上开启事务，方法B不用事务或默认事务，并在方法A的catch中<code>throw new RuntimeException();</code>(在没指定rollbackFor时，默认回滚的异常为<code>RuntimeException</code>)，这样使用的就是方法A的事务。（一定要<code>throw new RuntimeException();</code>否则异常被捕捉处理，同样不会回滚。）如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开启事务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里this调用会使事务失效，数据会被保存</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.方法A上可以不开启事务，方法B上开启事务，并在方法A中将this调用改成动态代理调用(<code>AopContext.currentProxy()</code>),如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>                EmployeeService proxy <span class="token operator">=</span><span class="token punctuation">(</span>EmployeeService<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">saveEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring的bean的生命周期"><a href="#Spring的bean的生命周期" class="headerlink" title="Spring的bean的生命周期"></a>Spring的bean的生命周期</h2><p>我感觉有意思的就是他在初始化前面和初始化后面都有对应的函数，一个前置处理器，一个后置处理器。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818161837248.png"></p><h2 id="Spring的循环引用"><a href="#Spring的循环引用" class="headerlink" title="Spring的循环引用"></a>Spring的循环引用</h2><p>A依赖于B，B依赖于A</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818162339703.png"></p><p>循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖</p><p>①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</p><p>②二级缓存：缓存早期的bean对象（生命周期还没走完）</p><p>③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</p><p>先实例A对象，实例不完，把A扔到三级缓存里。然后实例B对象，B需要注入A，通过三级缓存的对象工厂获取A，并且把A存入二级缓存。B得到A了，B创建成功，B被存入一级缓存。然后A可以注入B了，A创建成功，A被存入一级缓存。清除二级缓存里的A对象。</p><p>如果是构造方法出现了循环依赖怎么解决？</p><p>由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818162814646.png"></p><h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><ol><li>用户发送出请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping（处理器映射器）</li><li>HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter（处理器适配器）</li><li>HandlerAdapter经过适配调用具体的处理器（Handler&#x2F;Controller）</li><li>方法上添加了@ResponseBody</li><li>通过HttpMessageConverter来返回结果转换为JSON并响应</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164250324.png"></p><h2 id="SpringBoot自动配置原理"><a href="#SpringBoot自动配置原理" class="headerlink" title="SpringBoot自动配置原理"></a>SpringBoot自动配置原理</h2><p>在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164357161.png"></p><p>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解。 </p><p>该注解通过<code>@Import</code>注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下<strong>META-INF&#x2F;spring.factories</strong>文件中的所配置的类的全类名。 </p><p>在这些配置类中所定义的Bean会根据条件注解所<strong>指定的条件来决定</strong>是否需要将其导入到Spring容器中。</p><p>一般条件判断会有像<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164507357.png"></p><h2 id="Spring框架的常见注解"><a href="#Spring框架的常见注解" class="headerlink" title="Spring框架的常见注解"></a>Spring框架的常见注解</h2><h3 id="Spring的常见注解"><a href="#Spring的常见注解" class="headerlink" title="Spring的常见注解"></a>Spring的常见注解</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164718982.png"></p><h3 id="SpringMVC的常见注解"><a href="#SpringMVC的常见注解" class="headerlink" title="SpringMVC的常见注解"></a>SpringMVC的常见注解</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164740622.png"></p><h3 id="SpringBoot的常见注解"><a href="#SpringBoot的常见注解" class="headerlink" title="SpringBoot的常见注解"></a>SpringBoot的常见注解</h3><p>Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 : </p><ul><li>@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li><li>@ComponentScan：Spring组件扫描</li></ul><h2 id="Mybatis的执行流程"><a href="#Mybatis的执行流程" class="headerlink" title="Mybatis的执行流程"></a>Mybatis的执行流程</h2><p>①读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件</p><p>②构造会话工厂SqlSessionFactory，一个项目只需要一个，单例的，一般由spring进行管理</p><p>③会话工厂创建SqlSession对象，这里面就含了执行SQL语句的所有方法</p><p>④操作数据库的接口，Executor执行器，同时负责查询缓存的维护</p><p>⑤Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息</p><p>⑥输入参数映射</p><p>⑦输出结果映射</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818164952627.png"></p><h2 id="Mybatis的延迟加载"><a href="#Mybatis的延迟加载" class="headerlink" title="Mybatis的延迟加载"></a>Mybatis的延迟加载</h2><p>延迟加载的意思是：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。</p><p>Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载</p><p>在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&#x3D;true|false，默认是关闭的</p><h3 id="延迟加载的底层原理"><a href="#延迟加载的底层原理" class="headerlink" title="延迟加载的底层原理"></a>延迟加载的底层原理</h3><p>延迟加载在底层主要使用的CGLIB动态代理完成的</p><p>第一是,使用CGLIB创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的mapper</p><p>第二是, 当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，再执行sql查询</p><p>第三是,获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818165157732.png"></p><h2 id="Mybatis的一级、二级缓存"><a href="#Mybatis的一级、二级缓存" class="headerlink" title="Mybatis的一级、二级缓存"></a>Mybatis的一级、二级缓存</h2><p>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 <strong>Session</strong>，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230818165340478.png"></p><p>二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储</p><p>二级缓存默认是关闭的<br>开启方式，两步：<br>1，全局配置文件  mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>2，映射文件  UserMapper.xml<br>使用<cache/>标签让当前mapper生效二级缓存</p><p>注意事项：</p><p>1，对于缓存数据更新机制，当某一个作用域(一级缓存 Session&#x2F;二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被 clear<br>2，二级缓存需要缓存的数据实现Serializable接口<br>3，只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</p><h2 id="Mybatis执行流程"><a href="#Mybatis执行流程" class="headerlink" title="Mybatis执行流程"></a>Mybatis执行流程</h2><p>1.加载我们的配置文件(mybatis-config.xml)和全局映射文件(UserMapper.xml).加载解析的相关信息在Configuration 对象中。</p><ol start="2"><li>SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(in);</li></ol><p>工厂模式对外提供sqlSessionFactory对象,建造者模式解决复杂对象的创建。</p><p>工厂应该是单例的。</p><ol start="3"><li>SqlSession sqlSession &#x3D; factory.openSession();</li></ol><p>后面通过sqlSession的一些API去做业务处理。</p><h2 id="Mybatis中的缓存"><a href="#Mybatis中的缓存" class="headerlink" title="Mybatis中的缓存"></a>Mybatis中的缓存</h2><p>通过装饰器模式扩展缓存的功能。</p><p>基于最普通的Cache接口,有一个普通简单的PerpetualCache实现类。我们还有LruCache,LoggingCache,SoftCache,WeakCache.这些比较复杂的装饰类。</p><p>public calss synchronizedCache implements Cache {</p><p>​    private final Cache delegate;  &#x2F;&#x2F;默认实现就是PerpetualCache</p><p>}</p><p>先走二级缓存再走一级缓存。</p><p>一级缓存是session级别的，二级缓存是sqlSessionFactory级别的，也就是进程级别。</p><h2 id="MyBatis的涉及到的设计模式"><a href="#MyBatis的涉及到的设计模式" class="headerlink" title="MyBatis的涉及到的设计模式"></a>MyBatis的涉及到的设计模式</h2><p>缓存模块：装饰器模式</p><p>日志模块：适配器模式适配不同的适配器实现，interface Log，当然也体现了策略模式。代理模式</p><p>反射模块：工厂模式，装饰器模式Wrapper</p><p>sqlSesssion:建造者模式</p><p>代理模式：将 sqlSession.selectList(“com.boge.mapper.UserMapper.selectUser”)拆分为</p><p>UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);</p><p>mapper.selectUserById(1);</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>在PageHelper包下，MysqlParser类中</p><p>在getPageSql函数中，sqlBuilder.append(“ limit ?,?”); </p><h2 id="sqlSession的线程安全问题"><a href="#sqlSession的线程安全问题" class="headerlink" title="sqlSession的线程安全问题"></a>sqlSession的线程安全问题</h2><p>是由Spring解决的。DefaultSqlSession是线程非安全的。</p><p>在Spring中提供了一个SqlSessionTemplate,其中每个方法都通过SqlSessionProxy来操作，这是一个动态代理对象。然后在动态代理对象中通过方法级别的DefaultSqlSession来实现相关的数据库的操作。</p><h2 id="MyBatis的架构"><a href="#MyBatis的架构" class="headerlink" title="MyBatis的架构"></a>MyBatis的架构</h2><p>接口层：sqlSession，面向开发者</p><p>核心层：具体的操作，配置解析，参数映射，sql解析，sql执行，结果集映射，插件</p><p>基础模块：支撑核心层完成一些功能，反射模块，日志模块，缓存模块，类型转换模块，数据源模块，事务模块，资源加载模块</p><h2 id="JDBC差在哪"><a href="#JDBC差在哪" class="headerlink" title="JDBC差在哪"></a>JDBC差在哪</h2><p>1.sql直接写在代码里，维护成本太高。</p><p>2.JDBC没有像Mybatis一样搞<strong>数据库连接池</strong></p><p>3.像sql中传递参数也很麻烦，因为sql语句中where条件参数不一定，占位符和参数要一一对应。</p><p>4.对于结果集的映射也很麻烦，主要是sql本身的变化会导致解析的难度。</p><h2 id="当实体的字段和表的字段不一致咋办？"><a href="#当实体的字段和表的字段不一致咋办？" class="headerlink" title="当实体的字段和表的字段不一致咋办？"></a>当实体的字段和表的字段不一致咋办？</h2><p>1.在对应的sql语句中通过别名的方式</p><p>2.通过自定义resultMap标签，可以设置属性和字段的映射关系。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"userMap"</span> type<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>     <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"userName"</span> column<span class="token operator">=</span><span class="token string">"user_name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"password"</span> column<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>     <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"age"</span> column<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"sex"</span> column<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span> <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"testMohu"</span> resultMap<span class="token operator">=</span><span class="token string">"userMap"</span><span class="token operator">></span>     select id<span class="token punctuation">,</span>user_name<span class="token punctuation">,</span>password<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex from t_user where user_name like <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>mohu<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h2 id="MyBatis的多个传参"><a href="#MyBatis的多个传参" class="headerlink" title="MyBatis的多个传参"></a>MyBatis的多个传参</h2><p><strong>@Param 注解传参法（推荐）</strong></p><p>#{}里面的名称对应的是注解 @Param 括号里面修饰的名称。</p><p><strong>Map 传参法（推荐）</strong></p><p>#{}里面的名称对应的是 Map 里面的 key 名称。</p><p>public void selectUser(Map&lt;String,Object&gt; map);</p><p> <strong>Java Bean 传参法（推荐）</strong></p><p>最常见的，public void selecytUser(User user);  #{}的名称就是自定义对象的属性名称。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据同步方案</title>
      <link href="/2023/08/17/shu-ju-tong-bu-fang-an/"/>
      <url>/2023/08/17/shu-ju-tong-bu-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h1><p>elasticsearch中的酒店数据来自于mysql数据库，因此mysql数据发生改变时，elasticsearch也必须跟着改变，这个就是elasticsearch与mysql之间的<strong>数据同步</strong>。</p><p>当然mysql和redis中也有类似的数据同步</p><h2 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/image/image-20230817120205363.png"></p><p>基本步骤如下：</p><ul><li>hotel-demo对外提供接口，用来修改elasticsearch中的数据</li><li>酒店管理服务在完成数据库操作后，直接调用hotel-demo提供的接口，</li></ul><h2 id="异步调用-mq"><a href="#异步调用-mq" class="headerlink" title="异步调用-mq"></a>异步调用-mq</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/image/image-20230817120144316.png"></p><p>流程如下：</p><ul><li>hotel-admin对mysql数据库数据完成增、删、改后，发送MQ消息</li><li>hotel-demo监听MQ，接收到消息后完成elasticsearch数据修改</li></ul><h2 id="监听binlog-canal"><a href="#监听binlog-canal" class="headerlink" title="监听binlog-canal"></a>监听binlog-canal</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/image/image-20230817120218044.png"></p><p>流程如下：</p><ul><li>给mysql开启binlog功能</li><li>mysql完成增、删、改操作都会记录在binlog中</li><li>hotel-demo基于canal监听binlog变化，实时更新elasticsearch中的内容</li></ul><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>方式一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：业务耦合度高</li></ul><p>方式二：异步通知</p><ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖mq的可靠性</li></ul><p>方式三：监听binlog</p><ul><li>优点：完全解除服务间耦合</li><li>缺点：开启binlog增加数据库负担、实现复杂度高</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-MySQL学习记录1</title>
      <link href="/2023/08/12/java-ba-gu-wen-mysql-xue-xi-ji-lu-1/"/>
      <url>/2023/08/12/java-ba-gu-wen-mysql-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java八股文-MySQL学习记录1"><a href="#Java八股文-MySQL学习记录1" class="headerlink" title="Java八股文-MySQL学习记录1"></a>Java八股文-MySQL学习记录1</h1><h2 id="如何定位慢查询"><a href="#如何定位慢查询" class="headerlink" title="如何定位慢查询"></a>如何定位慢查询</h2><p><strong>方案一：开源工具</strong></p><p>调试工具：Arthas </p><p>运维工具：Prometheus 、Skywalking</p><p><strong>方案二：</strong>MySQL自带慢日志</p><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志</p><p>如果要开启慢查询日志，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><p>slow_query_log&#x3D;1</p><p>long_query_time&#x3D;2</p><h2 id="如何分析慢查询"><a href="#如何分析慢查询" class="headerlink" title="如何分析慢查询"></a>如何分析慢查询</h2><p>直接在select语句之前加上关键字 explain </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810101034647.png"></p><ul><li>possible_key 当前sql可能会使用到的索引</li><li>key 当前sql实际命中的索引</li><li>key_len 索引占用的大小</li><li>Extra 额外的优化建议</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810101118835.png"></p><ul><li>type 这条sql的连接的类型，性能由好到差为NULL、system、const、eq_ref、ref、range、 index、all</li></ul><ol><li>system：查询系统中的表</li><li>const：根据主键查询</li><li>eq_ref：主键索引查询或唯一索引查询</li><li>ref：索引查询</li><li>range：范围查询</li><li>index：索引树扫描</li><li>all：全盘扫描</li></ol><p>6和7这种全盘扫描或全索引扫描，效率就比较低了</p><h2 id="存储引擎-InnoDB"><a href="#存储引擎-InnoDB" class="headerlink" title="存储引擎-InnoDB"></a>存储引擎-InnoDB</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810101628042.png"></p><h2 id="B树与B-树"><a href="#B树与B-树" class="headerlink" title="B树与B+树"></a>B树与B+树</h2><p>B树</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810101818936.png"></p><p>B+树</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810101839477.png"></p><p>而且B+树的非叶子节点不存数据，则可以比B树存更多的数据。这使得B+树更加矮胖</p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><p>聚簇索引不需要回表，一般就是我们所说的主键索引。</p><p>比如我们有 id   name  age三列。  查name,先用二级索引搜到id,再回表。   因为只有聚簇索引下面才有完整的数据信息。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810102029480.png"></p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p><strong>覆盖索引</strong>是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810102427769.png"></p><h2 id="MySQL超大分页处理"><a href="#MySQL超大分页处理" class="headerlink" title="MySQL超大分页处理"></a>MySQL超大分页处理</h2><p>优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>原SQL：  select * from tb_sku limit 9000000,10</p><p>升级后SQL:</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230810102551015.png"></p><p>先分页查询数据的id字段（这一步走的是覆盖索引），确定了id之后，再用子查询来过滤，只查询这个id列表里的数据（聚簇索引）</p><h2 id="索引创建原则"><a href="#索引创建原则" class="headerlink" title="索引创建原则"></a>索引创建原则</h2><p><strong>1). 数据量较大，且查询比较频繁的表</strong></p><p><strong>2). 常作为查询条件、排序、分组的字段</strong></p><p>3). 字段内容区分度高</p><p>4). 内容较长，使用前缀索引</p><p><strong>5). 尽量联合索引</strong></p><p><strong>6). 要控制索引的数量</strong></p><p>7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它</p><h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><p>用explain快速看一看是否失效</p><p>写sql里面的where后面的and是随意的，建立复合索引的时候要谨慎，因为顺序关系到索引树的顺序</p><p>1.最左前缀法则，针对的是复合索引.指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>2.范围查询右边的列，不能使用索引 。</p><p>3.不要在索引列上进行运算操作， 索引将失效</p><p>4.字符串不加单引号，造成索引失效。(因为没有对字符串加单引号， MySQL的查询优化器，会自动的进行类型转换)</p><p>5.以%开头的Like模糊查询，索引失效。</p><h2 id="SQL优化的经验"><a href="#SQL优化的经验" class="headerlink" title="SQL优化的经验"></a>SQL优化的经验</h2><p>表的涉及优化，使用索引、sql语句的编写、主从复制，读写分离，还有一个是如果量比较大的话，可以考虑分库分表。</p><p>sql语句的简单优化：（详细优化请看我之前的<a href="https://19shuidiph.github.io/2023/06/26/ge-ren-jian-li/">简历介绍文章</a>）</p><p>①SELECT语句务必指明字段名称（避免直接使用select * ）</p><p>②SQL语句要避免造成索引失效的写法</p><p>③尽量用union all代替union  union会多一次过滤，效率低[union会再对结果取一次distinct的并集]</p><p>④避免在where子句中对字段进行表达式操作</p><p>⑤Join优化 能用innerjoin 就不用left join right join，如必须使用 一定要以小表为驱动，</p><p>   内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join 或 right join，不会重新调整顺序</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol><li>原子性（<strong>A</strong>tomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（<strong>C</strong>onsistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（<strong>I</strong>solation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（<strong>D</strong>urability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ol><h2 id="并发事务问题，隔离级别"><a href="#并发事务问题，隔离级别" class="headerlink" title="并发事务问题，隔离级别"></a>并发事务问题，隔离级别</h2><p>并发事务问题：脏读、不可重复读、幻读</p><p>隔离级别：读未提交、读已提交、可重复读、串行化</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811100114180.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811100132214.png"></p><h2 id="redolog-和-undolog"><a href="#redolog-和-undolog" class="headerlink" title="redolog 和 undolog"></a>redolog 和 undolog</h2><ul><li>redo log: 记录的是数据页的物理变化，服务宕机可用来同步数据</li><li>undo log ：记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据</li><li>redo log保证了事务的持久性，undo log保证了事务的原子性和一致性</li></ul><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>重做日志，记录的是事务提交时数据页的物理修改，是<strong>用来实现事务的持久性</strong>。</p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101020854.png"></p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚 和 MVCC(多版本并发控制) 。undo log和redo log记录物理日志不一样，它是逻辑日志。</p><p>l可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，</p><p>l当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><h2 id="事务的隔离性是如何保证的呢"><a href="#事务的隔离性是如何保证的呢" class="headerlink" title="事务的隔离性是如何保证的呢"></a>事务的隔离性是如何保证的呢</h2><p>锁：排他锁（如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁）</p><p>mvcc : 多版本并发控制</p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突</p><p>MVCC的具体实现，主要依赖于数据库记录中的<strong>隐式字段、undo log日志、readView</strong>。</p><h3 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101200980.png"></p><h3 id="undolog版本链"><a href="#undolog版本链" class="headerlink" title="undolog版本链"></a>undolog版本链</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101239830.png"></p><h3 id="readview"><a href="#readview" class="headerlink" title="readview"></a>readview</h3><p>ReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101349735.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101402447.png"></p><p>对于RC，读已提交。每次都可以生成新的readview,则不满足可重复读。有新的事务提交了就能读取到新的数据</p><p><strong>公式里面的trx_id是undolog版本链里的trx_id，从上到下一个个去对比</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811101922556.png">)</p><p>对于RR，可重复读，只生成一个readview,可能后面会读到一些过期数据</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102002314.png"></p><h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102229129.png"></p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>主从解决的是读写的压力，分库分表解决的是存储的压力</p><h3 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102452807.png"></p><h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102503529.png"></p><p>光辉税月项目中，把文件内容存到MongoDB里，就有点垂直分表的意思</p><h3 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102628082.png"></p><h3 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230811102646993.png"></p><p>水平分库分表可能需要一些中间件来支持</p><p>sharding-sphere   、    mycat</p><h2 id="什么是BufferPool"><a href="#什么是BufferPool" class="headerlink" title="什么是BufferPool"></a>什么是BufferPool</h2><p>第一次从磁盘中取出来放到BufferPool,第二次查询就会快一些。一个缓存页对应一个控制块。 </p><p>BufferPool默认大小是128M，以Page页为单位，Page页默认大小是16k</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20240105123304136.png"></p><p>mysql中有个hashTable,key是表空间号＋数据页号，value是对应的控制块。然后再从控制块找缓存页。</p><h2 id="InnoDB如何管理Page页"><a href="#InnoDB如何管理Page页" class="headerlink" title="InnoDB如何管理Page页"></a>InnoDB如何管理Page页</h2><p>Page有三种状态， free page,clean page, dirty page.</p><p>free list: 空闲缓冲区。存的是控制块</p><p>flush list:管理dirty page,表示需要刷新到磁盘的缓冲区。 其他结构与free list相似</p><p>lru list: 表示正在使用的缓冲区，管理clean page 和 dirty page.会划分两个区域，冷热数据。</p><h2 id="mysql改进lru算法"><a href="#mysql改进lru算法" class="headerlink" title="mysql改进lru算法"></a>mysql改进lru算法</h2><p>普通lru算法的优点：最近使用的数据都在表头，可以快速找到热点数据</p><p>缺点：如果发生全表扫描，有很大概率将真正的热数据淘汰掉。</p><p>mysql存在预读机制，很多预读的页会放到LRU的链表头，尾部的缓冲页很容易被淘汰。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Java%E5%85%AB%E8%82%A1%E6%96%87-MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20240105212724493.png"></p><p>第一次进冷数据区，在LRU链表中存在的时间超过1秒才会到热数据区。</p><h2 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h2><p>自适应哈希索引是InnoDB的三大特性之一，还有两个是Buffer Pool和双写缓冲区</p><p>1、自适应即我们不需要自己处理，当InnoDB引擎根据查询统计发现某一查询满足hash索引的数据结构特点，就会给其建立一个hash索引;</p><p>2、hash索引底层的数据结构是散列表(Hash表)，其数据特点就是比较适合在内存中使用，自适应Hash索引存在于InnoDB架构中的缓存中(不存在于磁盘架构中)，见下面的InnoDB架构图。</p><p>3、自适应hash索引只适合搜索等值的查询，如select *from table where index_col&#x3D;’xxx’，而对于其他查找类型，如范围查找，是不能使用的;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>黑马Redis实战篇</title>
      <link href="/2023/08/09/redis-shi-zhan-pian-hei-ma/"/>
      <url>/2023/08/09/redis-shi-zhan-pian-hei-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马Redis实战篇"><a href="#黑马Redis实战篇" class="headerlink" title="黑马Redis实战篇"></a>黑马Redis实战篇</h1><p>参考文章链接：<a href="https://blog.csdn.net/weixin_51515308/article/details/128010464?spm=1001.2014.3001.5502">https://blog.csdn.net/weixin_51515308/article/details/128010464?spm=1001.2014.3001.5502</a></p><p>仅记录一些之前没见过的操作</p><p>一些mybatisplus操作也会记录</p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p><strong>多台Tomcat不共享session存储空间，当请求切换到不同的tomcat服务时导致数据丢失的问题</strong></p><p><strong>所以我们把数据存入Redis，集群的Redis可以替代session</strong></p><h3 id="生成验证码，保存到session"><a href="#生成验证码，保存到session" class="headerlink" title="生成验证码，保存到session"></a>生成验证码，保存到session</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2.生成验证码:导入hutool依赖，内有RandomUtil</span>String code <span class="token operator">=</span> RandomUtil<span class="token punctuation">.</span><span class="token function">randomNumbers</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.保存验证码到session</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="根据手机号查询用户"><a href="#根据手机号查询用户" class="headerlink" title="根据手机号查询用户"></a>根据手机号查询用户</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//4.一致，根据手机号查询用户(需要写对应的单表查询方法:select * from tb_user where phone = #{phone})</span>    User user <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="发送验证码和用户登录"><a href="#发送验证码和用户登录" class="headerlink" title="发送验证码和用户登录"></a>发送验证码和用户登录</h3><p>发送验证码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//3.保存验证码到Redis</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>LOGIN_CODE_KEY <span class="token operator">+</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span>LOGIN_CODE_TTL<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有效期2mins</span></code></pre><p>用户登录，获取验证码：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//2.从Redis中获取验证码</span>        String cacheCode <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>LOGIN_CODE_KEY<span class="token operator">+</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保存用户到Redis,而且只保存部分信息</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//6.保存用户到Redis</span><span class="token comment" spellcheck="true">//(1)生成token</span>String token <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hutools</span><span class="token comment" spellcheck="true">//(2)User转为HashMap存储</span>UserDTO userDTO <span class="token operator">=</span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>UserDTO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> userDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nickName"</span><span class="token punctuation">,</span> userDTO<span class="token punctuation">.</span><span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">,</span> userDTO<span class="token punctuation">.</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)存储到Redis</span>String tokenKey <span class="token operator">=</span> LOGIN_USER_KEY <span class="token operator">+</span> token<span class="token punctuation">;</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(4) 设置有效期</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span>LOGIN_USER_TTL<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="MvcConfig注入stringRedisTemplate-然后传给LoginInterceptor-因为LoginInterceptor不是bean不能用spring注入其他bean"><a href="#MvcConfig注入stringRedisTemplate-然后传给LoginInterceptor-因为LoginInterceptor不是bean不能用spring注入其他bean" class="headerlink" title="MvcConfig注入stringRedisTemplate,然后传给LoginInterceptor,因为LoginInterceptor不是bean不能用spring注入其他bean"></a><strong>MvcConfig注入stringRedisTemplate,然后传给LoginInterceptor,因为LoginInterceptor不是bean不能用spring注入其他bean</strong></h3><h3 id="拦截器进行的预处理-保存ThreadLocal和刷新有效期"><a href="#拦截器进行的预处理-保存ThreadLocal和刷新有效期" class="headerlink" title="拦截器进行的预处理-保存ThreadLocal和刷新有效期"></a>拦截器进行的预处理-保存ThreadLocal和刷新有效期</h3><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取请求头中的token</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.基于TOKEN获取redis中的用户</span>        String key  <span class="token operator">=</span> LOGIN_USER_KEY <span class="token operator">+</span> token<span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> userMap <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.判断用户是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 5.将查询到的hash数据转为UserDTO</span>        UserDTO userDTO <span class="token operator">=</span> BeanUtil<span class="token punctuation">.</span><span class="token function">fillBeanWithMap</span><span class="token punctuation">(</span>userMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.存在，保存用户信息到 ThreadLocal</span>        UserHolder<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7.刷新token有效期</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> LOGIN_USER_TTL<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8.放行</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>而保存进ThreadLocal的东西已经被封装好了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> tl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>UserDTO user<span class="token punctuation">)</span><span class="token punctuation">{</span>        tl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserDTO <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tl<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="写入-x2F-写出redis-要序列化JSONUtil-⭐⭐⭐"><a href="#写入-x2F-写出redis-要序列化JSONUtil-⭐⭐⭐" class="headerlink" title="写入&#x2F;写出redis,要序列化JSONUtil(⭐⭐⭐)"></a>写入&#x2F;写出redis,要序列化JSONUtil(⭐⭐⭐)</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShopServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>ShopMapper<span class="token punctuation">,</span> Shop<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IShopService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">querygetById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.从Redis内查询商品缓存</span>        String shopJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//手动反序列化</span>            Shop shop <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">,</span> Shop<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.不存在就根据id查询数据库</span>        Shop shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>shop<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"商户不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.数据库数据写入Redis</span>        <span class="token comment" spellcheck="true">//手动序列化</span>        String shopStr <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">,</span>shopStr<span class="token punctuation">,</span>CACHE_SHOP_TTL<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="查很多东西，并且写。设置有效时间。"><a href="#查很多东西，并且写。设置有效时间。" class="headerlink" title="查很多东西，并且写。设置有效时间。"></a>查很多东西，并且写。设置有效时间。</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShopTypeServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>ShopTypeMapper<span class="token punctuation">,</span> ShopType<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IShopTypeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">queryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.从Redis中查询</span>        String key <span class="token operator">=</span> CACHE_SHOPTYPE_KEY<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//手动反序列化</span>            List<span class="token operator">&lt;</span>ShopType<span class="token operator">></span> typeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ShopType shopType <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ShopType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                typeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shopType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>typeList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.从数据库内查询</span>        List<span class="token operator">&lt;</span>ShopType<span class="token operator">></span> typeList <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>typeList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"不存在该分类!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//序列化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ShopType shopType <span class="token operator">:</span> typeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>shopType<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.存入缓存</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>CACHE_SHOPTYPE_TTL<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="更新数据库的时候要删除缓存，以实现缓存和数据库双写一致"><a href="#更新数据库的时候要删除缓存，以实现缓存和数据库双写一致" class="headerlink" title="更新数据库的时候要删除缓存，以实现缓存和数据库双写一致"></a>更新数据库的时候要删除缓存，以实现缓存和数据库双写一致</h3><h3 id="基于互斥锁解决缓存击穿问题"><a href="#基于互斥锁解决缓存击穿问题" class="headerlink" title="基于互斥锁解决缓存击穿问题"></a>基于互斥锁解决缓存击穿问题</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取互斥锁 */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Boolean flag <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> TTL_TEN<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> BooleanUtil<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 释放互斥锁 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**互斥锁实现解决缓存击穿**/</span><span class="token keyword">public</span> Shop <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.从Redis内查询商品缓存</span>    String shopJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手动反序列化</span>        <span class="token keyword">return</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">,</span> Shop<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果上面的判断不对，那么就是我们设置的""(有缓存"",证明数据库内肯定是没有的)或者null(没有缓存)</span>    <span class="token comment" spellcheck="true">//判断命中的是否时空值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shopJson<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//a.实现缓存重建</span>    <span class="token comment" spellcheck="true">//a.1 获取互斥锁</span>    String lockKey <span class="token operator">=</span> LOCK_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    Shop shop <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> hasLock <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//a.2 判断是否获取到，获取到:根据id查数据库 获取不到:休眠</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hasLock<span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.不存在就根据id查询数据库</span>        shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟重建的延时</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>shop<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>CACHE_NULL_TTL<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.数据库数据写入Redis</span>        <span class="token comment" spellcheck="true">//手动序列化</span>        String shopStr <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">,</span>shopStr<span class="token punctuation">,</span>CACHE_SHOP_TTL<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放互斥锁</span>        <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> shop<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Result <span class="token function">querygetById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//缓存穿透</span>    <span class="token comment" spellcheck="true">//Shop shop = queryWithPassThrough(id);</span>    <span class="token comment" spellcheck="true">//互斥锁解决缓存击穿</span>    Shop shop <span class="token operator">=</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shop<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"店铺不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="基于逻辑过期解决缓存击穿问题"><a href="#基于逻辑过期解决缓存击穿问题" class="headerlink" title="基于逻辑过期解决缓存击穿问题"></a>基于逻辑过期解决缓存击穿问题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启10个线程</span><span class="token comment" spellcheck="true">/**逻辑过期实现解决缓存击穿**/</span><span class="token keyword">public</span> Shop <span class="token function">queryWithLogical</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.从Redis内查询商品缓存</span>    String shopJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CACHE_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.判断是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.命中，需要先把json反序列化为对象</span>    RedisData redisData <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">,</span> RedisData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject data <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> redisData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Shop shop <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Shop<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.判断是否过期</span>    LocalDateTime expireTime <span class="token operator">=</span> redisData<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//未过期直接返回</span>        <span class="token keyword">return</span> shop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.过期的话需要缓存重建</span>    <span class="token comment" spellcheck="true">//5.1 获取互斥锁</span>    String lockKey <span class="token operator">=</span> LOCK_SHOP_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> hasLock <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.2判断是否获取到，获取到:根据id查数据库 获取不到:休眠</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>hasLock<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//成功就开启独立线程，实现缓存重建, 这里的话用线程池</span>       CACHE_REBUILD_EXECUTOR<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//重建缓存</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveShop2Redis</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>20L<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//释放锁</span>               <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> shop<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**缓存重建方法**/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveShop2Redis</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span>Long expireSeconds<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.查询店铺信息</span>    Shop shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.封装逻辑过期时间</span>    RedisData redisData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisData<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span>expireSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.写入Redis</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CACHE_SHOP_KEY<span class="token operator">+</span>id<span class="token punctuation">,</span>JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>redisData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSaveShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    shopService<span class="token punctuation">.</span><span class="token function">saveShop2Redis</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="秒杀-分布式锁"><a href="#秒杀-分布式锁" class="headerlink" title="秒杀-分布式锁"></a>秒杀-分布式锁</h2><h3 id="一人一单的秒杀（不支持并发安全）"><a href="#一人一单的秒杀（不支持并发安全）" class="headerlink" title="一人一单的秒杀（不支持并发安全）"></a>一人一单的秒杀（不支持并发安全）</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Result <span class="token function">seckillVoucher</span><span class="token punctuation">(</span>Long voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.查询优惠卷</span>    SeckillVoucher voucher <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.判断秒杀是否开始，是否结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀尚未开始!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀已结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.判断库存是否充足</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"优惠券库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//userId一样的持有同一把锁，最好不要放在整个方法上,intern:去字符串常量池找相同字符串</span>        IVoucherOrderService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IVoucherOrderService<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得代理对象</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是this,我们要实现事务需要proxy</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先获取锁，然后再进入方法，确保我的前一个订单会添加上,能先提交事务再释放锁</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> Result <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>Long voucherId<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询订单看看是否存在</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户已经购买过一次!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4.扣减库存</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"stock = stock -1"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"stock"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//where id = ? and stock >0 添加了乐观锁</span>            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.创建订单</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"优惠券库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//6.返回订单id</span>    VoucherOrder voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6.1订单id</span>    <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6.2用户id</span>    <span class="token comment" spellcheck="true">//Long userId = UserHolder.getUser().getId();</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6.3代金券id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//7.订单写入数据库</span>    <span class="token function">save</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//8.返回订单Id</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分布式锁Redisson"><a href="#分布式锁Redisson" class="headerlink" title="分布式锁Redisson"></a>分布式锁Redisson</h3><p>1.导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.13.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.写一个配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissionConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedissonClient <span class="token function">redissionClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.200.131:6379"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建RedissonClient对象</span>        <span class="token keyword">return</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.在业务实现类中使用RedissonClient</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedissonClient redissonClient<span class="token punctuation">;</span>业务方法<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//···前面流程</span> Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建锁对象</span>        <span class="token comment" spellcheck="true">//SimpleRedisLock lock = new SimpleRedisLock("order:" + userId,stringRedisTemplate);</span>        RLock lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock:order:"</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取锁</span>        <span class="token keyword">boolean</span> hasLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hasLock<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取锁失败: return fail 或者 retry 这里业务要求是返回失败</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"请勿重复下单!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            IVoucherOrderService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IVoucherOrderService<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得代理对象</span>            <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是this,我们要实现事务需要proxy</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="看门狗watchdog"><a href="#看门狗watchdog" class="headerlink" title="看门狗watchdog"></a>看门狗watchdog</h3><p><strong>tryLock(waitTime,leaseTime,TimeUnit)</strong></p><p>waitTime:获取锁的等待时长，获取锁失败后等待waitTime再去获取锁</p><p>leaseTime: 锁自动失效时间，这里测试锁重试不需要用到</p><blockquote><p>WatchDog—–超时释放</p><p>对抢锁过程进行监听，抢锁完毕后，scheduleExpirationRenewal(threadId) 方法会被调用来对锁的过期时间进行续约，在后台开启一个线程，进行续约逻辑，也就是看门狗线程。</p><p>&#x2F;&#x2F; 续约逻辑<br>commandExecutor.getConnectionManager().newTimeout(new TimerTask() {… }, 锁失效时间 &#x2F; 3, TimeUnit.MILLISECONDS);</p><p>Method(new TimerTask(){}, 参数2, 参数3)</p><p>通过参数2、参数3 去描述，什么时候做参数1 的事情。</p><p>锁的失效时间为 30s，10s 后这个 TimerTask 就会被触发，于是进行续约，将其续约为 30s；<br>若操作成功，则递归调用自己，重新设置一个 TimerTask 并且在 10s 后触发；循环往复，不停的续约。</p></blockquote><p>因为不想写lua脚本，也不想看redis自己实现的消息队列。所以这一章就结束了</p><h2 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h2><h3 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Result <span class="token function">likeBlog</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.判断当前用户是否已点赞</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    Boolean isMember <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>BooleanUtil<span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.未点赞：数据库赞+1</span>        <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"liked = liked +  1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.用户信息保存到Redis的点赞set</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span><span class="token punctuation">{</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4.已点赞:数据库-1</span>        <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"liked = liked -  1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.把用户信息从Redis的点赞set移除</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span><span class="token punctuation">{</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当我们点开一篇blog的时候就需要被看到是否点赞过，这就要求我们改一下queryBlogById(id)咯，当然isLikeBlog(blog)也是需要</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Result <span class="token function">queryBlogById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.查询blog</span>    Blog blog <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blog<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"笔记不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.查询blog相关用户</span>    <span class="token function">queryBlogUser</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.查询用户是否点过赞,其实就是给blog的isLike添加值</span>    <span class="token function">isLikeBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">isLikeBlog</span><span class="token punctuation">(</span>Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    Boolean isMember <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blog<span class="token punctuation">.</span><span class="token function">setIsLike</span><span class="token punctuation">(</span>BooleanUtil<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">queryHotBlog</span><span class="token punctuation">(</span>Integer current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据用户查询</span>        Page<span class="token operator">&lt;</span>Blog<span class="token operator">></span> page <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"liked"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> SystemConstants<span class="token punctuation">.</span>MAX_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前页数据</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查询用户</span>        records<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>blog<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryBlogUser</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isLikeBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//就是用blog遍历的</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>用zset</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">isBlogLiked</span><span class="token punctuation">(</span>Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取登录用户</span>        UserDTO user <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用户未登录，无需查询是否点赞</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Long userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.判断当前登录用户是否已经点赞</span>        String key <span class="token operator">=</span> <span class="token string">"blog:liked:"</span> <span class="token operator">+</span> blog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double score <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blog<span class="token punctuation">.</span><span class="token function">setIsLike</span><span class="token punctuation">(</span>score <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">likeBlog</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取登录用户</span>        Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.判断当前登录用户是否已经点赞</span>        String key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>        Double score <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3.如果未点赞，可以点赞</span>            <span class="token comment" spellcheck="true">// 3.1.数据库点赞数 + 1</span>            <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"liked = liked + 1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.2.保存用户到Redis的set集合  zadd key value score</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4.如果已点赞，取消点赞</span>            <span class="token comment" spellcheck="true">// 4.1.数据库点赞数 -1</span>            <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"liked = liked - 1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.2.把用户从Redis的set集合移除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">queryBlogLikes</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.查询top5的点赞用户 zrange key 0 4</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> top5 <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top5 <span class="token operator">==</span> null <span class="token operator">||</span> top5<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.解析出其中的用户id</span>        List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids <span class="token operator">=</span> top5<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Long<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String idStr <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)</span>        List<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> userDTOS <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"ORDER BY FIELD(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> UserDTO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.返回</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h3><p>普通的关注和取消关注也是写到了redis里</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>isSave<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把被关注用户id放入Redis sadd follows:userId（key） followerId（value）</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>followKey<span class="token punctuation">,</span>followUserId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>isRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//把被关注用户id从Redis移除</span>                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>followKey<span class="token punctuation">,</span> followUserId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>共同关注</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Result <span class="token function">followCommons</span><span class="token punctuation">(</span>Long followUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.先获取当前用户</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String followKey1 <span class="token operator">=</span> <span class="token string">"follows:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>    String followKey2 <span class="token operator">=</span> <span class="token string">"follows:"</span> <span class="token operator">+</span> followUserId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.求交集</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> intersect <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>followKey1<span class="token punctuation">,</span> followKey2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>intersect<span class="token operator">==</span>null<span class="token operator">||</span>intersect<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.解析出id数组</span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids <span class="token operator">=</span> intersect<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Long<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.根据ids查询用户数组 List&lt;User> ---> List&lt;UserDTO></span>    List<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> userDTOS <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> UserDTO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="滚动分页"><a href="#滚动分页" class="headerlink" title="滚动分页"></a>滚动分页</h3><p>通俗来说<code>reverseRangeWithScore</code>函数就是先将指定key下的<a href="https://so.csdn.net/so/search?q=zset&spm=1001.2101.3001.7020">zset</a>类型的有序集合按照score由大到小排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Result <span class="token function">queryBloyOfFollow</span><span class="token punctuation">(</span>Long max<span class="token punctuation">,</span> Integer offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.获取当前用户</span>    Long userId <span class="token operator">=</span> UserHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.查询当前用户收件箱 zrevrangebyscore key max min limit offset count</span>    String feedKey <span class="token operator">=</span> FEED_KEY <span class="token operator">+</span> userId<span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">>></span> typedTuples <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverseRangeByScoreWithScores</span><span class="token punctuation">(</span>feedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>typedTuples<span class="token operator">==</span>null<span class="token operator">||</span>typedTuples<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.解析出收件箱中的blogId,score(时间戳)，offset</span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>typedTuples<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> minTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小时间的相同个数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">></span> typedTuple <span class="token operator">:</span> typedTuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.1 获取id</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>typedTuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//blog的id</span>        <span class="token comment" spellcheck="true">//3.2 获取分数(时间戳)</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> typedTuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">==</span> minTime<span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            minTime <span class="token operator">=</span> time<span class="token punctuation">;</span>            count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4.根据blogId查找blog</span>    String idStr <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"ORDER BY FIELD(id, "</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4.1 查询blog有关的用户</span>        <span class="token function">queryBlogUser</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.2 查询blog是否被点过赞</span>        <span class="token function">isLikeBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5.封装并返回</span>    ScrollResult r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>blogs<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setMinTime</span><span class="token punctuation">(</span>minTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还有<strong>bitmap、geohash、hyperloglog</strong>等数据结构，不常用就先不写了。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文-Redis学习记录1</title>
      <link href="/2023/08/08/java-ba-gu-wen-redis-xue-xi-ji-lu-1/"/>
      <url>/2023/08/08/java-ba-gu-wen-redis-xue-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis学习记录1"><a href="#Redis学习记录1" class="headerlink" title="Redis学习记录1"></a>Redis学习记录1</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="定义概念-："><a href="#定义概念-：" class="headerlink" title="定义概念 ："></a>定义概念 ：</h3><p>缓存穿透是指查询一个一定<strong>不存在</strong>的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。</p><p>比如<a href="http://localhost:15080/vat-admin-gateway/rc/rcModel/selectById/id=0">http://localhost:15080/vat-admin-gateway/rc/rcModel/selectById/id=0</a></p><p>显然id不能等于0，从1开始</p><h3 id="解决方案-："><a href="#解决方案-：" class="headerlink" title="解决方案 ："></a>解决方案 ：</h3><p>（1）业务层校验，先对参数进行校验，id小于等于0的直接返回错误请求。</p><p>（2）缓存空对象：在没有的数据中存一个null，而这些空的对象会设置一个有效期）</p><p>  (3)  布隆过滤器。  先访问布隆过滤器，再访问Redis,再访问数据库</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808095355913.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808095515637.png"></p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="定义概念："><a href="#定义概念：" class="headerlink" title="定义概念："></a>定义概念：</h3><p>缓存击穿的意思是对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p> 1.粗暴的设置永不过期  2.定时更新过期时间 3.设置互斥锁  4.逻辑过期</p><p>①、设置热点数据永不过期</p><p>对于某个需要频繁获取的信息，缓存在Redis中，并设置其永不过期。当然这种方式比较粗暴，对于某些业务场景是不适合的。</p><p>②、定时更新</p><p>比如这个热点数据的过期时间是1h，那么每到59minutes时，通过定时任务去更新这个热点key，并重新设置其过期时间。</p><p>③、互斥锁</p><p>这是解决缓存穿透比较常用的方法。</p><p>互斥锁简单来说就是在Redis中根据key获得的value值为空时，先锁上，然后从数据库加载，加载完毕，释放锁。若其他线程也在请求该key时，发现获取锁失败，则睡眠一段时间（比如100ms）后重试。</p><p>④、逻辑过期</p><p>1)：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间</p><p>2)：当查询的时候，从redis取出数据后判断时间是否过期</p><p>3)：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808100334176.png"></p><h2 id="缓存雪崩："><a href="#缓存雪崩：" class="headerlink" title="缓存雪崩："></a>缓存雪崩：</h2><h3 id="定义概念：-1"><a href="#定义概念：-1" class="headerlink" title="定义概念："></a>定义概念：</h3><p>缓存雪崩意思是设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB 瞬时压力过重雪崩。与缓存击穿的区别：雪崩是很多key，击穿是某一个key缓存。</p><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p>主要是可以将缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><p>当然也可以利用Redis的集群提高服务的可用性。（哨兵模式、集群模式）；给缓存业务添加降级限流策略（nginx或spring cloud gateway）；给业务添加多级缓存</p><h2 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h2><p>redis做为缓存，mysql的数据如何与redis进行同步呢？ 要根据业务场景来回答</p><h3 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h3><p>我们采用的是redisson实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808101742500.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808101752281.png"></p><p>排他锁是如何保证读写、读读互斥的呢？</p><p>排他锁底层使用也是setnx，保证了同时只能有一个线程操作锁住的方法</p><h3 id="延时双删（被抛弃"><a href="#延时双删（被抛弃" class="headerlink" title="延时双删（被抛弃)"></a>延时双删（被抛弃)</h3><p><strong>面试官</strong>：你听说过延时双删吗？为什么不用它呢？</p><p><strong>候选人</strong>：延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。</p><p>数据工作的大致流程：</p><ol><li>服务节点删除 redis 主库数据。</li><li>服务节点修改 mysql 主库数据。</li><li>服务节点使得当前业务处理 <code>等待一段时间</code>，等 redis 和 mysql 主从节点数据同步成功。</li><li>服务节点从 redis 主库删除数据。</li><li>当前或其它服务节点读取 redis 从库数据，发现 redis 从库没有数据，从 mysql 从库读取数据，并写入 redis 主库。</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808101941931.png"></p><h3 id="数据同步允许延时"><a href="#数据同步允许延时" class="headerlink" title="数据同步允许延时"></a>数据同步允许延时</h3><p>我们当时采用的阿里的canal组件实现数据同步：不需要更改业务代码，部署一个canal服务。canal服务把自己伪装成mysql的一个从节点，当mysql数据更新以后，canal会读取binlog数据，然后在通过canal的客户端获取到数据，更新缓存即可。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808104853363.png"></p><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>在Redis中提供了两种数据持久化的方式：1、RDB  2、AOF</p><p>RDB[全称Redis Database Backup file（Redis数据备份文件)]是一个快照文件，它是把redis内存存储的数据写到磁盘上，当redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808105409774.png"></p><p>AOF[全称为Append Only File（追加文件）]的含义是追加文件，当redis操作写命令的时候，都会存储这个文件中，当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据</p><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808105443306.png"></p><p>RDB因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用AOF来恢复数据，虽然AOF恢复的速度慢一些，但是它丢数据的风险要小很多，在AOF文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230808105645689.png"></p><h2 id="数据过期策略"><a href="#数据过期策略" class="headerlink" title="数据过期策略"></a>数据过期策略</h2><p>惰性删除和定期删除结合使用</p><p>惰性删除：设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key [缺点：对内存不友好，如果一个key已经过期，但是一直没有使用，那么该key就会一直存在内存中，内存永远不会释放]</p><p>定期删除：每隔一段时间，我们就对一些key进行检查，删除里面过期的key(从一定数量的数据库中取出一定数量的随机key进行检查，并删除其中的过期key)。[缺点：难以确定删除操作执行的时长和频率]</p><p>定期清理有两种模式：</p><p>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的hz 选项来调整这个次数</p><p>FAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</p><h2 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h2><p>假如缓存过多，内存是有限的，内存被占满了怎么办？</p><p>Redis支持8种不同策略来选择要删除的key：（可以在redis的配置文件中配置)</p><ol><li>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random：对全体key ，随机进行淘汰。</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。</li><li>allkeys-lru： 对全体key，基于LRU算法进行淘汰</li><li>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</li></ol><p><strong>LRU</strong>（<strong>L</strong>east <strong>R</strong>ecently <strong>U</strong>sed）最近最少使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p><p><strong>LFU</strong>（<strong>L</strong>east <strong>F</strong>requently <strong>U</strong>sed）最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</p><p><strong>使用建议：</strong></p><p>1.优先使用 allkeys-lru 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。</p><p>2.如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 allkeys-random，随机选择淘汰。</p><p>3.如果业务中有置顶的需求，可以使用 volatile-lru 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。</p><p>4.如果业务中有短时高频访问的数据，可以使用 allkeys-lfu 或 volatile-lfu 策略。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>为什么要用分布式锁？   因为一份代码会被nginx反向代理，负载均衡到多台服务器。这样一般的锁（JVM监控的锁）就不可以了。</p><p>Redisson实现的分布式锁。底层是setnx和Lua脚本</p><p>在redisson的分布式锁中，为了控制锁的有效时长，提供了一个WatchDog(看门狗），一个线程获取锁成功以后， WatchDog会给持有锁的线程续期（默认是每隔10秒续期一次）</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809094059732.png"></p><ol><li>watch dog 在当前节点存活时每10s给分布式锁的key续期 30s；</li><li>watch dog 机制启动，且代码中没有释放锁操作时，watch dog 会不断的给锁续期；</li><li>从可2得出，如果程序释放锁操作时因为异常没有被执行，那么锁无法被释放，所以释放锁操作一定要放到 finally {} 中；</li></ol><p>tryLock的第一个参数是尝试时间，第二个参数是预计运行业务时间。如果有第二个参数，则不会触发看门狗机制。如果没有第二个参数，默认续30s,每10s续一次。</p><p>lock的参数是预计运行业务时间（也就是叫自动释放时间），有此参数则不会触发看门狗机制，没有则会触发。还是直接用tryLock吧。lock() <strong>一直</strong>等锁释放；tryLock() 获取到锁返回<strong>true</strong>，获取不到锁并直接返回<strong>false</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">redissonDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1. 普通的可重入锁</span>    RLock lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"generalLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿锁失败时会不停的重试</span>    <span class="token comment" spellcheck="true">// 具有Watch Dog 自动延期机制 默认续30s 每隔30/3=10 秒续到30s</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试拿锁10s后停止重试,返回false</span>    <span class="token comment" spellcheck="true">// 具有Watch Dog 自动延期机制 默认续30s</span>    <span class="token keyword">boolean</span> res1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿锁失败时会不停的重试</span>    <span class="token comment" spellcheck="true">// 没有Watch Dog ，10s后自动释放</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试拿锁100s后停止重试,返回false</span>    <span class="token comment" spellcheck="true">// 没有Watch Dog ，10s后自动释放</span>    <span class="token keyword">boolean</span> res2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 公平锁 保证 Redisson 客户端线程将以其请求的顺序获得锁</span>    RLock fairLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getFairLock</span><span class="token punctuation">(</span><span class="token string">"fairLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3. 读写锁 没错与JDK中ReentrantLock的读写锁效果一样</span>    RReadWriteLock readWriteLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">"readWriteLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Redisson实现的分布式锁。可重入。这样做是为了避免死锁的产生，判断是否是当前线程持有的锁。如果是当前线程，就会计数。释放锁就会减一。在存储此数据的时候用的hash.大key是业务，小key是当前线程的唯一标识（比如线程Id)，value是当前重入的次数。</p><p>redisson实现的分布式锁不能解决主从一致问题。用redisson提供的红锁（锁一半以上从节点）效率太低了。如果要保证强一致性，建议使用zookeeper实现的分布式锁。</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><p>一般都是一主多从，主节点负责写数据，从节点负责读数据</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809102517448.png"></p><p><strong>全量同步</strong>：</p><p>1.从节点请求主节点同步数据（replication id、 offset ）</p><p>2.主节点判断是否是第一次请求（判断replication id是不是一样），是第一次就与从节点同步版本信息（replication id和offset）</p><p>3.主节点执行bgsave，生成rdb文件后，发送给从节点去执行</p><p>4.在rdb生成执行期间，主节点会以命令的方式记录到缓冲区（一个日志文件）</p><p>5.把生成之后的命令日志文件发送给从节点进行同步</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809102528462.png"></p><p><strong>增量同步</strong>：</p><p>1.从节点请求主节点同步数据，主节点判断不是第一次请求，不是第一次就获取从节点的offset值</p><p>2.主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809103042296.png"></p><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令：</p><p>•主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线</strong>。</p><p>•客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例<strong>客观下线</strong>。quorum值最好超过Sentinel实例数量的一半。</p><h3 id="哨兵选主规则"><a href="#哨兵选主规则" class="headerlink" title="哨兵选主规则"></a>哨兵选主规则</h3><p>•首先判断主与从节点断开时间长短，如超过指定值就排该从节点</p><p>•然后判断从节点的slave-priority值，越小优先级越高</p><p><strong>•如果slave-prority一样，则判断slave节点的offset值，越大优先级越高</strong>（这个代表的是数据是否是最新的版本）</p><p>•最后是判断slave节点的运行id大小，越小优先级越高。</p><h3 id="redis脑裂解决："><a href="#redis脑裂解决：" class="headerlink" title="redis脑裂解决："></a>redis脑裂解决：</h3><p>Redis 中有两个关键的配置项可以解决这个问题，分别是 <strong>min-slaves-to-write（最小从服务器数）</strong> 和 <strong>min-slaves-max-lag（从连接的最大延迟时间）</strong>。</p><p><strong>min-slaves-to-write</strong> 是指主库最少得有 N 个健康的从库存活才能执行写命令。</p><p><strong>min-slaves-max-lag</strong> 设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失。</p><h3 id="你们项目用的是单点还是集群，哪种集群"><a href="#你们项目用的是单点还是集群，哪种集群" class="headerlink" title="你们项目用的是单点还是集群，哪种集群"></a>你们项目用的是单点还是集群，哪种集群</h3><p>主从（1主1从）+哨兵就可以了。单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群，因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量网络带宽，也不能使用lua脚本和事务。</p><h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809104531240.png"></p><h3 id="Redis分片集群中数据是怎么存储和读取的？"><a href="#Redis分片集群中数据是怎么存储和读取的？" class="headerlink" title="Redis分片集群中数据是怎么存储和读取的？"></a>Redis分片集群中数据是怎么存储和读取的？</h3><p>lRedis 分片集群引入了哈希槽的概念，Redis 集群有 16384 个哈希槽</p><p>l将16384个插槽分配到不同的实例</p><p>l读写数据：根据key的有效部分计算哈希值，对16384取余（有效部分，如果key前面有大括号，大括号的内容就是有效部分，如果没有，则以key本身做为有效部分）余数做为插槽，寻找插槽所在的实例</p><h2 id="Redis是单线程的，但是为什么还那么快"><a href="#Redis是单线程的，但是为什么还那么快" class="headerlink" title="Redis是单线程的，但是为什么还那么快"></a>Redis是单线程的，但是为什么还那么快</h2><ol><li>Redis是纯内存操作，执行速度非常快</li><li>采用单线程，避免不必要的上下文切换可竞争条件，多线程还要考虑线程安全问题</li><li>使用I&#x2F;O多路复用模型，非阻塞IO</li></ol><h2 id="能解释一下I-x2F-O多路复用模型？"><a href="#能解释一下I-x2F-O多路复用模型？" class="headerlink" title="能解释一下I&#x2F;O多路复用模型？"></a>能解释一下I&#x2F;O多路复用模型？</h2><p>Redis是纯内存操作，执行速度非常快，它的性能瓶颈是网络延迟而不是执行速度， I&#x2F;O多路复用模型主要就是实现了高效的网络请求</p><p>IO多路复用监听的是socket集合，而普通的阻塞IO和非阻塞IO都是只监听一个socket.阻塞IO就是在第一步等待，非阻塞就是不停重试，非阻塞IO感觉好笨。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/Java2023%E5%85%AB%E8%82%A1%E6%96%87/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/image/image-20230809105420644.png"></p><p>候选人:嗯~~，I&#x2F;O多路复用是指利用单个线程来同时监听多个Socket，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I&#x2F;O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p><p>其中Redis的网络模型就是使用I&#x2F;O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器;<br>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p><h2 id="StringRedisTemplate-与-RedisTemplate的区别"><a href="#StringRedisTemplate-与-RedisTemplate的区别" class="headerlink" title="StringRedisTemplate 与 RedisTemplate的区别"></a>StringRedisTemplate 与 RedisTemplate的区别</h2><p>前者继承后者，一般用前者。</p><p>最大不同在于序列化器不同。所以不能混用。不如在RDM客户端中，redisTemplate存储的东西为乱码，而stringRedisTemplate存储的东西为可见的字符串。</p><h2 id="StringRedisTemplate的常用方法"><a href="#StringRedisTemplate的常用方法" class="headerlink" title="StringRedisTemplate的常用方法"></a>StringRedisTemplate的常用方法</h2><p><a href="https://blog.csdn.net/weixin_43835717/article/details/92802040">https://blog.csdn.net/weixin_43835717/article/details/92802040</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录3</title>
      <link href="/2023/08/06/xiang-mu-zi-xue-ji-lu-3/"/>
      <url>/2023/08/06/xiang-mu-zi-xue-ji-lu-3/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录3"><a href="#项目自学记录3" class="headerlink" title="项目自学记录3"></a>项目自学记录3</h1><h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>instanceof 运算符用于测试对象是否是指定类型（类或子类或接口）的实例。</p><pre class=" language-java"><code class="language-java">Simple1 s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Simple1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Simple1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true  </span></code></pre><p>子类类型的对象也是父类的一种类型。例如，如果 Dog 扩展了 Animal，那么 Dog 的对象可以被 Dog 或 Animal 类引用。</p><pre class=" language-java"><code class="language-java">Dog1 d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true  </span></code></pre><p>对于Null值，如果我们对具有空值的变量应用 instanceof 运算符，它会返回 false。</p><pre class=" language-java"><code class="language-java">Dog d<span class="token operator">=</span>null<span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>使用 java instanceof 运算符进行向下转换</strong></p><p>当子类类型引用父类的对象时，称为向下转型。</p><p>如直接执行，编译器会 Compilation error。如果通过类型转换执行，则会抛出 ClassCastException。但是我们使用 instanceof 运算符，向下转型是可能的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         Dog d<span class="token operator">=</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向下转型 </span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向下转换执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Animal a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Dog<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//这样是可行 的</span></code></pre><h2 id="前端生成按钮"><a href="#前端生成按钮" class="headerlink" title="前端生成按钮"></a>前端生成按钮</h2><p>找个位置写一个按钮</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span></code></pre><p>导入一些东西</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/ajax"</span></code></pre><p>在methods里写一个test()方法</p><pre class=" language-js"><code class="language-js">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> param<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/rc/rcModel/selectById"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h2><p>在类前面加上这个注解，就能使用log.info了</p><ul><li>很简单的就是为了能够少写两行代码，不用每次都在类的最前边写上： <code>private static final Logger logger = LoggerFactory.getLogger(this.XXX.class);</code></li></ul><h2 id="判断bool类型是否为null-BooleanUtil"><a href="#判断bool类型是否为null-BooleanUtil" class="headerlink" title="判断bool类型是否为null-BooleanUtil"></a>判断bool类型是否为null-BooleanUtil</h2><p>要用BooleanUtil.isFalse()更加安全</p><p>BooleanUtil.isTrue()也行</p><h2 id="数据库用In，不会用你给的数据"><a href="#数据库用In，不会用你给的数据" class="headerlink" title="数据库用In，不会用你给的数据"></a>数据库用In，不会用你给的数据</h2><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%953/image/image-20230806232112667.png"></p><p>我想让你先返回5号用户，再返回1号用户，要用order by field</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E8%AE%B0%E5%BD%953/image/image-20230806232210840.png"></p><p>在JAVA种用mp写</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 2.解析出其中的用户id</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids <span class="token operator">=</span> top5<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Long<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String idStr <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)</span>List<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> userDTOS <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"ORDER BY FIELD(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> UserDTO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用last拼接一下</p><h2 id="根据一个对象中的boolean去排序"><a href="#根据一个对象中的boolean去排序" class="headerlink" title="根据一个对象中的boolean去排序"></a>根据一个对象中的boolean去排序</h2><pre class=" language-java"><code class="language-java">rcRiskDefDomainList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">isRefByModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> o2<span class="token punctuation">.</span><span class="token function">isRefByModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">isRefByModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Mysql中的自定义排序，order-by-field"><a href="#Mysql中的自定义排序，order-by-field" class="headerlink" title="Mysql中的自定义排序，order by field"></a>Mysql中的自定义排序，order by field</h2><p>select * from driver_log order by field(name,‘zhangsan’,‘lisi’,‘wangwu’);</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    userName<span class="token punctuation">,</span>department<span class="token punctuation">,</span>    team<span class="token punctuation">,</span>professionalClass<span class="token punctuation">,</span>    assesser<span class="token punctuation">,</span>finalLevel<span class="token keyword">FROM</span> ws_performanceassess_maintest<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">if</span><span class="token punctuation">(</span>professionalClass<span class="token operator">=</span><span class="token string">'管理'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FIELD<span class="token punctuation">(</span>department<span class="token punctuation">,</span><span class="token string">'智能软件业务部'</span><span class="token punctuation">,</span><span class="token string">'DVB产品业务部'</span><span class="token punctuation">,</span><span class="token string">'研发设计部'</span><span class="token punctuation">,</span><span class="token string">'综合测试部'</span><span class="token punctuation">,</span><span class="token string">'预研产品业务部'</span><span class="token punctuation">,</span><span class="token string">'IT部'</span><span class="token punctuation">,</span><span class="token string">'自动化业务部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>team<span class="token punctuation">,</span>FIELD<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>professionalClass<span class="token punctuation">,</span><span class="token string">'高级工程师'</span><span class="token punctuation">,</span><span class="token string">'中高级工程师'</span><span class="token punctuation">,</span><span class="token string">'中级工程师'</span><span class="token punctuation">,</span><span class="token string">'初级工程师A'</span><span class="token punctuation">,</span><span class="token string">'初级工程师B'</span><span class="token punctuation">,</span><span class="token string">'初级工程师C'</span><span class="token punctuation">)</span></code></pre><p>FIELD()函数是将参数1的字段对后续参数进行比较，并返回1、2、3等等，如果遇到null或者没有在结果集上存在的数据，则返回0，然后根据升序进行排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//5.根据id查询shop</span>String idStr <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3,4...</span><span class="token comment" spellcheck="true">// .... where id in #{ids} order by field(id,1,2,3,4...) 根据id排序</span>List<span class="token operator">&lt;</span>Shop<span class="token operator">></span> shops <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by field(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="函数中传入实体复杂类，是按引用传。传入普通的类型，是按值传-还有修改"><a href="#函数中传入实体复杂类，是按引用传。传入普通的类型，是按值传-还有修改" class="headerlink" title="函数中传入实体复杂类，是按引用传。传入普通的类型，是按值传.还有修改"></a>函数中传入实体复杂类，是按引用传。传入普通的类型，是按值传.还有修改</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User a1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array1<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func1</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 100,100,100 修改成功</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100,100,100  修改成功</span>        <span class="token function">func3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100,100,100  修改失败</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">func</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> array1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token operator">:</span>a<span class="token punctuation">)</span> a1<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="ERROR-operator-does-not-exist-numeric-x3D-character-varying"><a href="#ERROR-operator-does-not-exist-numeric-x3D-character-varying" class="headerlink" title="ERROR: operator does not exist: numeric &#x3D; character varying"></a>ERROR: operator does not exist: numeric &#x3D; character varying</h2><p>在sql里，where model_id &#x3D; #{model_id} 这个一般是数字，而你传进来的是字符串是不行的</p><p>这样就成了 model_id&#x3D;’111’,但是真实的应该是 model_id &#x3D; 111</p><h2 id="注意sql里的数字常量都是单引号’1’而不是”1”"><a href="#注意sql里的数字常量都是单引号’1’而不是”1”" class="headerlink" title="注意sql里的数字常量都是单引号’1’而不是”1”"></a>注意sql里的数字常量都是单引号’1’而不是”1”</h2><h2 id="使用JS脚本处理算术运算"><a href="#使用JS脚本处理算术运算" class="headerlink" title="使用JS脚本处理算术运算"></a>使用JS脚本处理算术运算</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> utils<span class="token punctuation">.</span>JavaScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String expression<span class="token operator">=</span><span class="token string">"5*(3+6)"</span><span class="token punctuation">;</span>        BigDecimal value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>JavaScriptEngine<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"function ss(){ return Number("</span> <span class="token operator">+</span> expression <span class="token operator">+</span> <span class="token string">");} ss();"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>setScale(1,BigDecimal.ROUND_HALF_UP)保留1位小数，四舍五入，2.35变成2.4</p><p>引入一个工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaScriptEngine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ScriptEngine engine<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ScriptEngineManager mgr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            engine <span class="token operator">=</span> mgr<span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="转换-JsonUtils-parseObject"><a href="#转换-JsonUtils-parseObject" class="headerlink" title="转换-JsonUtils.parseObject"></a>转换-JsonUtils.parseObject</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// dto.getRiskIds() 是类似于 {"1" : "1,2,3,5", "2" : "1,2,3"} 的json字符串，模型ID : 风险项ID1,风险项ID2</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>String<span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            map <span class="token operator">=</span> JsonUtils<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getRiskIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"转换风向模型风险项的json失败，json为: "</span> <span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">getRiskIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// key: 模型id value: 风险项ID[]</span>        Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>String<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> riskIds <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>riskIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="关于添加的变量引用的问题"><a href="#关于添加的变量引用的问题" class="headerlink" title="关于添加的变量引用的问题"></a>关于添加的变量引用的问题</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Model model<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>RiskDef<span class="token operator">></span> riskdefList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>RiskDef<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setModelId</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setModelName</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setRiskDefs</span><span class="token punctuation">(</span>riskdefList<span class="token punctuation">)</span><span class="token punctuation">;</span>        riskdefList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RiskDef</span><span class="token punctuation">(</span><span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Model(modelName=www, modelId=222, riskDefs=[RiskDef(riskDefName=qqq)])</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以发现即使添加进去了，也可以修改。因为添加的是地址信息。</p>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于ArrayList的初始化和删除的总结</title>
      <link href="/2023/08/01/guan-yu-arraylist-de-chu-shi-hua-he-shan-chu-de-zong-jie/"/>
      <url>/2023/08/01/guan-yu-arraylist-de-chu-shi-hua-he-shan-chu-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="关于ArrayList的初始化和删除的总结"><a href="#关于ArrayList的初始化和删除的总结" class="headerlink" title="关于ArrayList的初始化和删除的总结"></a>关于ArrayList的初始化和删除的总结</h1><p>转载自我的CSDN：<a href="https://blog.csdn.net/pH2002/article/details/130851820?spm=1001.2014.3001.5501">https://blog.csdn.net/pH2002/article/details/130851820?spm=1001.2014.3001.5501</a></p><h2 id="只删除一个元素"><a href="#只删除一个元素" class="headerlink" title="只删除一个元素"></a>只删除一个元素</h2><p>直接总结：<br>初始化要用Arrays.asList(1,2,3,4,5);  然后再作为参数进入array.addAll()函数里<br>这样就不用调用add函数一个个加了<br>关于删除，有三种写法是正确的<br>第一种是<br>int n&#x3D;array.size();<br>        for(int i&#x3D;0;i&lt;n-1;i++){<br> 如果要提出来，则索引要搞一个n-1<br> 第二种是<br> for(int i&#x3D;0;i&lt;array.size();i++){<br> 因为array.size（）会默认减少1，而且整个数组会往前移动一位<br> 但是我突然发现这样会有一个弊端， 如果是要删除3，并且连续两个元素都是3，则是删不掉的。<br> 第三种是迭代器，不常用。<br> iter.remove();</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array1<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法一，把N提出来，for循环写n-1</span><span class="token comment" spellcheck="true">/*        int n=array.size();        for(int i=0;i&lt;n-1;i++){            if(array.get(i)==3) array.remove(i);            System.out.println(array.get(i));        }      */</span>       <span class="token comment" spellcheck="true">//方法2，如果不提n,默认的array.size()会减1，且数组会自动补充进前面的位置。所以也不会报错</span>        <span class="token comment" spellcheck="true">/*        for(int i=0;i&lt;array.size();i++){            if(array.get(i)==3) array.remove(i);            System.out.println(array.get(i));        }*/</span>        <span class="token comment" spellcheck="true">//会报错，ConcurrentModificationException，源码级别的错误</span>    <span class="token comment" spellcheck="true">/*        for(int j:array){            if(j==3){                array.remove((Integer)j);            }            System.out.println(j);        }    */</span>        <span class="token comment" spellcheck="true">//也是报上面的错误，因为都是迭代器</span>        <span class="token comment" spellcheck="true">/*        Iterator iter=array.iterator();        while(iter.hasNext()){            Object next =  iter.next();            int num=(int)next;            if(num==3){                array.remove((Integer)3);            }        }        */</span>        <span class="token comment" spellcheck="true">//方法3，使用迭代器删除元素，要用iter.remove()</span>        Iterator iter<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object next <span class="token operator">=</span>  iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="可能删除多个元素"><a href="#可能删除多个元素" class="headerlink" title="可能删除多个元素"></a>可能删除多个元素</h2><p>针对于多个元素，要用i- -回调一下索引。</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array1<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//方法2，如果不提n,默认的array.size()会减1，且数组会自动补充进前面的位置。所以也不会报错</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出为[1,2,2,2,4,5]不过array里面最终会是[1,2,4,5]</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录2</title>
      <link href="/2023/07/26/xiang-mu-zi-xue-ji-lu-2/"/>
      <url>/2023/07/26/xiang-mu-zi-xue-ji-lu-2/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录2"><a href="#项目自学记录2" class="headerlink" title="项目自学记录2"></a>项目自学记录2</h1><h2 id="MyBatis中，字符串常量要用单引号"><a href="#MyBatis中，字符串常量要用单引号" class="headerlink" title="MyBatis中，字符串常量要用单引号"></a>MyBatis中，字符串常量要用单引号</h2><p>在MyBatis中，如果你在SQL语句中使用字符串常量，你需要使用单引号将它们括起来。所以，你的SQL语句应该改成这样：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBusinessTypeByDicName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select DISTINCT dic_value    from kb_data_dic    where dic_type = 'business_type' and dic_name = #{BusinessType}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="关于给数组初始化大小并不能让其size为初始值"><a href="#关于给数组初始化大小并不能让其size为初始值" class="headerlink" title="关于给数组初始化大小并不能让其size为初始值"></a>关于给数组初始化大小并不能让其size为初始值</h2><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> aaa<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aaa<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出0</span></code></pre><h2 id="List和Set的转换"><a href="#List和Set的转换" class="headerlink" title="List和Set的转换"></a>List和Set的转换</h2><p>Array 转 list<br>List list &#x3D; Arrays.asList(arr);</p><p>list转array:<br>String[] arr &#x3D; list.toArray(new String[0]);&#x2F;&#x2F;我们一定要在里面指定类型 并且类型必须是引用类型</p><p>list和set的互相转化：（用addAll或者构造器）<br>因为两者都实现了collection接口，collection接口下面有addAll()方法，他可以将list 和set相互转化。<br>另外 我们也可以通过两者的构造函数的形式完成互相转化</p><p>&#x2F;&#x2F;List转Set<br>Set<String> set &#x3D; new HashSet&lt;&gt;(list);<br>List<String> list_1 &#x3D; new ArrayList&lt;&gt;(set);<br>1<br>2<br>3<br>Array和set的相互转化<br>array转化为set: set &#x3D; new HashSet&lt;&gt;(Arrays.asList(arr)); &#x2F;&#x2F;要先将arr转化成list然后再用构造器<br>set转化为array:跟list转array的方式一样 用set.toArray(new String[0])即可。</p><p>总结一下 常用的就是：<br>首先要明白list和set都是collection里面的 所以两者对外和对内转化都有相似性。<br>Arrays.asList() &#x2F;&#x2F;将array转化成list或者set,当然 set需要多加一层构造器<br>Collection.toArray() &#x2F;&#x2F;将list或者set转化成array<br>至于list和set之间的转化 因为他们都是collection下面的 因此可以直接使用Collection.addAll()进行转化 或者直接利用构造器互相转化</p><p>尤其注意：<br>如果arr 是int[] 或者是其他原始类型的数组 那么不能直接用Arrays.asList()进行转化<br>但是如果arr 是Integer[]类型的数组 就可以使用 但是因为大多数情况下不是 所以还是别用了</p><h2 id="MyBatis中返回为List时，resuleType也应该为List中单个元素的类型"><a href="#MyBatis中返回为List时，resuleType也应该为List中单个元素的类型" class="headerlink" title="MyBatis中返回为List时，resuleType也应该为List中单个元素的类型"></a>MyBatis中返回为List时，resuleType也应该为List中单个元素的类型</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTaxFieldsList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT dic_name    FROM kb_data_dic    WHERE p_id = (SELECT id FROM kb_data_dic WHERE dic_type = 'business_type' AND dic_value = #{sourceType})       OR dic_type = 'business_type' AND dic_value = #{sourceType}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>比如上面回返回多个dic_name,要用List接。但是resultType是”string”.</p><h2 id="一个对象的所有属性为null-这个对象也-不为null"><a href="#一个对象的所有属性为null-这个对象也-不为null" class="headerlink" title="一个对象的所有属性为null,这个对象也 不为null"></a>一个对象的所有属性为null,这个对象也 不为null</h2><p> 比如下面的&#x3D;&#x3D;判断是不成立的</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%952/test111.png"></p><p>应该写一个工具类：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 判断对象中的属性值是否都为null</span> <span class="token comment" spellcheck="true">// f.get(object) 获取属性值</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckObjNull</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkObjAllFieldsIsNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field f <span class="token operator">:</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="修改自增主键为正常值（取当前表自增主键的最大值，非1）"><a href="#修改自增主键为正常值（取当前表自增主键的最大值，非1）" class="headerlink" title="修改自增主键为正常值（取当前表自增主键的最大值，非1）"></a>修改自增主键为正常值（取当前表自增主键的最大值，非1）</h2><p>alter table kb_kl_law_ext auto_increment &#x3D; 1</p><p>kb_kl_law_ext 为表名</p><h2 id="关于两个BeanUtils工具类中的copyProperties方法的分析"><a href="#关于两个BeanUtils工具类中的copyProperties方法的分析" class="headerlink" title="关于两个BeanUtils工具类中的copyProperties方法的分析"></a>关于两个BeanUtils工具类中的copyProperties方法的分析</h2><p><a href="https://blog.csdn.net/qgnczmnmn/article/details/109384632">https://blog.csdn.net/qgnczmnmn/article/details/109384632</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//org.springframework.beans.BeanUtils</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//org.apache.commons.beanutils.BeanUtils</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span>Object dest<span class="token punctuation">,</span>Object orig<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>一般使用org.springframework.beans.BeanUtils下的copyProperties方法，报错的概率低。</p><p>BeanUtils.copyProperties属于浅拷贝</p><h2 id="关于日期转换为2023-07-21格式的字符串-x2F-日期的问题（优化版本）"><a href="#关于日期转换为2023-07-21格式的字符串-x2F-日期的问题（优化版本）" class="headerlink" title="关于日期转换为2023-07-21格式的字符串&#x2F;日期的问题（优化版本）"></a>关于日期转换为2023-07-21格式的字符串&#x2F;日期的问题（优化版本）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date postDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String date <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>postDate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>postDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>postDate<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出为</span>Fri Jul <span class="token number">21</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">40</span> CST <span class="token number">2023</span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">21</span></code></pre><h2 id="即使catch字段里return-了，finally里的代码也会执行"><a href="#即使catch字段里return-了，finally里的代码也会执行" class="headerlink" title="即使catch字段里return 了，finally里的代码也会执行"></a>即使catch字段里return 了，finally里的代码也会执行</h2><pre class=" language-java"><code class="language-java"> <span class="token keyword">try</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>           ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><p>其输出结果如下：</p><p>aaa<br>bbb<br>java.lang.ArithmeticException: &#x2F; by zero<br>    at Test.main(Test.java from InputFileObject:15)<br>Disconnected from the target VM, address: ‘127.0.0.1:6294’, transport: ‘socket’</p><h2 id="一个函数怎么返回多个值"><a href="#一个函数怎么返回多个值" class="headerlink" title="一个函数怎么返回多个值"></a>一个函数怎么返回多个值</h2><p>一个函数，即使他的形式参数是数组，修改了数组之后也不会对原来的值产生影响</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">func</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1,2,3,4,5</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">{</span>           a<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>建议这个函数返回一个HashMap</p><h2 id="获取一个绝对路径下的所有文件"><a href="#获取一个绝对路径下的所有文件" class="headerlink" title="获取一个绝对路径下的所有文件"></a>获取一个绝对路径下的所有文件</h2><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Solr删除数据"><a href="#Solr删除数据" class="headerlink" title="Solr删除数据"></a>Solr删除数据</h2><p>当然最好是在Document下删除数据，不过我们solr没有这个按钮</p><p><a href="http://localhost:8004/solr/globalSearch/update?stream.body=%3Cdelete%3E%3Cquery%3EversionId:%5B37696+TO+50275%5D%3C/query%3E%3C/delete%3E&commit=true">http://localhost:8004/solr/globalSearch/update?stream.body=%3Cdelete%3E%3Cquery%3EversionId%3A%5B37696+TO+50275%5D%3C/query%3E%3C/delete%3E&amp;commit=true</a></p><p>query里面为查询条件，内含一部分转义。总之在%3A%5B到%5D%3C之间输入数据就行</p><p>如果是只删除一条数据，versionId:38986  即可</p><p>当然Java程序中也有根据id删除solr索引的</p><h2 id="打增量war包"><a href="#打增量war包" class="headerlink" title="打增量war包"></a>打增量war包</h2><p>1.右键-&gt;子版本-&gt;显示历史-&gt;找到合适的版本-&gt;与本地比较</p><p>2.对于每一个文件，先上面，再下面，下面注意是WEB-INF</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%952/image-20230725160934738.png"></p><p>具体情况依项目而定。</p><h2 id="关于查找一个文件夹下的所有子文件（并且用递归求和）"><a href="#关于查找一个文件夹下的所有子文件（并且用递归求和）" class="headerlink" title="关于查找一个文件夹下的所有子文件（并且用递归求和）"></a>关于查找一个文件夹下的所有子文件（并且用递归求和）</h2><p>因为Java中没用引用，所以传的参数是没用的，无论是int和Integer都没用，只能用int[] 数组</p><p>然后用递归去统计文件和文件夹的数量，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String path<span class="token operator">=</span><span class="token string">"C:\\Users\\qizui\\Desktop\\webINF"</span><span class="token punctuation">;</span>        <span class="token function">getFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFiles</span><span class="token punctuation">(</span>String clientBase<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>clientBase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果这个路径是文件夹</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取路径下的所有文件</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果还是文件夹 递归获取里面的文件 文件夹</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录："</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//继续读取文件夹里面的所有文件</span>                    <span class="token function">getFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件："</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件："</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="给一个路径，获取文件内容"><a href="#给一个路径，获取文件内容" class="headerlink" title="给一个路径，获取文件内容"></a>给一个路径，获取文件内容</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提取文件夹里对应的内容</span>String content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对文件夹里的html文件进行处理</span>File fileExcel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileExcel<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在: "</span> <span class="token operator">+</span> fileExcel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//怎么提示给用户文件不存在呢？</span><span class="token punctuation">}</span>BufferedReader reader <span class="token operator">=</span> null<span class="token punctuation">;</span>StringBuilder contentBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建文件读取器</span>    InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileExcel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>    String line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加每行内容到 StringBuilder</span>        contentBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// contentBuilder.append(System.lineSeparator());</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提取的html的文件内容</span>    content <span class="token operator">=</span> contentBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法读取文件: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 关闭文件读取器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">!=</span> null<span class="token punctuation">)</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法关闭文件读取器: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="判断一个类所有属性为null"><a href="#判断一个类所有属性为null" class="headerlink" title="判断一个类所有属性为null"></a>判断一个类所有属性为null</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> utils<span class="token punctuation">.</span>CheckObjNull<span class="token punctuation">.</span>checkObjAllFieldsIsNull<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Regulation regulation<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Regulation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>regulation<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"regulation为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkObjAllFieldsIsNull</span><span class="token punctuation">(</span>regulation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"regulation的所有属性为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只会输出下面，已经new了对象之后，则恒不为null</span></code></pre><p>对应的工具类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckObjNull</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkObjAllFieldsIsNull</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field f <span class="token operator">:</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果你新new了一个对象，则这个对象是不为null的，即使他的属性都为null,你要通过上述函数来判断。</p><p>其中StringUtils.isNotBlank要导入下面的包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目自学记录1</title>
      <link href="/2023/07/16/xiang-mu-zi-xue-ji-lu-1/"/>
      <url>/2023/07/16/xiang-mu-zi-xue-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="项目自学记录1"><a href="#项目自学记录1" class="headerlink" title="项目自学记录1"></a>项目自学记录1</h1><h2 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="@RequestParam注解"></a>@RequestParam注解</h2><p><a href="https://www.cnblogs.com/tomingto/p/11377138.html">https://www.cnblogs.com/tomingto/p/11377138.html</a></p><p>有三个属性：</p><p> （1）value：请求参数名（必须配置）</p><p> 不对，是不一定要配。如果前端传的数据和后端的变量名一样，就不用。如果不一样，value里的值就是前端传的值。</p><p>（2）required：是否必需，默认为 true，即 请求中必须包含该参数，如果没有包含，将会抛出异常（可选配置）</p><p>（3）defaultValue：默认值，如果设置了该值，required 将自动设为 false，无论你是否配置了required，配置了什么值，都是 false（可选配置）</p><h2 id="ResponseBody注解-和-RequestBody-注解"><a href="#ResponseBody注解-和-RequestBody-注解" class="headerlink" title="@ResponseBody注解 和 @RequestBody 注解"></a>@ResponseBody注解 和 @RequestBody 注解</h2><p>先看代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@CrossOrigin</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"api/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User requestUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 html 标签进行转义，防止 XSS 攻击</span>        String username <span class="token operator">=</span> requestUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> HtmlUtils<span class="token punctuation">.</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span> requestUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String message <span class="token operator">=</span> <span class="token string">"账号密码错误"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从位置可以看出来，@ResponseBody是支持返回值为JSON.或者说，@ResponseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。 而@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的）。</p><h2 id="在MySQL中datetime和和-timestamp-的区别与选择"><a href="#在MySQL中datetime和和-timestamp-的区别与选择" class="headerlink" title="在MySQL中datetime和和 timestamp 的区别与选择"></a>在MySQL中datetime和和 timestamp 的区别与选择</h2><p>1.1 占用空间</p><p>类型 占据字节 表示形式</p><p>datetime 8 字节 yyyy-mm-dd hh:mm:ss</p><p>timestamp 4 字节 yyyy-mm-dd hh:mm:ss</p><p>1.2 表示范围</p><p>类型 表示范围</p><p>datetime ‘1000-01-01 00:00:00.000000’ to ‘9999-12-31 23:59:59.999999’</p><p>timestamp ‘1970-01-01 00:00:01.000000’ to ‘2038-01-19 03:14:07.999999’</p><p>timestamp翻译为汉语即”时间戳”，它是当前时间到 Unix元年(1970 年 1 月 1 日 0 时 0 分 0 秒)的秒数。对于某些时间的计算，如果是以 datetime 的形式会比较困难，假如我是 1994-1-20 06:06:06 出生，现在的时间是 2016-10-1 20:04:50 ，<strong>那么要计算我活了多少秒钟用 datetime 还需要函数进行转换，但是 timestamp 直接相减就行。</strong></p><p>1.3 时区</p><p>timestamp 只占 4 个字节，而且是以utc的格式储存， 它会自动检索当前时区并进行转换。</p><p>datetime以 8 个字节储存，不会进行时区的检索.</p><p>也就是说，对于timestamp来说，如果储存时的时区和检索时的时区不一样，那么拿出来的数据也不一样。对于datetime来说，存什么拿到的就是什么。</p><p>还有一个区别就是如果存进去的是NULL，timestamp会自动储存当前时间，而 datetime会储存 NULL。</p><h2 id="在mysql中存储数据，长文本"><a href="#在mysql中存储数据，长文本" class="headerlink" title="在mysql中存储数据，长文本"></a>在mysql中存储数据，长文本</h2><p>TINYTEXT -&gt; 256 bytes.</p><p>TEXT -&gt;  64kb</p><p>MEDIUMTEXT -&gt; 16MB</p><p>LONGTEXT-&gt; 4GB</p><p>CHAR 常用来存储固定长度的字符串，VARCHAR 常用来存储可变长度的字符串</p><p>VARCHAR(M) 能设置的最大长度</p><p>M 限制了 VARCHAR 能存储的字符串的最大长度，注意，是字符，不是字节，其有效值范围为 0 ~ 65535。虽然可设置的范围是 0 ～ 65535，但 M 真的就能设置为65535 吗？</p><p>对于utf8mb4字符集，M最大只能设置为16383。对于utf8字符集，M最大只能设置为21845。这两个数值是怎么计算出来的呢？</p><p>在utf8mb4字符集中，最多需要4个字节来表示一个字符，所以 65535 &#x2F; 4 &#x3D; 16383 。而在utf8字符集中，最多需要3个字节来表示一个字符，所以 65535 &#x2F; 3 &#x3D; 21845。</p><p>由此来看，在设置 M 的大小时，起决定作用的并不是 M 的有效值范围（0 ~ 65535），而是 M * 字符集的最大字节数不能超过65535个字节。</p><p>为什么不能超过 65535 字节呢？因为MySQL限制了一条记录的最大长度就是 65535 字节</p><h2 id="自动生成mapper文件和实体类（通过数据库的表）"><a href="#自动生成mapper文件和实体类（通过数据库的表）" class="headerlink" title="自动生成mapper文件和实体类（通过数据库的表）"></a>自动生成mapper文件和实体类（通过数据库的表）</h2><p>使用mybatisX插件<a href="https://www.cnblogs.com/6543x1/p/15484098.html">https://www.cnblogs.com/6543x1/p/15484098.html</a></p><p>不过一些参数要修改</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230630104937075.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230630104946358.png"></p><p>不选options里的Actual Column才能进行驼峰体的大小写转换。</p><p>然后上面第一张图生成的是实体类，第二张图生成的是下面俩文件，一个mapper一个xml</p><h2 id="mybatis插入操作的一些配置"><a href="#mybatis插入操作的一些配置" class="headerlink" title="mybatis插入操作的一些配置"></a>mybatis插入操作的一些配置</h2><p><a href="https://blog.csdn.net/zongf0504/article/details/100103946">https://blog.csdn.net/zongf0504/article/details/100103946</a></p><p>insert 有几个常用的属性:</p><p>id: sql 片段在命名空间内的唯一标识. 和mapper 中方法名保持一致<br>useGeneratedKeys: 是否回填自动生成的主键<br>keyProperty: 主键回填到哪个属性<br>keyColumn: 主键回填的字段名, 可省略<br>parameterType: 参数类型, 通常都可以省略.<br>flushCache: 是否刷新(清空)一级缓存和二级缓存, 默认为true. 笔者尝试设置为false,并不生效. 所以使用默认即可.<br>timeout: sql 执行超时时间, 默认未设置, 由数据库驱动决定.<br>statementType: 执行sql时使用的statement类型, 默认为PREPARED. 可选值为:STATEMENT，PREPARED 或 CALLABLE 的一个</p><h2 id="mybatis查询操作的一些操作"><a href="#mybatis查询操作的一些操作" class="headerlink" title="mybatis查询操作的一些操作"></a>mybatis查询操作的一些操作</h2><p>select的一个传参操作。要用到@Param</p><p>@Select(“select id,user_name,password,age from tb_users2 where id &#x3D; #{id} and user_name &#x3D; #{name} “)<br>User getUser5(@Param(“id”) Long id,@Param(“name”) String username);</p><h2 id="前后端参数名称不一致时"><a href="#前后端参数名称不一致时" class="headerlink" title="前后端参数名称不一致时"></a>前后端参数名称不一致时</h2><p>对于函数里的单个参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> LogUtils <span class="token function">getMessage</span><span class="token punctuation">(</span>　　<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>defaultValue<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String username<span class="token punctuation">,</span>　　Integer pageCurrent<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里的value为前端传递的参数名称，required=false为前端也可以不传此参数</span><span class="token comment" spellcheck="true">//defaultValue="0" 若是没有传这个参数，这个参数默认为0</span></code></pre><p>对于函数里面是一个大对象的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"webParam"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String controllerParam<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="将日期转为2023-07-09的写法"><a href="#将日期转为2023-07-09的写法" class="headerlink" title="将日期转为2023-07-09的写法"></a>将日期转为2023-07-09的写法</h2><pre><code>SimpleDateFormat sim1 = new SimpleDateFormat(&quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;, Locale.US);SimpleDateFormat sim2 = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);String s1 = &quot;Tue Sep 08 23:58:09 CST 2020&quot;;try &#123;    Date date = sim1.parse(s1);    System.out.println(date);    System.out.println(sim2.format(date));&#125;catch (ParseException e )&#123;    e.printStackTrace();&#125;</code></pre><p>输出为：</p><pre><code>Tue Sep 08 23:58:09 CST 20202020-09-08 23:58:09</code></pre><p>但是你要记得转字符串 toString()  和 取子串subString(startindex,endindex);</p><h2 id="将2023-07-09字符串转为为Date类型"><a href="#将2023-07-09字符串转为为Date类型" class="headerlink" title="将2023-07-09字符串转为为Date类型"></a>将2023-07-09字符串转为为Date类型</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        String dateStr1 <span class="token operator">=</span> <span class="token string">"2023-04-08 15:39:25"</span><span class="token punctuation">;</span>        String dateStr2 <span class="token operator">=</span><span class="token string">"2023-04-05"</span><span class="token punctuation">;</span>        SimpleDateFormat sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date dateResult <span class="token operator">=</span> null<span class="token punctuation">;</span>        dateResult <span class="token operator">=</span> sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateResult<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以转换，转换结果为凌晨0点</p><p>Sat Apr 08 00:00:00 CST 2023</p><h2 id="一些解除疑惑：函数名一样，父类子类调用"><a href="#一些解除疑惑：函数名一样，父类子类调用" class="headerlink" title="一些解除疑惑：函数名一样，父类子类调用"></a>一些解除疑惑：函数名一样，父类子类调用</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>ExtTest test1<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>ExtTest2 test1<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExtTest t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ExtTest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExtTest2 t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ExtTest2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//test1</span>        <span class="token function">func</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//test2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ExtTest2是ExtTest1 的子类，发现是符合预期的输出的。</p><h2 id="Solr查询语法-x2F-参数-和-基础知识"><a href="#Solr查询语法-x2F-参数-和-基础知识" class="headerlink" title="Solr查询语法&#x2F;参数 和 基础知识"></a>Solr查询语法&#x2F;参数 和 基础知识</h2><p>基本查询参数</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>q</td><td>查询条件，必填项</td></tr><tr><td>fq</td><td>过滤查询</td></tr><tr><td>start</td><td>结果集第一条记录的偏移量，用于分页，默认值0</td></tr><tr><td>rows</td><td>返回文档的记录数，用于分页，默认值10</td></tr><tr><td>sort</td><td>排序，格式：sort&#x3D;&#96;<field name>+&lt;asc</td></tr><tr><td>fl</td><td>指定返回的域名，多个域名用逗号或者空格分隔，默认返回所有域</td></tr><tr><td>wt</td><td>指定响应的格式，例如xml、json等；</td></tr></tbody></table><p>在Solr中提供了运算符，通过运算符我们就可以进行组合查询。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>?</td><td>通配符，替代任意单个字符（不能在检索的项开始使用*或者?符号）</td></tr><tr><td>*</td><td>通配符，替代任意多个字符（不能在检索的项开始使用*或者?符号）</td></tr><tr><td>~</td><td>表示相似度查询，如查询类似于”roam”的词，我们可以这样写：roam<del>将找到形如foam和roams的单词；roam</del>0.8，检索返回相似度在0.8以上的文档。 邻近检索，如检索相隔10个单词的”apache”和”jakarta”，”jakarta apache”~10</td></tr><tr><td>AND</td><td>表示且，等同于 “&amp;&amp;”</td></tr><tr><td>OR</td><td>表示或，等同于 “||”</td></tr><tr><td>NOT</td><td>表示否</td></tr><tr><td>()</td><td>用于构成子查询</td></tr><tr><td>[]</td><td>范围查询，包含头尾</td></tr><tr><td>{}</td><td>范围查询，不包含头尾</td></tr><tr><td>+</td><td>存在运算符，表示文档中必须存在 “+” 号后的项</td></tr><tr><td>-</td><td>不存在运算符，表示文档中不包含 “-” 号后的项</td></tr></tbody></table><p>q和fq两个参数的区别</p><p>​从使用上：q必须传递参数,fq可选的参数。在执行查询的时候，必须有q,而fq可以有，也可以没有；</p><p>​从功能上：q有2项功能</p><p>​第一项：根据用户输入的查询条件，查询符合条件的文档。</p><p>​第二项：使用相关性算法,匹配到的文档进行相关度排序。</p><p>​fq只有一项功能</p><p>​对匹配到的文档进行过滤,不会影响相关度排序,效率高；</p><p>特殊情况：某些文档book_price域值为null,null值排在最前面还是最后面。</p><p>​定义域类型的时候需要指定2个属性sortMissingLast,sortMissingFirst</p><p>​sortMissingLast&#x3D;true,无论升序还是降序，null值都排在最后</p><p>​sortMissingFirst&#x3D;true,无论升序还是降序，null值都排在最前</p><pre><code>&lt;fieldtype name=&quot;fieldName&quot; class=&quot;xx&quot; sortMissingLast=&quot;true&quot; sortMissingFirst=&quot;false&quot;/&gt;</code></pre><p>上面是在managed-schema里写的</p><p><strong>facet 是 solr 的高级搜索功能之一 ，可以根据用户搜索条件 ,按照指定域进行分组并统计,类似于关系型数据库中的group by分组查询；</strong></p><pre><code>http://localhost:8080/solr/collection1/select?q=item_title:手机&amp;facet=on&amp;facet.field=item_brand</code></pre><p>facet下面也有很多参数。facet.range下面也有很多参数。</p><p>solr group作用：将具有相同字段值的文档分组，并返回每个组的顶部文档。 Group和Facet的概念很像，都是用来分组,但是分组的结果是不同；</p><pre><code>q=item_title:手机&amp;group=true&amp;group.field=item_brandgroup分组结果和Fact分组查询的结果完全不同，他把同组的文档放在一起，显示该组文档数量，仅仅展示了第一个文档。</code></pre><p>​高亮显示是指根据关键字搜索文档的时候，显示的页面对关键字给定了特殊样式， 让它显示更加突出，如下面商品搜索中，关键字变成了红色，其实就是给定了红色样 ；</p><p>在Solr中提供了常用的3种高亮的组件（Highlighter）也称为高亮器，来支持高亮查询。</p><p>​Unified Highlighter</p><p>​Unified Highlighter是最新的Highlighter（从Solr6.4开始），它是最性能最突出和最精确的选择。它可以通过插件&#x2F;扩展来处理特定的需求和其他需求。官方建议使用该Highlighter，即使它不是默认值。</p><p>​Original Highlighter</p><p>​Original Highlighter，有时被称为”Standard Highlighter” or “Default Highlighter”，是Solr最初的Highlighter，提供了一些定制选项，曾经一度被选择。它的查询精度足以满足大多数需求，尽管它不如统一的Highlighter完美；</p><p>​FastVector Highlighter</p><p>​FastVector Highlighter特别支持多色高亮显示，一个域中不同的词采用不同的html标签作为前后缀。</p><p>​</p><p>Solr从1.4开始便提供了Query Suggest，Query Suggest目前是各大搜索应用的标配，主要作用是避免用户输入错误的搜索词，同时将用户引导到相应的关键词上进行搜索。Solr内置了Query Suggest的功能，它在Solr里叫做Suggest模块. 使用该模块.我们通常可以实现2种功能。拼写检查(Spell-Checking)，再一个就是自动建议(AutoSuggest)。</p><h2 id="SolrJ"><a href="#SolrJ" class="headerlink" title="SolrJ"></a>SolrJ</h2><p>Solr官方就推出了一套专门操作Solr的java API，叫SolrJ。</p><p>​使用SolrJ操作Solr会比利用RestTemplate来操作Solr要简单。SolrJ底层还是通过使用httpClient中的方法来完成Solr的操作.</p><p>​SolrJ核心的API</p><p>​SolrClient</p><p>​HttpSolrClient：适合于单节点的情况下和Solr进行交互。</p><p>​CloudSolrClient：适合于集群的情况下和Solr进行交互。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>​需求：添加一个图书文档。</p><p>​添加有很多重载方法，SolrJ中支持添加一个文档，也支持一次添加文档集合。</p><pre><code>@Test    public void testAddDocument() throws IOException, SolrServerException &#123;        //创建文档        SolrInputDocument document = new SolrInputDocument();        //指定文档中的域        document.setField(&quot;id&quot;, &quot;889922&quot;);        document.setField(&quot;item_title&quot;,&quot;华为 Meta30 高清手机&quot;);        document.setField(&quot;item_price&quot;, 20);        document.setField(&quot;item_images&quot;, &quot;21312312.jpg&quot;);        document.setField(&quot;item_createtime&quot;, new Date());        document.setField(&quot;item_updatetime&quot;, new Date());        document.setField(&quot;item_category&quot;, &quot;手机&quot;);        document.setField(&quot;item_brand&quot;,&quot;华为&quot;);        //添加文档        httpSolrClient.add(document);        httpSolrClient.commit();    &#125;</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>​如果文档id相同就是修改；</p><pre><code>@Test    public void testAddDocument() throws IOException, SolrServerException &#123;        //创建文档        SolrInputDocument document = new SolrInputDocument();        //指定文档中的域        document.setField(&quot;id&quot;, &quot;889922&quot;);        document.setField(&quot;book_name&quot;,&quot;SolrJ是Solr提供的操作Solr的javaAPI,挺好用&quot;);        document.setField(&quot;book_num&quot;, 20);        document.setField(&quot;book_pic&quot;, &quot;21312312.jpg&quot;);        document.setField(&quot;book_price&quot;, 20.0);        //添加文档        httpSolrClient.add(document);        httpSolrClient.commit();    &#125;</code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>​支持基于id删除，支持基于条件删除。</p><p>​基于id删除</p><pre><code>   @Test    public void testDeleteDocument() throws IOException, SolrServerException &#123;        httpSolrClient.deleteById(&quot;889922&quot;);        httpSolrClient.commit();    &#125;</code></pre><p>​支持基于条件删除，删除所有数据要慎重</p><pre><code>    @Test    public void testDeleteQuery() throws IOException, SolrServerException &#123;        httpSolrClient.deleteByQuery(&quot;book_name:java&quot;); //*:*删除所有        httpSolrClient.commit();    &#125;</code></pre><p>到这关于使用SolrJ完成索引相关的操讲解完毕。下面讲解查询。</p><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><h4 id="主查询-过滤查询"><a href="#主查询-过滤查询" class="headerlink" title="主查询+过滤查询"></a>主查询+过滤查询</h4><p>​查询的操作分为很多种下面我们讲解基本查询。</p><p>​核心的API方法：</p><p>​solrClient.query(SolrParams)；</p><p>​SolrParams是一个抽象类，通常使用其子类SolrQuery封装查询条件；</p><p>​查询item_title中包含手机的商品</p><pre><code>@Test    public void testBaseQuery() throws IOException, SolrServerException &#123;        //封装查询条件        SolrQuery params = new SolrQuery();        //设置查询条件,参数1：查询参数,q,fq...        params.setQuery(&quot;item_title:手机&quot;);        //执行查询,获取结果        QueryResponse resp = httpSolrClient.query(params);        //满足条件的文档        SolrDocumentList results = resp.getResults();        //迭代results        for (SolrDocument result : results) &#123;            System.out.println(result.get(&quot;id&quot;) + &quot;--&quot; + result.get(&quot;item_title&quot;));        &#125;        //获取总记录        long numFound = results.getNumFound();        System.out.println(numFound);    &#125;</code></pre><p>​</p><p>​这是关于我们这一块核心API，接下来我们在这个基础上。我们做一些其他操作。添加过滤条件:品牌是华为。</p><p>价格在[1000-2000].</p><p>​注意：过滤条件可以添加多个，所以使用的是SolrQuery的add方法。如果使用set后面过滤条件会将前面的覆盖.</p><pre><code> @Test    public void testBaseFilterQuery() throws IOException, SolrServerException &#123;        //封装查询条件        SolrQuery params = new SolrQuery();        //设置查询条件,参数1：查询参数,q,fq...        params.setQuery(&quot;item_title:手机&quot;);        params.addFilterQuery(&quot;item_brand:华为&quot;);        params.addFilterQuery(&quot;item_price:[1000 TO 2000]&quot;);        //执行查询,获取结果        QueryResponse resp = httpSolrClient.query(params);        //满足条件的文档        SolrDocumentList results = resp.getResults();        //迭代results        for (SolrDocument result : results) &#123;            System.out.println(result.get(&quot;id&quot;) + &quot;--&quot; + result.get(&quot;item_title&quot;) + &quot;---&quot; + result.get(&quot;item_brand&quot;) + &quot;---&quot; + result.get(&quot;item_price&quot;));        &#125;        //获取总记录        long numFound = results.getNumFound();        System.out.println(numFound);    &#125;</code></pre><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>​接下来我们要完成的是分页，需求：在以上查询的条件查询，查询第1页的20条数据。</p><pre><code>params.setStart(10);params.setRows(10);</code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>​除了分页外，还有排序。需求：按照价格升序。如果价格相同，按照id降序。</p><pre><code>params.addSort(&quot;item_price,&quot;,Order.desc);params.addSort(&quot;id&quot;,Order.asc);</code></pre><h4 id="域名起别名"><a href="#域名起别名" class="headerlink" title="域名起别名"></a>域名起别名</h4><p>​到这基本查询就基本讲解完毕。有时候我们需要对查询结果文档的字段起别名。</p><p>​需求：将域名中的item_去掉。</p><pre><code>  //指定查询结果的字段列表，并且指定别名  params.setFields(&quot;id,price:item_price,title:item_title,brand:item_brand,category:item_category,image:item_image&quot;); System.out.println(result.get(&quot;id&quot;) + &quot;--&quot; + result.get(&quot;title&quot;) + &quot;---&quot; + result.get(&quot;brand&quot;) + &quot;---&quot; + result.get(&quot;category&quot;));</code></pre><p>​别名指定完毕后，便于我们后期进行封装；到这关于基本查询讲解完毕，下面讲解组合查询。</p><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p>​需求：查询Item_title中包含手机或者平板电视的文档。</p><pre><code>params.setQuery(&quot;q&quot;,&quot;item_title:手机 OR item_title:平板电视&quot;);</code></pre><p>​需求：查询Item_title中包含手机 并且包含三星的文档</p><pre><code>params.setQuery(&quot;item_title:手机 AND item_title:三星&quot;);params.setQuery(,&quot;+item_title:手机  +item_title:三星&quot;);</code></pre><p>​需求: 查询item_title中包含手机但是不包含三星的文档</p><pre><code>params.setQuery(&quot;item_title:手机  NOT item_title:三星&quot;);params.setQuery(&quot;+item_title:手机  -item_title:三星&quot;);</code></pre><p>​需求：查询item_title中包含iphone开头的词的文档，使用通配符。；</p><pre><code>params.setQuery(&quot;item_title:iphone*&quot;);</code></pre><p>到这关于SolrJ中组合查询我们就讲解完毕了。</p><h2 id="Date你新new一个对象，Date的值不是空，是当前的时间。"><a href="#Date你新new一个对象，Date的值不是空，是当前的时间。" class="headerlink" title="Date你新new一个对象，Date的值不是空，是当前的时间。"></a>Date你新new一个对象，Date的值不是空，是当前的时间。</h2><h2 id="python中关于处理excel的一些代码"><a href="#python中关于处理excel的一些代码" class="headerlink" title="python中关于处理excel的一些代码"></a>python中关于处理excel的一些代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> redf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'D:\company\中国电信税收政策法律库\税务知识库标签及文件分工.xlsx'</span><span class="token punctuation">,</span>engine<span class="token operator">=</span><span class="token string">'openpyxl'</span><span class="token punctuation">)</span>\# array <span class="token operator">=</span> pd<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\# 提取文件号和文件名称中的信息\# 根据文件号和文件名称推断发文部门\#df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'文件号'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>r<span class="token string">'([\u4e00-\u9fa5]+)'</span><span class="token punctuation">)</span>\# 使用正则表达式替换发文部门列中的内容<span class="token punctuation">(</span>包含国务院则替换为国务院<span class="token punctuation">)</span>\#df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span>r<span class="token string">'.*国务院.*'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'国务院'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\#df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span>r<span class="token string">'.*主席令.*'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'主席令'</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'发文部门'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span>r<span class="token string">'.*修.*'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\# 在原始Excel文件中添加发文部门列df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'D:\company\中国电信税收政策法律库\税务知识库标签及文件分工.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h2 id="Java中的高亮注释-x2F-x2F-TODO"><a href="#Java中的高亮注释-x2F-x2F-TODO" class="headerlink" title="Java中的高亮注释  &#x2F;&#x2F;TODO"></a>Java中的高亮注释  &#x2F;&#x2F;TODO</h2><p>使用&#x2F;&#x2F;todo 代替一般的注释&#x2F;&#x2F;</p><p>可以呈现高亮，而且使用快捷键ALT+6还能快速查找所有todo注释</p><h2 id="Java中用easyExcel来读取excel"><a href="#Java中用easyExcel来读取excel" class="headerlink" title="Java中用easyExcel来读取excel"></a>Java中用easyExcel来读取excel</h2><p><a href="https://blog.csdn.net/u010925982/article/details/117412753">https://blog.csdn.net/u010925982/article/details/117412753</a></p><p>用到了@ExcelProperty(value &#x3D; “文件名称”)  与excel文件的表头对应</p><h2 id="Mybatis-将Java实体对象与数据库一行的对象深度绑定"><a href="#Mybatis-将Java实体对象与数据库一行的对象深度绑定" class="headerlink" title="Mybatis 将Java实体对象与数据库一行的对象深度绑定"></a>Mybatis 将Java实体对象与数据库一行的对象深度绑定</h2><p>在项目中发现如下现象：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230713145915009.png"></p><p>在第一个断点，versionID是没有值的</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230713145956628.png"></p><p>在第二个断点就有值了</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230713150018123.png"></p><p>对一个数据库的插入操作，数据库里默认生成的新的递增主键，会影响到Java类的实体对象。这是mybatis做的，将自增主键回填到id了。</p><p>要进行如下配置，比如在KbKlLawExtMapper.xml里</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AD%A6%E7%9B%AE%E5%BD%95/week1-2/image/image-20230713150118069.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zbiti.kbss.model.KbKlLawExt<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实习期间学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动力节点SSM+SpringBoot总结</title>
      <link href="/2023/07/15/dong-li-jie-dian-ssm-zong-jie/"/>
      <url>/2023/07/15/dong-li-jie-dian-ssm-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="动力节点SSM-SpringBoot总结"><a href="#动力节点SSM-SpringBoot总结" class="headerlink" title="动力节点SSM+SpringBoot总结"></a>动力节点SSM+SpringBoot总结</h1><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>这边只抛个笔记链接吧。别人记录的CSDN笔记</p><p><a href="https://blog.csdn.net/u011005040/article/details/127247600?spm=1001.2014.3001.5502">https://blog.csdn.net/u011005040/article/details/127247600?spm=1001.2014.3001.5502</a></p><p><a href="https://blog.csdn.net/u011005040/article/details/127378538?spm=1001.2014.3001.5502">https://blog.csdn.net/u011005040/article/details/127378538?spm=1001.2014.3001.5502</a></p><p>视频是动力节点的MyBatis老杜版本</p><p>里面有很多应该也暂时不需要看，比如手撕godbatis,javassist,</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring这边用的很少，主要掌握一个思想，不用像MyBatis那样细致和深入。多关注一些思想和注解，当然注解也会在springboot中有所体现。核心还是IOC和AOP，设计模式可以看黑马的设计模式专题课。</p><p>课程正规链接</p><p><a href="https://www.yuque.com/dujubin/ltckqu/kipzgd#c8Ery">https://www.yuque.com/dujubin/ltckqu/kipzgd?#c8Ery</a></p><p>别人的笔记链接</p><p><a href="https://blog.csdn.net/sls1223074612/article/details/128009768?spm=1001.2014.3001.5502">https://blog.csdn.net/sls1223074612/article/details/128009768?spm=1001.2014.3001.5502</a></p><p><a href="https://blog.csdn.net/sls1223074612/article/details/128009864?spm=1001.2014.3001.5502">https://blog.csdn.net/sls1223074612/article/details/128009864?spm=1001.2014.3001.5502</a></p><p>这里的JDBCTemplate应该不用看，主要还是用MyBatis.</p><p><a href="https://blog.csdn.net/sls1223074612/article/details/128009929?spm=1001.2014.3001.5502">https://blog.csdn.net/sls1223074612/article/details/128009929?spm=1001.2014.3001.5502</a></p><p>AOP在之前的JavaWeb2023的黑马的项目中也有讲到</p><p>也不考虑WebFlux了，还是看传统的springmvc吧</p><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>这边我不是很想看，感觉也没啥东西。</p><p><a href="https://blog.csdn.net/Java_Coding1/article/details/122877426">https://blog.csdn.net/Java_Coding1/article/details/122877426</a></p><h2 id="SpringBoot2"><a href="#SpringBoot2" class="headerlink" title="SpringBoot2"></a>SpringBoot2</h2><p><a href="https://juejin.cn/post/7055192551879344165#heading-18">https://juejin.cn/post/7055192551879344165#heading-18</a></p><p>SpringBoot+MyBatis作为最常用的框架，还是要仔细看看的。当然更重要的还是在项目中实战。</p><p>像JSP就不用看了，太老旧了。Web组件在Javaweb2023黑马里也有涉及。Redis在黑马那看，Dubbo暂时不涉及，打包倒时候看博客再学。Thymeleaf引擎也不用看，这是前后端不分离的，现在一般都用VUE搞前后端分离的了。</p>]]></content>
      
      
      <categories>
          
          <category> 框架使用和源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day12</title>
      <link href="/2023/07/12/javaweb2023-day12/"/>
      <url>/2023/07/12/javaweb2023-day12/</url>
      
        <content type="html"><![CDATA[<h1 id="SpingBoot原理"><a href="#SpingBoot原理" class="headerlink" title="SpingBoot原理"></a>SpingBoot原理</h1><h2 id="1-配置优先级"><a href="#1-配置优先级" class="headerlink" title="1.配置优先级"></a>1.配置优先级</h2><p>SpringBoot为了增强程序的扩展性，除了支持配置文件的配置方式以外，还支持另外两种常见的配置方式：</p><ol><li><p>Java系统属性配置 （格式： -Dkey&#x3D;value）</p><pre class=" language-shell"><code class="language-shell">-Dserver.port=9000</code></pre></li><li><p>命令行参数 （格式：–key&#x3D;value）</p><pre class=" language-shell"><code class="language-shell">--server.port=10010</code></pre></li></ol><p>那在idea当中运行程序时，如何来指定Java系统属性和命令行参数呢？</p><ul><li>编辑启动程序的配置信息</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230113162746634.png" alt="image-20230113162746634"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230113162639630.png" alt="image-20230113162639630"></p><p>思考：如果项目已经打包上线了，这个时候我们又如何来设置Java系统属性和命令行参数呢？</p><pre class=" language-shell"><code class="language-shell">java -Dserver.port=9000 -jar XXXXX.jar --server.port=10010</code></pre><p>运行jar程序：</p><ul><li>同时设置Java系统属性和命令行参数</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230113172659269.png" alt="image-20230113172659269"></p><p>仅设置Java系统属性也可以。</p><p>在SpringBoot项目当中，常见的属性配置方式有5种， 3种配置文件，加上2种外部属性的配置(Java系统属性、命令行参数)。通过以上的测试，我们也得出了优先级(从低到高)：</p><ul><li>application.yaml（忽略）</li><li>application.yml</li><li>application.properties</li><li>java系统属性（-Dxxx&#x3D;xxx）</li><li>命令行参数（–xxx&#x3D;xxx）</li></ul><h2 id="2-Bean管理"><a href="#2-Bean管理" class="headerlink" title="2.Bean管理"></a>2.Bean管理</h2><p>在前面的课程当中，我们已经讲过了我们可以通过Spring当中提供的注解@Component以及它的三个衍生注解（@Controller、@Service、@Repository）来声明IOC容器中的bean对象，同时我们也学习了如何为应用程序注入运行时所需要依赖的bean对象，也就是依赖注入DI。</p><p>我们今天主要学习IOC容器中Bean的其他使用细节，主要学习以下三方面：</p><ol><li>如何从IOC容器中手动的获取到bean对象</li><li>bean的作用域配置</li><li>管理第三方的bean对象</li></ol><p>接下来我们先来学习第一方面，从IOC容器中获取bean对象。</p><h3 id="2-1-获取Bean"><a href="#2-1-获取Bean" class="headerlink" title="2.1 获取Bean"></a>2.1 获取Bean</h3><p>默认情况下，SpringBoot项目在启动的时候会自动的创建IOC容器(也称为Spring容器)，并且在启动的过程当中会自动的将bean对象都创建好，存放在IOC容器当中。应用程序在运行时需要依赖什么bean对象，就直接进行依赖注入就可以了。</p><p>而在Spring容器中提供了一些方法，可以主动从IOC容器中获取到bean对象，下面介绍3种常用方式：</p><ol><li><p>根据name获取bean</p><pre class=" language-java"><code class="language-java">Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span></code></pre></li><li><p>根据类型获取bean</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span></code></pre></li><li><p>根据name获取bean（带类型转换）</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span></code></pre></li></ol><p>思考：要从IOC容器当中来获取到bean对象，需要先拿到IOC容器对象，怎么样才能拿到IOC容器呢？</p><ul><li>想获取到IOC容器，直接将IOC容器对象注入进来就可以了</li></ul><p>控制器：DeptController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeptController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DeptController constructor ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> Result <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> deptList <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>deptList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        deptService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> Result <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Dept dept<span class="token punctuation">)</span><span class="token punctuation">{</span>        deptService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务实现类：DeptServiceImpl</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> deptList <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deptList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        deptMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dept<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deptMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Mapper接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询全部部门数据</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from dept"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除部门</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from dept where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新增部门</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into dept(name, create_time, update_time) values (#{name},#{createTime},#{updateTime})"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IOC容器对象</span>    <span class="token comment" spellcheck="true">//获取bean对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据bean的名称获取</span>        DeptController bean1 <span class="token operator">=</span> <span class="token punctuation">(</span>DeptController<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"deptController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据bean的类型获取</span>        DeptController bean2 <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DeptController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据bean的名称 及 类型获取</span>        DeptController bean3 <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"deptController"</span><span class="token punctuation">,</span> DeptController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序运行后控制台日志：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230113211619818.png" alt="image-20230113211619818"></p><blockquote><p>问题：输出的bean对象地址值是一样的，说明IOC容器当中的bean对象有几个？</p><p>答案：只有一个。        （默认情况下，IOC中的bean对象是单例）</p><p>那么能不能将bean对象设置为非单例的(每次获取的bean都是一个新对象)？</p><p>可以，在下一个知识点(bean作用域)中讲解。</p></blockquote><p>注意事项：</p><ul><li>上述所说的 【Spring项目启动时，会把其中的bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的bean而言。</li></ul><h3 id="2-2-Bean作用域"><a href="#2-2-Bean作用域" class="headerlink" title="2.2 Bean作用域"></a>2.2 Bean作用域</h3><p>在前面我们提到的IOC容器当中，默认bean对象是单例模式(只有一个实例对象)。那么如何设置bean对象为非单例呢？需要设置bean的作用域。</p><p>在Spring中支持五种作用域，后三种在web环境才生效：</p><table><thead><tr><th><strong>作用域</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>singleton</td><td>容器内同名称的bean只有一个实例（单例）（默认）</td></tr><tr><td>prototype</td><td>每次使用该bean时会创建新的实例（非单例）</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例（web环境中，了解）</td></tr></tbody></table><p>知道了bean的5种作用域了，我们要怎么去设置一个bean的作用域呢？</p><ul><li>可以借助Spring中的@Scope注解来进行配置作用域</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230113214244144.png" alt="image-20230113214244144"></p><p><strong>1). 测试一</strong></p><ul><li>控制器</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认bean的作用域为：singleton (单例)</span><span class="token annotation punctuation">@Lazy</span> <span class="token comment" spellcheck="true">//延迟加载（第一次使用bean对象时，才会创建bean对象并交给ioc容器管理）</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeptController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DeptController constructor ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><ul><li>测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IOC容器对象</span>    <span class="token comment" spellcheck="true">//bean的作用域</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DeptController deptController <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DeptController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deptController<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务，运行测试方法，查看控制台打印的日志：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114001348839.png" alt="image-20230114001348839"></p><blockquote><p>注意事项：</p><ul><li><p>IOC容器中的bean默认使用的作用域：singleton (单例)</p></li><li><p>默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化(延迟到第一次使用时)</p></li></ul></blockquote><p><strong>2). 测试二</strong></p><p>修改控制器DeptController代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//bean作用域为非单例</span><span class="token annotation punctuation">@Lazy</span> <span class="token comment" spellcheck="true">//延迟加载</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeptController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DeptController constructor ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务，再次执行测试方法，查看控制吧打印的日志：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114001736151.png" alt="image-20230114001736151"></p><blockquote><p>注意事项：</p><ul><li>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</li><li>实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性</li></ul></blockquote><h3 id="2-3-第三方Bean"><a href="#2-3-第三方Bean" class="headerlink" title="2.3 第三方Bean"></a>2.3 第三方Bean</h3><p>学习完bean的获取、bean的作用域之后，接下来我们再来学习第三方bean的配置。</p><p>之前我们所配置的bean，像controller、service，dao三层体系下编写的类，这些类都是我们在项目当中自己定义的类(自定义类)。当我们要声明这些bean，也非常简单，我们只需要在类上加上@Component以及它的这三个衍生注解（@Controller、@Service、@Repository），就可以来声明这个bean对象了。<br>但是在我们项目开发当中，还有一种情况就是这个类它不是我们自己编写的，而是我们引入的第三方依赖当中提供的。</p><p>在pom.xml文件中，引入dom4j：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Dom4j--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><blockquote><p>dom4j就是第三方组织提供的。 dom4j中的SAXReader类就是第三方编写的。</p></blockquote><p>当我们需要使用到SAXReader对象时，直接进行依赖注入是不是就可以了呢？</p><ul><li>按照我们之前的做法，需要在SAXReader类上添加一个注解@Component（将当前类交给IOC容器管理）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114003903285.png" alt="image-20230114003903285"></p><blockquote><p>结论：第三方提供的类是只读的。无法在第三方类上添加@Component注解或衍生注解。</p></blockquote><p>那么我们应该怎样使用并定义第三方的bean呢？</p><ul><li>如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component 及衍生注解声明bean的，就需要用到**@Bean**注解。</li></ul><p><strong>解决方案1：在启动类上添加@Bean标识的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明第三方bean</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span>    <span class="token keyword">public</span> SAXReader <span class="token function">saxReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>xml文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emp</span><span class="token punctuation">></span></span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SAXReader saxReader<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第三方bean的管理</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testThirdBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Document document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Element rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务，执行测试方法后，控制台输出日志：</p><pre><code>Tom : 18</code></pre><blockquote><p><strong>说明：以上在启动类中声明第三方Bean的作法，不建议使用（项目中要保证启动类的纯粹性）</strong></p></blockquote><p><strong>解决方案2：在配置类中定义@Bean标识的方法</strong></p><ul><li>如果需要定义第三方Bean时， 通常会单独定义一个配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明第三方bean</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span>          <span class="token comment" spellcheck="true">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span>    <span class="token keyword">public</span> SAXReader <span class="token function">reader</span><span class="token punctuation">(</span>DeptService deptService<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deptService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注释掉SpringBoot启动类中创建第三方bean对象的代码，重启服务，执行测试方法，查看控制台日志：</p><pre><code>Tom : 18</code></pre><p>在方法上加上一个@Bean注解，Spring 容器在启动的时候，它会自动的调用这个方法，并将方法的返回值声明为Spring容器当中的Bean对象。</p><blockquote><p>注意事项 ：</p><ul><li><p>通过@Bean注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名。</p></li><li><p>如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配。</p></li></ul></blockquote><p>关于Bean大家只需要保持一个原则：</p><ul><li>如果是在项目当中我们自己定义的类，想将这些类交给IOC容器管理，我们直接使用@Component以及它的衍生注解来声明就可以。</li><li>如果这个类它不是我们自己定义的，而是引入的第三方依赖当中提供的类，而且我们还想将这个类交给IOC容器管理。此时我们就需要在配置类中定义一个方法，在方法上加上一个@Bean注解，通过这种方式来声明第三方的bean对象。</li></ul><h2 id="3-SpringBoot原理"><a href="#3-SpringBoot原理" class="headerlink" title="3. SpringBoot原理"></a>3. SpringBoot原理</h2><p>SpringBoot框架之所以使用起来更简单更快捷，是因为SpringBoot框架底层提供了两个非常重要的功能：一个是起步依赖，一个是自动配置。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114172442018.png" alt="image-20230114172442018"></p><blockquote><p>通过SpringBoot所提供的起步依赖，就可以大大的简化pom文件当中依赖的配置，从而解决了Spring框架当中依赖配置繁琐的问题。</p><p>通过自动配置的功能就可以大大的简化框架在使用时bean的声明以及bean的配置。我们只需要引入程序开发时所需要的起步依赖，项目开发时所用到常见的配置都已经有了，我们直接使用就可以了。</p></blockquote><h3 id="3-1-起步依赖"><a href="#3-1-起步依赖" class="headerlink" title="3.1 起步依赖"></a>3.1 起步依赖</h3><p>假如我们没有使用SpringBoot，用的是Spring框架进行web程序的开发，此时我们就需要引入web程序开发所需要的一些依赖。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114173645101.png" alt="image-20230114173645101"></p><blockquote><p>spring-webmvc依赖：这是Spring框架进行web程序开发所需要的依赖</p><p>servlet-api依赖：Servlet基础依赖</p><p>jackson-databind依赖：JSON处理工具包</p><p>如果要使用AOP，还需要引入aop依赖、aspect依赖</p><p>项目中所引入的这些依赖，还需要保证版本匹配，否则就可能会出现版本冲突问题。</p></blockquote><p>如果我们使用了SpringBoot，就不需要像上面这么繁琐的引入依赖了。我们只需要引入一个依赖就可以了，那就是web开发的起步依赖：springboot-starter-web。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114174805852.png" alt="image-20230114174805852"></p><p>为什么我们只需要引入一个web开发的起步依赖，web开发所需要的所有的依赖都有了呢？</p><ul><li>因为Maven的依赖传递。</li></ul><blockquote><ul><li><p>在SpringBoot给我们提供的这些起步依赖当中，已提供了当前程序开发所需要的所有的常见依赖(官网地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)%E3%80%82">https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)。</a></p></li><li><p>比如：springboot-starter-web，这是web开发的起步依赖，在web开发的起步依赖当中，就集成了web开发中常见的依赖：json、web、webmvc、tomcat等。我们只需要引入这一个起步依赖，其他的依赖都会自动的通过Maven的依赖传递进来。</p></li></ul></blockquote><p><strong>结论：起步依赖的原理就是Maven的依赖传递。</strong></p><h3 id="3-2-自动配置"><a href="#3-2-自动配置" class="headerlink" title="3.2 自动配置"></a>3.2 自动配置</h3><p>我们讲解了SpringBoot当中起步依赖的原理，就是Maven的依赖传递。接下来我们解析下自动配置的原理，我们要分析自动配置的原理，首先要知道什么是自动配置。</p><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><blockquote><p>比如：我们要进行事务管理、要进行AOP程序的开发，此时就不需要我们再去手动的声明这些bean对象了，我们直接使用就可以从而大大的简化程序的开发，省去了繁琐的配置操作。</p></blockquote><p>下面我们打开idea，一起来看下自动配置的效果：</p><ul><li>运行SpringBoot启动类</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114205745221.png" alt="image-20230114205745221"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114213945851.png" alt="image-20230114213945851"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114212750007.png" alt="image-20230114212750007"></p><p>大家会看到有两个CommonConfig，在第一个CommonConfig类中定义了一个bean对象，bean对象的名字叫reader。</p><p>在第二个CommonConfig中它的bean名字叫commonConfig，为什么还会有这样一个bean对象呢？原因是在CommonConfig配置类上添加了一个注解@Configuration，而@Configuration底层就是@Component</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114220159619.png" alt="image-20230114220159619"></p><blockquote><p>所以配置类最终也是SpringIOC容器当中的一个bean对象</p></blockquote><p>在IOC容器中除了我们自己定义的bean以外，还有很多配置类，这些配置类都是SpringBoot在启动的时候加载进来的配置类。这些配置类加载进来之后，它也会生成很多的bean对象。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114221341811.png" alt="image-20230114221341811"></p><blockquote><p>比如：配置类GsonAutoConfiguration里面有一个bean，bean的名字叫gson，它的类型是Gson。 </p><p>com.google.gson.Gson是谷歌包中提供的用来处理JSON格式数据的。</p></blockquote><p>当我们想要使用这些配置类中生成的bean对象时，可以使用@Autowired就自动注入了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>Gson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Gson gson<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加断点，使用debug模式运行测试类程序：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114222245520.png" alt="image-20230114222245520"></p><p>问题：在当前项目中我们并没有声明谷歌提供的Gson这么一个bean对象，然后我们却可以通过@Autowired从Spring容器中注入bean对象，那么这个bean对象怎么来的？</p><p>答案：SpringBoot项目在启动时通过自动配置完成了bean对象的创建。</p><p>体验了SpringBoot的自动配置了，下面我们就来分析自动配置的原理。其实分析自动配置原理就是来解析在SpringBoot项目中，在引入依赖之后是如何将依赖jar包当中所定义的配置类以及bean加载到SpringIOC容器中的。</p><h4 id="3-2-2-常见方案"><a href="#3-2-2-常见方案" class="headerlink" title="3.2.2 常见方案"></a>3.2.2 常见方案</h4><h5 id="3-2-2-1-概述"><a href="#3-2-2-1-概述" class="headerlink" title="3.2.2.1 概述"></a>3.2.2.1 概述</h5><p>我们知道了什么是自动配置之后，接下来我们就要来剖析自动配置的原理。解析自动配置的原理就是分析在 SpringBoot项目当中，我们引入对应的依赖之后，是如何将依赖jar包当中所提供的bean以及配置类直接加载到当前项目的SpringIOC容器当中的。</p><p>接下来，我们就直接通过代码来分析自动配置原理。</p><blockquote><p>准备工作：在Idea中导入”资料\03. 自动配置原理”下的itheima-utils工程</p></blockquote><p>1、在SpringBoot项目 spring-boot-web-config2 工程中，通过坐标引入itheima-utils依赖</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114224107653.png" alt="image-20230114224107653"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenParser</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TokenParser ... parse ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、在测试类中，添加测试方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTokenParse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>TokenParser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p>3、执行测试方法</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114225018255.png" alt="image-20230114225018255"></p><blockquote><p>异常信息描述： 没有com.example.TokenParse类型的bean</p><p>说明：在Spring容器中没有找到com.example.TokenParse类型的bean对象</p></blockquote><p>思考：引入进来的第三方依赖当中的bean以及配置类为什么没有生效？</p><ul><li>原因在我们之前讲解IOC的时候有提到过，在类上添加@Component注解来声明bean对象时，还需要保证@Component注解能被Spring的组件扫描到。</li><li>SpringBoot项目中的@SpringBootApplication注解，具有包扫描的作用，但是它只会扫描启动类所在的当前包以及子包。 </li><li>当前包：com.itheima， 第三方依赖中提供的包：com.example（扫描不到）</li></ul><p>那么如何解决以上问题的呢？</p><ul><li>方案1：@ComponentScan 组件扫描</li><li>方案2：@Import 导入（使用@Import导入的类会被Spring加载到IOC容器中）</li></ul><h5 id="3-2-2-2-方案一"><a href="#3-2-2-2-方案一" class="headerlink" title="3.2.2.2 方案一"></a>3.2.2.2 方案一</h5><p>@ComponentScan组件扫描</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.itheima"</span><span class="token punctuation">,</span><span class="token string">"com.example"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定要扫描的包</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新执行测试方法，控制台日志输出：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114231121016.png" alt="image-20230114231121016"></p><blockquote><p>大家可以想象一下，如果采用以上这种方式来完成自动配置，那我们进行项目开发时，当需要引入大量的第三方的依赖，就需要在启动类上配置N多要扫描的包，这种方式会很繁琐。而且这种大面积的扫描性能也比较低。</p><p>缺点：</p><ol><li>使用繁琐</li><li>性能低</li></ol><p><strong>结论：SpringBoot中并没有采用以上这种方案。</strong></p></blockquote><h5 id="3-2-2-3-方案二"><a href="#3-2-2-3-方案二" class="headerlink" title="3.2.2.3 方案二"></a>3.2.2.3 方案二</h5><p>@Import导入</p><ul><li>导入形式主要有以下几种：<ol><li>导入普通类</li><li>导入配置类</li><li>导入ImportSelector接口实现类</li></ol></li></ul><p>1). 使用@Import导入普通类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>TokenParser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//导入的类会被Spring加载到IOC容器中</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>重新执行测试方法，控制台日志输出：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114231709392.png"></p></blockquote><p>2). 使用@Import导入配置类：</p><ul><li>配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HeaderGenerator <span class="token function">headerGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>启动类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>HeaderConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//导入配置类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HeaderParser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHeaderGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HeaderGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114233252259.png"></p></blockquote><p>3). 使用@Import导入ImportSelector接口实现类：</p><ul><li>ImportSelector接口实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回值字符串数组（数组中封装了全限定名称的类）</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"com.example.HeaderConfig"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>启动类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//导入ImportSelector接口实现类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114234222946.png"></p></blockquote><p>我们使用@Import注解通过这三种方式都可以导入第三方依赖中所提供的bean或者是配置类。</p><p>思考：如果基于以上方式完成自动配置，当要引入一个第三方依赖时，是不是还要知道第三方依赖中有哪些配置类和哪些Bean对象？</p><ul><li>答案：是的。 （对程序员来讲，很不友好，而且比较繁琐）</li></ul><p>思考：当我们要使用第三方依赖，依赖中到底有哪些bean和配置类，谁最清楚？</p><ul><li>答案：第三方依赖自身最清楚。</li></ul><blockquote><p><strong>结论：我们不用自己指定要导入哪些bean对象和配置类了，让第三方依赖它自己来指定。</strong></p></blockquote><p>怎么让第三方依赖自己指定bean对象和配置类？</p><ul><li>比较常见的方案就是第三方依赖给我们提供一个注解，这个注解一般都以@EnableXxxx开头的注解，注解中封装的就是@Import注解</li></ul><p>4). 使用第三方依赖提供的 @EnableXxxxx注解</p><ul><li>第三方依赖中提供的注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定要导入哪些bean对象或配置类</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableHeaderConfig</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><ul><li>在使用时只需在启动类上加上@EnableXxxxx注解即可</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableHeaderConfig</span>  <span class="token comment" spellcheck="true">//使用第三方依赖提供的Enable开头的注解</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootWebConfig2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootWebConfig2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230114233252259.png"></p></blockquote><p>以上四种方式都可以完成导入操作，但是第4种方式会更方便更优雅，而这种方式也是SpringBoot当中所采用的方式。</p><h4 id="3-2-3-原理分析"><a href="#3-2-3-原理分析" class="headerlink" title="3.2.3 原理分析"></a>3.2.3 原理分析</h4><h5 id="3-2-3-1-源码跟踪"><a href="#3-2-3-1-源码跟踪" class="headerlink" title="3.2.3.1 源码跟踪"></a>3.2.3.1 源码跟踪</h5><p>前面我们讲解了在项目当中引入第三方依赖之后，如何加载第三方依赖中定义好的bean对象以及配置类，从而完成自动配置操作。那下面我们通过源码跟踪的形式来剖析下SpringBoot底层到底是如何完成自动配置的。</p><blockquote><p>源码跟踪技巧：</p><p>在跟踪框架源码的时候，一定要抓住关键点，找到核心流程。一定不要从头到尾一行代码去看，一个方法的去研究，一定要找到关键流程，抓住关键点，先在宏观上对整个流程或者整个原理有一个认识，有精力再去研究其中的细节。</p></blockquote><p>要搞清楚SpringBoot的自动配置原理，要从SpringBoot启动类上使用的核心注解@SpringBootApplication开始分析：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115001439110.png"></p><p>在@SpringBootApplication注解中包含了：</p><ul><li>元注解（不再解释）</li><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>我们先来看第一个注解：@SpringBootConfiguration</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115001950076.png"></p><blockquote><p>@SpringBootConfiguration注解上使用了@Configuration，表明SpringBoot启动类就是一个配置类。</p><p>@Indexed注解，是用来加速应用启动的（不用关心）。</p></blockquote><p>接下来再先看@ComponentScan注解：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115002450993.png"></p><blockquote><p>@ComponentScan注解是用来进行组件扫描的，扫描启动类所在的包及其子包下所有被@Component及其衍生注解声明的类。</p><p>SpringBoot启动类，之所以具备扫描包功能，就是因为包含了@ComponentScan注解。</p></blockquote><p>最后我们来看看@EnableAutoConfiguration注解（自动配置核心注解）：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115002743115.png"></p><blockquote><p>使用@Import注解，导入了实现ImportSelector接口的实现类。</p><p>AutoConfigurationImportSelector类是ImportSelector接口的实现类。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115003242549.png"></p></blockquote><p>AutoConfigurationImportSelector类中重写了ImportSelector接口的selectImports()方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115003348288.png"></p><blockquote><p>selectImports()方法底层调用getAutoConfigurationEntry()方法，获取可自动配置的配置类信息集合</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115003704385.png"></p><blockquote><p>getAutoConfigurationEntry()方法通过调用getCandidateConfigurations(annotationMetadata, attributes)方法获取在配置文件中配置的所有自动配置类的集合</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115003903302.png"></p><blockquote><p>getCandidateConfigurations方法的功能：</p><p>获取所有基于META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件、META-INF&#x2F;spring.factories文件中配置类的集合</p></blockquote><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件和META-INF&#x2F;spring.factories文件这两个文件在哪里呢？</p><ul><li>通常在引入的起步依赖中，都有包含以上两个文件</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230129090835964.png"> </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115064329460.png" alt="image-20230115064329460"></p><p>在前面在给大家演示自动配置的时候，我们直接在测试类当中注入了一个叫gson的bean对象，进行JSON格式转换。虽然我们没有配置bean对象，但是我们是可以直接注入使用的。原因就是因为在自动配置类当中做了自动配置。到底是在哪个自动配置类当中做的自动配置呢？我们通过搜索来查询一下。</p><p>在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports配置文件中指定了第三方依赖Gson的配置类：GsonAutoConfiguration</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115005159530.png"></p><p>第三方依赖中提供的GsonAutoConfiguration类：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115005418900.png"></p><blockquote><p>在GsonAutoConfiguration类上，添加了注解@AutoConfiguration，通过查看源码，可以明确：GsonAutoConfiguration类是一个配置。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115065247287.png"></p></blockquote><p>看到这里，大家就应该明白为什么可以完成自动配置了，原理就是在配置类中定义一个@Bean标识的方法，而Spring会自动调用配置类中使用@Bean标识的方法，并把方法的返回值注册到IOC容器中。</p><p><strong>自动配置源码小结</strong></p><p>自动配置原理源码入口就是@SpringBootApplication注解，在这个注解中封装了3个注解，分别是：</p><ul><li>@SpringBootConfiguration<ul><li>声明当前类是一个配置类</li></ul></li><li>@ComponentScan<ul><li>进行组件扫描（SpringBoot中默认扫描的是启动类所在的当前包及其子包）</li></ul></li><li>@EnableAutoConfiguration<ul><li>封装了@Import注解（Import注解中指定了一个ImportSelector接口的实现类）<ul><li>在实现类重写的selectImports()方法，读取当前项目下所有依赖jar包中META-INF&#x2F;spring.factories、META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports两个文件里面定义的配置类（配置类中定义了@Bean注解标识的方法）。</li></ul></li></ul></li></ul><p>当SpringBoot程序启动时，就会加载配置文件当中所定义的配置类，并将这些配置类信息(类的全限定名)封装到String类型的数组中，最终通过@Import注解将这些配置类全部加载到Spring的IOC容器中，交给IOC容器管理。</p><blockquote><p>最后呢给大家抛出一个问题：在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中定义的配置类非常多，而且每个配置类中又可以定义很多的bean，那这些bean都会注册到Spring的IOC容器中吗？</p><p>答案：并不是。 在声明bean对象时，上面有加一个以@Conditional开头的注解，这种注解的作用就是按照条件进行装配，只有满足条件之后，才会将bean注册到Spring的IOC容器中（下面会详细来讲解）</p></blockquote><h5 id="3-2-3-2-Conditional"><a href="#3-2-3-2-Conditional" class="headerlink" title="3.2.3.2 @Conditional"></a>3.2.3.2 @Conditional</h5><p>我们在跟踪SpringBoot自动配置的源码的时候，在自动配置类声明bean的时候，除了在方法上加了一个@Bean注解以外，还会经常用到一个注解，就是以Conditional开头的这一类的注解。以Conditional开头的这些注解都是条件装配的注解。下面我们就来介绍下条件装配注解。</p><p>@Conditional注解：</p><ul><li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中。</li><li>位置：方法、类</li><li>@Conditional本身是一个父注解，派生出大量的子注解：<ul><li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器。</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean(类型或名称)，才注册bean到IOC容器。</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li></ul></li></ul><p>下面我们通过代码来演示下Conditional注解的使用：</p><ul><li>@ConditionalOnClass注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"io.jsonwebtoken.Jwts"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//环境中存在指定的这个类，才会将该bean加入IOC容器</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><ul><li>pom.xml</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>JWT令牌<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>     <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>jsonwebtoken<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jjwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HeaderParser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115203748022.png"></p><p>因为io.jsonwebtoken.Jwts字节码文件在启动SpringBoot程序时已存在，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><ul><li>@ConditionalOnMissingBean注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment" spellcheck="true">//不存在该类型的bean，才会将该bean加入IOC容器</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115211029855.png"></p><p>SpringBoot在调用@Bean标识的headerParser()前，IOC容器中是没有HeaderParser类型的bean，所以HeaderParser对象正常创建，并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"deptController2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不存在指定名称的bean，才会将该bean加入IOC容器</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115211351681.png"></p><p>因为在SpringBoot环境中不存在名字叫deptController2的bean对象，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>HeaderConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不存在指定类型的bean，才会将bean加入IOC容器</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>HeaderParser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115211957191.png"></p><p>因为HeaderConfig类中添加@Configuration注解，而@Configuration注解中包含了@Component，所以SpringBoot启动时会创建HeaderConfig类对象，并注册到IOC容器中。</p><p>当IOC容器中有HeaderConfig类型的bean存在时，不会把创建HeaderParser对象注册到IOC容器中。而IOC容器中没有HeaderParser类型的对象时，通过getBean(HeaderParser.class)方法获取bean对象时，引发异常：NoSuchBeanDefinitionException</p></blockquote><ul><li>@ConditionalOnProperty注解（这个注解和配置文件当中配置的属性有关系）</li></ul><p>先在application.yml配置文件中添加如下的键值对：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> itheima</code></pre><p>在声明bean的时候就可以指定一个条件@ConditionalOnProperty</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeaderConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span>havingValue <span class="token operator">=</span> <span class="token string">"itheima"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span>    <span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HeaderGenerator <span class="token function">headerGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115220235511.png"></p></blockquote><p>修改@ConditionalOnProperty注解：  havingValue的值修改为”itheima2”</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span>havingValue <span class="token operator">=</span> <span class="token string">"itheima2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span><span class="token keyword">public</span> HeaderParser <span class="token function">headerParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>再次执行testHeaderParser()测试方法：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115211957191.png"></p><p>因为application.yml配置文件中，不存在： name:  itheima2，所以HeaderParser对象在IOC容器中不存在</p></blockquote><p>我们再回头看看之前讲解SpringBoot源码时提到的一个配置类：GsonAutoConfiguration</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115222128740.png"></p><p>最后再给大家梳理一下自动配置原理：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115222302753.png"></p><blockquote><p>自动配置的核心就在@SpringBootApplication注解上，SpringBootApplication这个注解底层包含了3个注解，分别是：</p><ul><li><p>@SpringBootConfiguration</p></li><li><p>@ComponentScan</p></li><li><p>@EnableAutoConfiguration</p></li></ul><p>@EnableAutoConfiguration这个注解才是自动配置的核心。</p><ul><li>它封装了一个@Import注解，Import注解里面指定了一个ImportSelector接口的实现类。</li><li>在这个实现类中，重写了ImportSelector接口中的selectImports()方法。</li><li>而selectImports()方法中会去读取两份配置文件，并将配置文件中定义的配置类做为selectImports()方法的返回值返回，返回值代表的就是需要将哪些类交给Spring的IOC容器进行管理。</li><li>那么所有自动配置类的中声明的bean都会加载到Spring的IOC容器中吗? 其实并不会，因为这些配置类中在声明bean时，通常都会添加@Conditional开头的注解，这个注解就是进行条件装配。而Spring会根据Conditional注解有选择性的进行bean的创建。</li><li>@Enable 开头的注解底层，它就封装了一个注解 import 注解，它里面指定了一个类，是 ImportSelector 接口的实现类。在实现类当中，我们需要去实现 ImportSelector  接口当中的一个方法 selectImports 这个方法。这个方法的返回值代表的就是我需要将哪些类交给 spring 的 IOC容器进行管理。</li><li>此时它会去读取两份配置文件，一份儿是 spring.factories，另外一份儿是 autoConfiguration.imports。而在  autoConfiguration.imports 这份儿文件当中，它就会去配置大量的自动配置的类。</li><li>而前面我们也提到过这些所有的自动配置类当中，所有的 bean都会加载到 spring 的 IOC 容器当中吗？其实并不会，因为这些配置类当中，在声明 bean 的时候，通常会加上这么一类@Conditional 开头的注解。这个注解就是进行条件装配。所以SpringBoot非常的智能，它会根据 @Conditional 注解来进行条件装配。只有条件成立，它才会声明这个bean，才会将这个 bean 交给 IOC 容器管理。</li></ul></blockquote><h4 id="3-2-4-案例"><a href="#3-2-4-案例" class="headerlink" title="3.2.4 案例"></a>3.2.4 案例</h4><h5 id="3-2-4-1-自定义starter分析"><a href="#3-2-4-1-自定义starter分析" class="headerlink" title="3.2.4.1 自定义starter分析"></a>3.2.4.1 自定义starter分析</h5><p>前面我们解析了SpringBoot中自动配置的原理，下面我们就通过一个自定义starter案例来加深大家对于自动配置原理的理解。首先介绍一下自定义starter的业务场景，再来分析一下具体的操作步骤。</p><p>所谓starter指的就是SpringBoot当中的起步依赖。在SpringBoot当中已经给我们提供了很多的起步依赖了，我们为什么还需要自定义 starter 起步依赖？这是因为在实际的项目开发当中，我们可能会用到很多第三方的技术，并不是所有的第三方的技术官方都给我们提供了与SpringBoot整合的starter起步依赖，但是这些技术又非常的通用，在很多项目组当中都在使用。</p><p>业务场景：</p><ul><li>我们前面案例当中所使用的阿里云OSS对象存储服务，现在阿里云的官方是没有给我们提供对应的起步依赖的，这个时候使用起来就会比较繁琐，我们需要引入对应的依赖。我们还需要在配置文件当中进行配置，还需要基于官方SDK示例来改造对应的工具类，我们在项目当中才可以进行使用。</li><li>大家想在我们当前项目当中使用了阿里云OSS，我们需要进行这么多步的操作。在别的项目组当中要想使用阿里云OSS，是不是也需要进行这么多步的操作，所以这个时候我们就可以自定义一些公共组件，在这些公共组件当中，我就可以提前把需要配置的bean都提前配置好。将来在项目当中，我要想使用这个技术，我直接将组件对应的坐标直接引入进来，就已经自动配置好了，就可以直接使用了。我们也可以把公共组件提供给别的项目组进行使用，这样就可以大大的简化我们的开发。</li></ul><p>在SpringBoot项目中，一般都会将这些公共组件封装为SpringBoot当中的starter，也就是我们所说的起步依赖。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115224939131.png"></p><blockquote><p>SpringBoot官方starter命名： spring-boot-starter-xxxx</p><p>第三组织提供的starter命名：  xxxx-spring-boot-starter</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115225703863.png"></p><blockquote><p>Mybatis提供了配置类，并且也提供了springboot会自动读取的配置文件。当SpringBoot项目启动时，会读取到spring.factories配置文件中的配置类并加载配置类，生成相关bean对象注册到IOC容器中。</p><p>结果：我们可以直接在SpringBoot程序中使用Mybatis自动配置的bean对象。</p></blockquote><p>在自定义一个起步依赖starter的时候，按照规范需要定义两个模块：</p><ol><li>starter模块（进行依赖管理[把程序开发所需要的依赖都定义在starter起步依赖中]）</li><li>autoconfigure模块（自动配置）</li></ol><blockquote><p>将来在项目当中进行相关功能开发时，只需要引入一个起步依赖就可以了，因为它会将autoconfigure自动配置的依赖给传递下来。</p></blockquote><p>上面我们简单介绍了自定义starter的场景，以及自定义starter时涉及到的模块之后，接下来我们就来完成一个自定义starter的案例。</p><p>需求：自定义aliyun-oss-spring-boot-starter，完成阿里云OSS操作工具类AliyunOSSUtils的自动配置。</p><p>目标：引入起步依赖引入之后，要想使用阿里云OSS，注入AliyunOSSUtils直接使用即可。</p><p>之前阿里云OSS的使用：</p><ul><li>配置文件</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#配置阿里云OSS参数</span><span class="token key atrule">aliyun</span><span class="token punctuation">:</span>  <span class="token key atrule">oss</span><span class="token punctuation">:</span>    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>shanghai.aliyuncs.com    <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> LTAI5t9MZK8iq5T2Av5GLDxX    <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc    <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>framework01</code></pre><ul><li>AliOSSProperties类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"aliyun.oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//区域</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份ID</span>    <span class="token keyword">private</span> String accessKeyId <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份密钥</span>    <span class="token keyword">private</span> String accessKeySecret <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储空间</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>AliOSSUtils工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//当前类对象由Spring创建和管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AliOSSProperties aliOSSProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实现上传图片到OSS     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile multipartFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取上传的文件的输入流</span>        InputStream inputStream <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 避免文件覆盖</span>        String originalFilename <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传文件到 OSS</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件访问路径</span>        String url <span class="token operator">=</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"//"</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭ossClient</span>        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把上传到oss的路径返回</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们在项目当中要使用阿里云OSS，就可以注入AliOSSUtils工具类来进行文件上传。但这种方式其实是比较繁琐的。</p><p>大家再思考，现在我们使用阿里云OSS，需要做这么几步，将来大家在开发其他的项目的时候，你使用阿里云OSS，这几步你要不要做？当团队中其他小伙伴也在使用阿里云OSS的时候，步骤 不也是一样的。</p><p>所以这个时候我们就可以制作一个公共组件(自定义starter)。starter定义好之后，将来要使用阿里云OSS进行文件上传，只需要将起步依赖引入进来之后，就可以直接注入AliOSSUtils使用了。</p><p>需求明确了，接下来我们再来分析一下具体的实现步骤：</p><ul><li>第1步：创建自定义starter模块（进行依赖管理）<ul><li>把阿里云OSS所有的依赖统一管理起来</li></ul></li><li>第2步：创建autoconfigure模块<ul><li>在starter中引入autoconfigure （我们使用时只需要引入starter起步依赖即可）</li></ul></li><li>第3步：在autoconfigure中完成自动配置<ol><li>定义一个自动配置类，在自动配置类中将所要配置的bean都提前配置好</li><li>定义配置文件，把自动配置类的全类名定义在配置文件中</li></ol></li></ul><p>我们分析完自定义阿里云OSS自动配置的操作步骤了，下面我们就按照分析的步骤来实现自定义starter。</p><h5 id="3-2-4-2-自定义starter实现"><a href="#3-2-4-2-自定义starter实现" class="headerlink" title="3.2.4.2 自定义starter实现"></a>3.2.4.2 自定义starter实现</h5><p>自定义starter的步骤我们刚才已经分析了，接下来我们就按照分析的步骤来完成自定义starter的开发。</p><p>首先我们先来创建两个Maven模块：</p><p>1). aliyun-oss-spring-boot-starter模块</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115234739988.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115234823134.png"></p><p>创建完starter模块后，删除多余的文件，最终保留内容如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115235429353.png"></p><p>删除pom.xml文件中多余的内容后：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>2). aliyun-oss-spring-boot-autoconfigure模块</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116000302319.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230115235921014.png"></p><p>创建完starter模块后，删除多余的文件，最终保留内容如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116000542905.png"></p><p>删除pom.xml文件中多余的内容后：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>按照我们之前的分析，是需要在starter模块中来引入autoconfigure这个模块的。打开starter模块中的pom文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入autoconfigure模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>前两步已经完成了，接下来是最关键的就是第三步：</p><p>在autoconfigure模块当中来完成自动配置操作。</p><blockquote><p> 我们将之前案例中所使用的阿里云OSS部分的代码直接拷贝到autoconfigure模块下，然后进行改造就行了。</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116001622679.png"></p><p>拷贝过来后，还缺失一些相关的依赖，需要把相关依赖也拷贝过来：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入web起步依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--阿里云OSS--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.15.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- no more than 2.3.3--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>现在大家思考下，在类上添加的@Component注解还有用吗？</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116002417105.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116002442736.png"></p><p>答案：没用了。  在SpringBoot项目中，并不会去扫描com.aliyun.oss这个包，不扫描这个包那类上的注解也就失去了作用。</p><blockquote><p>@Component注解不需要使用了，可以从类上删除了。</p><p>删除后报红色错误，暂时不理会，后面再来处理。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116002747681.png"></p><p>删除AliOSSUtils类中的@Component注解、@Autowired注解</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116003046768.png"></p></blockquote><p>下面我们就要定义一个自动配置类了，在自动配置类当中来声明AliOSSUtils的bean对象。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116003513900.png"></p><p> AliOSSAutoConfiguration类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//当前类为Spring配置类</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>AliOSSProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入AliOSSProperties类，并交给SpringIOC管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建AliOSSUtils对象，并交给SpringIOC容器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AliOSSUtils <span class="token function">aliOSSUtils</span><span class="token punctuation">(</span>AliOSSProperties aliOSSProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        AliOSSUtils aliOSSUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AliOSSUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aliOSSUtils<span class="token punctuation">.</span><span class="token function">setAliOSSProperties</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> aliOSSUtils<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AliOSSProperties类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*阿里云OSS相关配置*/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"aliyun.oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//区域</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份ID</span>    <span class="token keyword">private</span> String accessKeyId <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份密钥</span>    <span class="token keyword">private</span> String accessKeySecret <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储空间</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AliOSSUtils类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AliOSSProperties aliOSSProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实现上传图片到OSS     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile multipartFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取上传的文件的输入流</span>        InputStream inputStream <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 避免文件覆盖</span>        String originalFilename <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传文件到 OSS</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件访问路径</span>        String url <span class="token operator">=</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"//"</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭ossClient</span>        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把上传到oss的路径返回</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在aliyun-oss-spring-boot-autoconfigure模块中的resources下，新建自动配置文件：</p><ul><li><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>AliOSSAutoConfiguration</code></pre></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116004957697.png"></p><h5 id="3-2-4-3-自定义starter测试"><a href="#3-2-4-3-自定义starter测试" class="headerlink" title="3.2.4.3 自定义starter测试"></a>3.2.4.3 自定义starter测试</h5><p>阿里云OSS的starter我们刚才已经定义好了，接下来我们就来做一个测试。</p><blockquote><p>今天的课程资料当中，提供了一个自定义starter的测试工程。我们直接打开文件夹，里面有一个测试工程。测试工程就是springboot-autoconfiguration-test，我们只需要将测试工程直接导入到Idea当中即可。</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116005530815.png"></p><p>测试前准备：</p><ol><li><p>在test工程中引入阿里云starter依赖</p><ul><li>通过依赖传递，会把autoconfigure依赖也引入了</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入阿里云OSS起步依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-oss-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在test工程中的application.yml文件中，配置阿里云OSS配置参数信息（从以前的工程中拷贝即可）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#配置阿里云OSS参数</span><span class="token key atrule">aliyun</span><span class="token punctuation">:</span>  <span class="token key atrule">oss</span><span class="token punctuation">:</span>    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>shanghai.aliyuncs.com    <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> LTAI5t9MZK8iq5T2Av5GLDxX    <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc    <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>framework01</code></pre></li><li><p>在test工程中的UploadController类编写代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AliOSSUtils aliOSSUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile image<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//上传文件到阿里云 OSS</span>        String url <span class="token operator">=</span> aliOSSUtils<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>编写完代码后，我们启动当前的SpringBoot测试工程：</p><ul><li>随着SpringBoot项目启动，自动配置会把AliOSSUtils的bean对象装配到IOC容器中</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116011039611.png"></p><p>用postman工具进行文件上传：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116010731914.png"></p><p>通过断点可以看到自动注入AliOSSUtils的bean对象：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day12/image/image-20230116011501201.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day11</title>
      <link href="/2023/07/09/javaweb2023-day11/"/>
      <url>/2023/07/09/javaweb2023-day11/</url>
      
        <content type="html"><![CDATA[<h1 id="事务-amp-AOP"><a href="#事务-amp-AOP" class="headerlink" title="事务&amp;AOP"></a>事务&amp;AOP</h1><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>事务的操作主要有三步：</p><ol><li>开启事务（一组操作开始前，开启事务）：start transaction &#x2F; begin ;</li><li>提交事务（这组操作全部成功后，提交事务）：commit ;</li><li>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</li></ol><h3 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="Transactional注解"></a>Transactional注解</h3><blockquote><p>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，方法执行完毕之后提交事务。如果在这个方法执行的过程当中出现了异常，就会进行事务的回滚操作。</p><p>@Transactional注解：我们一般会在业务层当中来控制事务，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p></blockquote><p>@Transactional注解书写位置：</p><ul><li>方法<ul><li>当前方法交给spring进行事务管理</li></ul></li><li>类<ul><li>当前类中所有的方法都交由spring进行事务管理</li></ul></li><li>接口<ul><li>接口下所有的实现类当中所有的方法都交给spring 进行事务管理</li></ul></li></ul><p>接下来，我们就可以在业务方法delete上加上 @Transactional 来控制事务 。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>  <span class="token comment" spellcheck="true">//当前方法添加了事务管理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据部门id删除部门信息</span>        deptMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//模拟：异常发生</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除部门下的所有员工信息</span>        empMapper<span class="token punctuation">.</span><span class="token function">deleteByDeptId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明：可以在application.yml配置文件中开启事务管理日志，这样就可以在控制看到和事务相关的日志信息了</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#spring事务管理日志</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.jdbc.support.JdbcTransactionManager</span><span class="token punctuation">:</span> debug</code></pre><h3 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h3><p>默认情况下，只有出现RuntimeException(运行时异常)才会回滚事务。</p><p>假如我们想让所有的异常都回滚，需要来配置@Transactional注解当中的rollbackFor属性，通过rollbackFor这个属性可以指定出现何种异常类型回滚事务。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor<span class="token operator">=</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据部门id删除部门信息</span>        deptMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//模拟：异常发生</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> id<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除部门下的所有员工信息</span>        empMapper<span class="token punctuation">.</span><span class="token function">deleteByDeptId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>我们接着继续学习@Transactional注解当中的第二个属性propagation，这个属性是用来配置事务的传播行为的。</p><p>什么是事务的传播行为呢？</p><ul><li>就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</li></ul><p>例如：两个事务方法，一个A方法，一个B方法。在这两个方法上都添加了@Transactional注解，就代表这两个方法都具有事务，而在A方法当中又去调用了B方法。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112152543953.png"> </p><p>所谓事务的传播行为，指的就是在A方法运行的时候，首先会开启一个事务，在A方法当中又调用了B方法， B方法自身也具有事务，那么B方法在运行的时候，到底是加入到A方法的事务当中来，还是B方法在运行的时候新建一个事务？这个就涉及到了事务的传播行为。</p><p>我们要想控制事务的传播行为，在@Transactional注解的后面指定一个属性propagation，通过 propagation 属性来指定传播行为。接下来我们就来介绍一下常见的事务传播行为。</p><table><thead><tr><th><strong>属性值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr><tr><td>…</td><td></td></tr></tbody></table><blockquote><p>对于这些事务传播行为，我们只需要关注以下两个就可以了：</p><ol><li>REQUIRED（默认值）</li><li>REQUIRES_NEW</li></ol></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>接下来我们就通过一个案例来演示下事务传播行为propagation属性的使用。</p><p><strong>需求：</strong>解散部门时需要记录操作日志</p><p>​由于解散部门是一个非常重要而且非常危险的操作，所以在业务当中要求每一次执行解散部门的操作都需要留下痕迹，就是要记录操作日志。而且还要求无论是执行成功了还是执行失败了，都需要留下痕迹。</p><p><strong>步骤：</strong></p><ol><li>执行解散部门的业务：先删除部门，再删除部门下的员工（前面已实现）</li><li>记录解散部门的日志，到日志表（未实现）</li></ol><p><strong>准备工作：</strong></p><ol><li>创建数据库表 dept_log 日志表：</li></ol><pre class=" language-mysql"><code class="language-mysql">create table dept_log(       id int auto_increment comment '主键ID' primary key,    create_time datetime null comment '操作时间',    description varchar(300) null comment '操作描述')comment '部门操作日志表';</code></pre><ol start="2"><li>引入资料中提供的实体类：DeptLog</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptLog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>引入资料中提供的Mapper接口：DeptLogMapper</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptLogMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into dept_log(create_time,description) values(#{createTime},#{description})"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DeptLog log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>引入资料中提供的业务接口：DeptLogService</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptLogService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DeptLog deptLog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>引入资料中提供的业务实现类：DeptLogServiceImpl</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptLogServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptLogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptLogMapper deptLogMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//事务传播行为：有事务就加入、没有事务就新建事务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DeptLog deptLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        deptLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>deptLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>代码实现:</strong></p><p>业务实现类：DeptServiceImpl</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token comment" spellcheck="true">//@Transactional //当前业务实现类中的所有的方法，都添加了spring事务管理机制</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptLogService deptLogService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据部门id，删除部门信息及部门下的所有员工</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Log</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据部门id删除部门信息</span>            deptMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模拟：异常</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"出现异常了~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除部门下的所有员工信息</span>            empMapper<span class="token punctuation">.</span><span class="token function">deleteByDeptId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不论是否有异常，最终都要执行的代码：记录日志</span>            DeptLog deptLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeptLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deptLog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deptLog<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"执行了解散部门的操作，此时解散的是"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"号部门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用其他业务类中的方法</span>            deptLogService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>deptLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p><strong>测试:</strong></p><p>重新启动SpringBoot服务，测试删除3号部门后会发生什么？</p><ul><li>执行了删除3号部门操作</li><li>执行了插入部门日志操作</li><li>程序发生Exception异常</li><li>执行事务回滚（删除、插入操作因为在一个事务范围内，两个操作都会被回滚）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230109154025262.png"></p><p>然后在dept_log表中没有记录日志数据</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230109154344393.png"> </p><p><strong>原因分析:</strong></p><p>接下来我们就需要来分析一下具体是什么原因导致的日志没有成功的记录。</p><ul><li><p>在执行delete操作时开启了一个事务</p></li><li><p>当执行insert操作时，insert设置的事务传播行是默认值REQUIRED，表示有事务就加入，没有则新建事务</p></li><li><p>此时：delete和insert操作使用了同一个事务，同一个事务中的多个操作，要么同时成功，要么同时失败，所以当异常发生时进行事务回滚，就会回滚delete和insert操作</p></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230109162420479.png"></p><p><strong>解决方案：</strong></p><p>在DeptLogServiceImpl类中insert方法上，添加@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)</p><blockquote><p>Propagation.REQUIRES_NEW  ：不论是否有事务，都创建新事务  ，运行在一个独立的事务中。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptLogServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptLogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptLogMapper deptLogMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//事务传播行为：不论是否有事务，都新建事务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DeptLog deptLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        deptLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>deptLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务，再次测试删除3号部门：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230109170002879.png"></p><p>那此时，DeptServiceImpl中的delete方法运行时，会开启一个事务。 当调用  deptLogService.insert(deptLog)  时，也会创建一个新的事务，那此时，当insert方法运行完毕之后，事务就已经提交了。 即使外部的事务出现异常，内部已经提交的事务，也不会回滚了，因为是两个独立的事务。</p><p>到此事务传播行为已演示完成，事务的传播行为我们只需要掌握两个：REQUIRED、REQUIRES_NEW。</p><blockquote><ul><li><p>REQUIRED ：大部分情况下都是用该传播行为即可。</p></li><li><p>REQUIRES_NEW ：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</p></li></ul></blockquote><h2 id="AOP基础"><a href="#AOP基础" class="headerlink" title="AOP基础"></a>AOP基础</h2><h3 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h3><p>什么是AOP？</p><ul><li>AOP英文全称：Aspect Oriented Programming（面向切面编程、面向方面编程），其实说白了，面向切面编程就是面向特定方法编程。</li></ul><p>那什么又是面向方法编程呢，为什么又需要面向方法编程呢？来我们举个例子做一个说明：</p><p>比如，我们这里有一个项目，项目中开发了很多的业务功能。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112154547523.png"> </p><p>然而有一些业务功能执行效率比较低，执行耗时较长，我们需要针对于这些业务方法进行优化。 那首先第一步就需要定位出执行耗时比较长的业务方法，再针对于业务方法再来进行优化。</p><p>此时我们就需要统计当前这个项目当中每一个业务方法的执行耗时。那么统计每一个业务方法的执行耗时该怎么实现？</p><p>可能多数人首先想到的就是在每一个业务方法运行之前，记录这个方法运行的开始时间。在这个方法运行完毕之后，再来记录这个方法运行的结束时间。拿结束时间减去开始时间，不就是这个方法的执行耗时吗？</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112154605206.png"> </p><p>以上分析的实现方式是可以解决需求问题的。但是对于一个项目来讲，里面会包含很多的业务模块，每个业务模块又包含很多增删改查的方法，如果我们要在每一个模块下的业务方法中，添加记录开始时间、结束时间、计算执行耗时的代码，就会让程序员的工作变得非常繁琐。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112154627546.png"> </p><p>而AOP面向方法编程，就可以做到在不改动这些原始方法的基础上，针对特定的方法进行功能的增强。</p><blockquote><p>AOP的作用：在程序运行期间在不修改源代码的基础上对已有方法进行增强（无侵入性: 解耦）</p></blockquote><p>我们要想完成统计各个业务方法执行耗时的需求，我们只需要定义一个模板方法，将记录方法执行耗时这一部分公共的逻辑代码，定义在模板方法当中，在这个方法开始运行之前，来记录这个方法运行的开始时间，在方法结束运行的时候，再来记录方法运行的结束时间，中间就来运行原始的业务方法。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112154530101.png"> </p><p>而中间运行的原始业务方法，可能是其中的一个业务方法，比如：我们只想通过 部门管理的 list 方法的执行耗时，那就只有这一个方法是原始业务方法。  而如果，我们是先想统计所有部门管理的业务方法执行耗时，那此时，所有的部门管理的业务方法都是 原始业务方法。 <strong>那面向这样的指定的一个或多个方法进行编程，我们就称之为 面向切面编程。</strong></p><p>那此时，当我们再调用部门管理的 list 业务方法时啊，并不会直接执行 list 方法的逻辑，而是会执行我们所定义的 模板方法 ， 然后再模板方法中：</p><ul><li>记录方法运行开始时间</li><li>运行原始的业务方法（那此时原始的业务方法，就是 list 方法）</li><li>记录方法运行结束时间，计算方法执行耗时</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112155813944.png"> </p><p>不论，我们运行的是那个业务方法，最后其实运行的就是我们定义的模板方法，而在模板方法中，就完成了原始方法执行耗时的统计操作 。(那这样呢，我们就通过一个模板方法就完成了指定的一个或多个业务方法执行耗时的统计)</p><p>而大家会发现，这个流程，我们是不是似曾相识啊？ </p><p>对了，就是和我们之前所学习的动态代理技术是非常类似的。 我们所说的模板方法，其实就是代理对象中所定义的方法，那代理对象中的方法以及根据对应的业务需要， 完成了对应的业务功能，当运行原始业务方法时，就会运行代理对象中的方法，从而实现统计业务方法执行耗时的操作。</p><p>其实，AOP面向切面编程和OOP面向对象编程一样，它们都仅仅是一种编程思想，而动态代理技术是这种思想最主流的实现方式。而Spring的AOP是Spring框架的高级技术，旨在管理bean对象的过程中底层使用动态代理机制，对特定的方法进行编程(功能增强)。</p><blockquote><p>AOP的优势：</p><ol><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><strong>需求：</strong>统计各个业务层方法执行耗时。</p><p><strong>实现步骤：</strong></p><ol><li>导入依赖：在pom.xml中导入AOP的依赖</li><li>编写AOP程序：针对于特定方法根据业务需要进行编程</li></ol><blockquote><p>为演示方便，可以自建新项目或导入提供的<code>springboot-aop-quickstart</code>项目工程</p></blockquote><p><strong>pom.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>AOP程序：TimeAspect</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//当前类为切面类</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> Object <span class="token function">recordTime</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录方法执行开始时间</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行原始方法</span>        Object result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录方法执行结束时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算方法执行耗时</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行耗时: {}毫秒"</span><span class="token punctuation">,</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们通过AOP入门程序完成了业务方法执行耗时的统计，那其实AOP的功能远不止于此，常见的应用场景如下：</p><ul><li>记录系统的操作日志</li><li>权限控制</li><li>事务管理：我们前面所讲解的Spring事务管理，底层其实也是通过AOP来实现的，只要添加@Transactional注解之后，AOP程序自动会在原始方法运行前先来开启事务，在原始方法运行完毕之后提交或回滚事务</li></ul><p>这些都是AOP应用的典型场景。</p><p>通过入门程序，我们也应该感受到了AOP面向切面编程的一些优势：</p><ul><li><p>代码无侵入：没有修改原始的业务方法，就已经对原始的业务方法进行了功能的增强或者是功能的改变</p></li><li><p>减少了重复代码</p></li><li><p>提高开发效率</p></li><li><p>维护方便</p></li></ul><h3 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h3><p><strong>1. 连接点：JoinPoint</strong>，可以被AOP控制的方法（暗含方法执行时的相关信息）</p><p>​连接点指的是可以被aop控制的方法。例如：入门程序当中所有的业务方法都是可以被aop控制的方法。</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112160708474.png"> </p><p>​在SpringAOP提供的JoinPoint当中，封装了连接点方法在执行时的相关信息。（后面会有具体的讲解）</p><p><strong>2. 通知：Advice</strong>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>​在入门程序中是需要统计各个业务方法的执行耗时的，此时我们就需要在这些业务方法运行开始之前，先记录这个方法运行的开始时间，在每一个业务方法运行结束的时候，再来记录这个方法运行的结束时间。</p><p>​但是在AOP面向切面编程当中，我们只需要将这部分重复的代码逻辑抽取出来单独定义。抽取出来的这一部分重复的逻辑，也就是共性的功能。</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112160852883.png"> </p><p>​</p><p><strong>3. 切入点：PointCut</strong>，匹配连接点的条件，通知仅会在切入点方法执行时被应用</p><p>​在通知当中，我们所定义的共性功能到底要应用在哪些方法上？此时就涉及到了切入点pointcut概念。切入点指的是匹配连接点的条件。通知仅会在切入点方法运行时才会被应用。</p><p>​在aop的开发当中，我们通常会通过一个切入点表达式来描述切入点(后面会有详解)。</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112161131937.png"> </p><p>​假如：切入点表达式改为DeptServiceImpl.list()，此时就代表仅仅只有list这一个方法是切入点。只有list()方法在运行的时候才会应用通知。</p><p>​</p><p><strong>4. 切面：Aspect</strong>，描述通知与切入点的对应关系（通知+切入点）</p><p>​当通知和切入点结合在一起，就形成了一个切面。通过切面就能够描述当前aop程序需要针对于哪个原始方法，在什么时候执行什么样的操作。</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112161335186.png"> </p><p>​切面所在的类，我们一般称为<strong>切面类</strong>（被@Aspect注解标识的类）</p><p>​</p><p><strong>5. 目标对象：Target</strong>，通知所应用的对象</p><p>​目标对象指的就是通知所应用的对象，我们就称之为目标对象。</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112161657667.png"> </p><p>AOP的核心概念我们介绍完毕之后，接下来我们再来分析一下我们所定义的通知是如何与目标对象结合在一起，对目标对象当中的方法进行功能增强的。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230112161821401.png"> </p><p>Spring的AOP底层是基于动态代理技术来实现的，也就是说在程序运行的时候，会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强。</p><h2 id="AOP进阶"><a href="#AOP进阶" class="headerlink" title="AOP进阶"></a>AOP进阶</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><p>在入门程序当中，我们已经使用了一种功能最为强大的通知类型：Around环绕通知。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">recordTime</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//记录方法执行开始时间</span>    <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行原始方法</span>    Object result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录方法执行结束时间</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算方法执行耗时</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行耗时: {}毫秒"</span><span class="token punctuation">,</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>只要我们在通知方法上加上了@Around注解，就代表当前通知是一个环绕通知。</p></blockquote><p>Spring中AOP的通知类型：</p><ul><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li></ul><p>下面我们通过代码演示，来加深对于不同通知类型的理解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"around before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用目标对象的原始方法执行</span>        Object result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//原始方法如果执行时有异常，环绕通知中的后置代码不会在执行了</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"around after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterReturning ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//异常通知（程序在出现异常的情况下，执行的后置通知）</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterThrowing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>程序没有发生异常的情况下，@AfterThrowing标识的通知方法不会执行。</p></blockquote><blockquote><p>程序发生异常的情况下：</p><ul><li><p>@AfterReturning标识的通知方法不会执行，@AfterThrowing标识的通知方法执行了</p></li><li><p>@Around环绕通知中原始方法调用时有异常，通知中的环绕后的代码逻辑也不会在执行了 （因为原始方法调用已经出异常了）</p></li></ul></blockquote><p>在使用通知时的注意事项：</p><ul><li>@Around环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值，否则原始方法执行完毕，是获取不到返回值的。</li></ul><p>五种常见的通知类型，我们已经测试完毕了，此时我们再来看一下刚才所编写的代码，有什么问题吗？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前置通知</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//环绕通知</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后置通知</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//异常通知（程序在出现异常的情况下，执行的后置通知）</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span></code></pre><p>我们发现啊，每一个注解里面都指定了切入点表达式，而且这些切入点表达式都一模一样。此时我们的代码当中就存在了大量的重复性的切入点表达式，假如此时切入点表达式需要变动，就需要将所有的切入点表达式一个一个的来改动，就变得非常繁琐了。</p><p>怎么来解决这个切入点表达式重复的问题？ 答案就是：<strong>抽取</strong></p><p>Spring提供了@PointCut注解，该注解的作用是将公共的切入点表达式抽取出来，需要用到时引用该切入点表达式即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//切入点方法（公共的切入点表达式）</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前置通知（引用切入点）</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"around before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用目标对象的原始方法执行</span>        Object result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原始方法在执行时：发生异常</span>        <span class="token comment" spellcheck="true">//后续代码不在执行</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"around after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterReturning ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//异常通知（程序在出现异常的情况下，执行的后置通知）</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterThrowing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>需要注意的是：当切入点方法使用private修饰时，仅能在当前切面类中引用该表达式， 当外部其他切面类中也要引用当前类中的切入点表达式，就需要把private改为public，而在引用的时候，具体的语法为：</p><p>全类名.方法名()，具体形式如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//引用MyAspect1切面类中的切入点表达式</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"com.itheima.aspect.MyAspect1.pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect2 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><p>当在项目开发当中，我们定义了多个切面类，而多个切面类中多个切入点都匹配到了同一个目标方法。此时当目标方法在运行的时候，这多个切面类当中的这些通知方法都会运行。</p><p>此时我们就有一个疑问，这多个通知方法到底哪个先运行，哪个后运行？ 下面我们通过程序来验证（这里呢，我们就定义两种类型的通知进行测试，一种是前置通知@Before，一种是后置通知@After）</p><p>定义多个切面类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect2 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect2 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect3 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect3 ->  after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect4 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect4 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动SpringBoot服务，测试通知的执行顺序：</p><blockquote><p>备注：</p><ol><li><p>把DeptServiceImpl实现类中模拟异常的代码删除或注释掉。</p></li><li><p>注释掉其他切面类(把@Aspect注释即可)，仅保留MyAspect2、MyAspect3、MyAspect4 ，这样就可以清晰看到执行的结果，而不被其他切面类干扰。</p></li></ol></blockquote><ul><li>使用postman测试查询所有部门数据</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110165514461.png"></p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110211208549.png"></p><p>通过以上程序运行可以看出在不同切面类中，默认按照切面类的类名字母排序：</p><ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul><p>如果我们想控制通知的执行顺序有两种方式：</p><ol><li>修改切面类的类名（这种方式非常繁琐、而且不便管理）</li><li>使用Spring提供的@Order注解</li></ol><p>使用@Order注解，控制通知的执行顺序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect2 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知 </span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect2 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect3 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect3 ->  after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect4</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect4 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect4 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动SpringBoot服务，测试通知执行顺序：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110212523787.png"></p><blockquote><p>通知的执行顺序大家主要知道两点即可：</p><ol><li>不同的切面类当中，默认情况下通知的执行顺序是与切面类的类名字母排序是有关系的</li><li>可以在切面类上面加上@Order注解，来控制不同的切面类通知的执行顺序</li></ol></blockquote><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>切入点表达式：</p><ul><li><p>描述切入点方法的一种表达式</p></li><li><p>作用：主要用来决定项目中的哪些方法需要加入通知</p></li><li><p>常见形式：</p><ol><li>execution(……)：根据方法的签名来匹配</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110214150215.png"></p><ol start="2"><li>@annotation(……) ：根据注解匹配</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110214242083.png" alt="image-20230110214242083"></p></li></ul><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><pre><code>execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) throws 异常?)</code></pre><p>其中带<code>?</code>的表示可以省略的部分</p><ul><li><p>访问修饰符：可省略（比如: public、protected）</p></li><li><p>包名.类名： 可省略</p></li><li><p>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</p></li></ul><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))"</span><span class="token punctuation">)</span></code></pre><p>可以使用通配符描述切入点</p><ul><li><p><code>*</code> ：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</p></li><li><p><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p></li></ul><p>切入点表达式的语法规则：</p><ol><li>方法的访问修饰符可以省略</li><li>返回值可以使用<code>*</code>号代替（任意返回值类型）</li><li>包名可以使用<code>*</code>号代替，代表任意包（一层包使用一个<code>*</code>）</li><li>使用<code>..</code>配置包名，标识此包以及此包下的所有子包</li><li>类名可以使用<code>*</code>号代替，标识任意类</li><li>方法名可以使用<code>*</code>号代替，表示任意方法</li><li>可以使用 <code>*</code>  配置参数，一个任意类型的参数</li><li>可以使用<code>..</code> 配置参数，任意个任意类型的参数</li></ol><p><strong>切入点表达式示例</strong></p><ul><li><p>省略方法的修饰符号 </p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">void</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>使用<code>*</code>代替返回值类型</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>使用<code>*</code>代替包名（一层包使用一个<code>*</code>）</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>使用<code>..</code>省略包名</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span>    </code></pre></li><li><p>使用<code>*</code>代替类名</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span>   </code></pre></li><li><p>使用<code>*</code>代替方法名</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span><span class="token punctuation">)</span>   </code></pre></li><li><p>使用 <code>*</code> 代替参数</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>使用<code>..</code>省略参数</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><p>​</p><p>注意事项：</p><ul><li><p>根据业务需要，可以使用 且（&amp;&amp;）、或（||）、非（!） 来组合比较复杂的切入点表达式。</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DeptService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DeptService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><p>切入点表达式的书写建议：</p><ul><li><p>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 find 开头，更新类方法都是update开头</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//业务类</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">findAllDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//省略代码...</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Dept <span class="token function">findDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//省略代码...</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//省略代码...</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDeptByMoreCondition</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//省略代码...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其他代码...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//匹配DeptServiceImpl类中以find开头的方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span>find<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DeptService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 ..，使用 * 匹配单个包</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>DeptServiceImpl<span class="token punctuation">.</span>find<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h4><p>已经学习了execution切入点表达式的语法。那么如果我们要匹配多个无规则的方法，比如：list()和 delete()这两个方法。这个时候我们基于execution这种切入点表达式来描述就不是很方便了。而在之前我们是将两个切入点表达式组合在了一起完成的需求，这个是比较繁琐的。</p><p>我们可以借助于另一种切入点表达式annotation来描述这一类的切入点，从而来简化切入点表达式的书写。</p><p>实现步骤：</p><ol><li><p>编写自定义注解</p></li><li><p>在业务类要做为连接点的方法上添加自定义注解</p></li></ol><p><strong>自定义注解</strong>：MyLog</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>业务类</strong>：DeptServiceImpl</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@MyLog</span> <span class="token comment" spellcheck="true">//自定义注解（表示：当前方法属于目标方法）</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> deptList <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟异常</span>        <span class="token comment" spellcheck="true">//int num = 10/0;</span>        <span class="token keyword">return</span> deptList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@MyLog</span>  <span class="token comment" spellcheck="true">//自定义注解（表示：当前方法属于目标方法）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 删除部门</span>        deptMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dept<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deptMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Dept <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dept<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deptMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>切面类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect6</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//针对list方法、delete方法进行前置通知和后置通知</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.itheima.anno.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect6 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.itheima.anno.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAspect6 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务，测试查询所有部门数据，查看控制台日志：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110224447047.png"></p><p>到此我们两种常见的切入点表达式我已经介绍完了。</p><ul><li>execution切入点表达式<ul><li>根据我们所指定的方法的描述信息来匹配切入点方法，这种方式也是最为常用的一种方式</li><li>如果我们要匹配的切入点方法的方法名不规则，或者有一些比较特殊的需求，通过execution切入点表达式描述比较繁琐</li></ul></li><li>annotation 切入点表达式<ul><li>基于注解的方式来匹配切入点方法。这种方式虽然多一步操作，我们需要自定义一个注解，但是相对来比较灵活。我们需要匹配哪个方法，就在方法上加上对应的注解就可以了</li></ul></li></ul><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>连接点可以简单理解为可以被AOP控制的方法。</p><p>我们目标对象当中所有的方法是不是都是可以被AOP控制的方法。而在SpringAOP当中，连接点又特指方法的执行。</p><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><ul><li><p>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</p></li><li><p>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</p></li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect7</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.itheima.anno.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" MyAspect7 -> before ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" MyAspect7 -> after ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取目标类名</span>        String name <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"目标类名：{}"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标方法名</span>        String methodName <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"目标方法名：{}"</span><span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法执行时需要的参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"目标方法参数：{}"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行原始方法</span>        Object returnValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动SpringBoot服务，执行查询部门数据的功能：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230110231629140.png"></p><h2 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>需求：将案例中增、删、改相关接口的操作日志记录到数据库表中</p><ul><li>就是当访问部门管理和员工管理当中的增、删、改相关功能接口时，需要详细的操作日志，并保存在数据表中，便于后期数据追踪。</li></ul><p>操作日志信息包含：</p><ul><li>操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长</li></ul><blockquote><p>所记录的日志信息包括当前接口的操作人是谁操作的，什么时间点操作的，以及访问的是哪个类当中的哪个方法，在访问这个方法的时候传入进来的参数是什么，访问这个方法最终拿到的返回值是什么，以及整个接口方法的运行时长是多长时间。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>问题1：项目当中增删改相关的方法是不是有很多？</p><ul><li>很多</li></ul><p>问题2：我们需要针对每一个功能接口方法进行修改，在每一个功能接口当中都来记录这些操作日志吗？</p><ul><li>这种做法比较繁琐</li></ul><p>以上两个问题的解决方案：可以使用AOP解决(每一个增删改功能接口中要实现的记录操作日志的逻辑代码是相同)。</p><blockquote><p>可以把这部分记录操作日志的通用的、重复性的逻辑代码抽取出来定义在一个通知方法当中，我们通过AOP面向切面编程的方式，在不改动原始功能的基础上来对原始的功能进行增强。目前我们所增强的功能就是来记录操作日志，所以也可以使用AOP的技术来实现。使用AOP的技术来实现也是最为简单，最为方便的。</p></blockquote><p>问题3：既然要基于AOP面向切面编程的方式来完成的功能，那么我们要使用 AOP五种通知类型当中的哪种通知类型？</p><ul><li>答案：环绕通知</li></ul><blockquote><p>所记录的操作日志当中包括：操作人、操作时间，访问的是哪个类、哪个方法、方法运行时参数、方法的返回值、方法的运行时长。</p><p>方法返回值，是在原始方法执行后才能获取到的。</p><p>方法的运行时长，需要原始方法运行之前记录开始时间，原始方法运行之后记录结束时间。通过计算获得方法的执行耗时。</p><p>基于以上的分析我们确定要使用Around环绕通知。</p></blockquote><p>问题4：最后一个问题，切入点表达式我们该怎么写？</p><ul><li>答案：使用annotation来描述表达式</li></ul><blockquote><p>要匹配业务接口当中所有的增删改的方法，而增删改方法在命名上没有共同的前缀或后缀。此时如果使用execution切入点表达式也可以，但是会比较繁琐。 当遇到增删改的方法名没有规律时，就可以使用 annotation切入点表达式</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>简单分析了一下大概的实现思路后，接下来我们就要来完成案例了。案例的实现步骤其实就两步：</p><ul><li>准备工作<ol><li>引入AOP的起步依赖</li><li>导入资料中准备好的数据库表结构，并引入对应的实体类</li></ol></li><li>编码实现<ol><li>自定义注解@Log</li><li>定义切面类，完成记录操作日志的逻辑</li></ol></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>AOP起步依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--AOP起步依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>导入资料中准备好的数据库表结构，并引入对应的实体类</li></ol><p>数据表</p><pre class=" language-mysql"><code class="language-mysql">-- 操作日志表create table operate_log(    id int unsigned primary key auto_increment comment 'ID',    operate_user int unsigned comment '操作人',    operate_time datetime comment '操作时间',    class_name varchar(100) comment '操作的类名',    method_name varchar(100) comment '操作的方法名',    method_params varchar(1000) comment '方法参数',    return_value varchar(2000) comment '返回值',    cost_time bigint comment '方法执行耗时, 单位:ms') comment '操作日志表';</code></pre><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//操作日志实体类</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperateLog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键ID</span>    <span class="token keyword">private</span> Integer operateUser<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作人ID</span>    <span class="token keyword">private</span> LocalDateTime operateTime<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作时间</span>    <span class="token keyword">private</span> String className<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作类名</span>    <span class="token keyword">private</span> String methodName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作方法名</span>    <span class="token keyword">private</span> String methodParams<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作方法参数</span>    <span class="token keyword">private</span> String returnValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作方法返回值</span>    <span class="token keyword">private</span> Long costTime<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作耗时</span><span class="token punctuation">}</span></code></pre><p>Mapper接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperateLogMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//插入日志数据</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) "</span> <span class="token operator">+</span>            <span class="token string">"values (#{operateUser}, #{operateTime}, #{className}, #{methodName}, #{methodParams}, #{returnValue}, #{costTime});"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>OperateLog log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><ul><li>自定义注解@Log</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义Log注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>修改业务实现类，在增删改业务方法上添加@Log注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Log</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        emp<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新修改时间为当前时间</span>        empMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Log</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//补全数据</span>        emp<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用添加方法</span>        empMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Log</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        empMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p>以同样的方式，修改EmpServiceImpl业务类</p><ul><li>定义切面类，完成记录操作日志的逻辑</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HttpServletRequest request<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OperateLogMapper operateLogMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.itheima.anno.Log)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">recordLog</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//操作人ID - 当前登录员工ID</span>        <span class="token comment" spellcheck="true">//获取请求头中的jwt令牌, 解析令牌</span>        String jwt <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Claims claims <span class="token operator">=</span> JwtUtils<span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer operateUser <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作时间</span>        LocalDateTime operateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作类名</span>        String className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作方法名</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作方法参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodParams <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用原始目标方法运行</span>        Object result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法返回值</span>        String returnValue <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//操作耗时</span>        Long costTime <span class="token operator">=</span> end <span class="token operator">-</span> begin<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录操作日志</span>        OperateLog operateLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperateLog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>operateUser<span class="token punctuation">,</span>operateTime<span class="token punctuation">,</span>className<span class="token punctuation">,</span>methodName<span class="token punctuation">,</span>methodParams<span class="token punctuation">,</span>returnValue<span class="token punctuation">,</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        operateLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>operateLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"AOP记录操作日志: {}"</span> <span class="token punctuation">,</span> operateLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>代码实现细节： 获取request对象，从请求头中获取到jwt令牌，解析令牌获取出当前用户的id。</p></blockquote><p>重启SpringBoot服务，测试操作日志记录功能：</p><ul><li>添加一个新的部门</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230111001114301.png"></p><ul><li>数据表</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day11/image/image-20230111001230731.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day10</title>
      <link href="/2023/07/08/javaweb2023-day10/"/>
      <url>/2023/07/08/javaweb2023-day10/</url>
      
        <content type="html"><![CDATA[<h1 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h1><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230105175310401.png"></p><p>登录服务端的核心逻辑就是：接收前端请求传递的用户名和密码 ，然后再根据用户名和密码查询用户信息，如果用户信息存在，则说明用户输入的用户名和密码正确。如果查询到的用户不存在，则说明用户输入的用户名和密码错误。</p><h3 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h3><p><strong>LoginController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Emp emp<span class="token punctuation">)</span><span class="token punctuation">{</span>        Emp e <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  e <span class="token operator">!=</span> null <span class="token operator">?</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>EmpService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户登录     * @param emp     * @return     */</span>    <span class="token keyword">public</span> Emp <span class="token function">login</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Emp <span class="token function">login</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用dao层功能：登录</span>        Emp loginEmp <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">getByUsernameAndPassword</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回查询结果给Controller</span>        <span class="token keyword">return</span> loginEmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time "</span> <span class="token operator">+</span>            <span class="token string">"from emp "</span> <span class="token operator">+</span>            <span class="token string">"where username=#{username} and password =#{password}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Emp <span class="token function">getByUsernameAndPassword</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><p>什么是登录校验？</p><ul><li>所谓登录校验，指的是我们在服务器端接收到浏览器发送过来的请求之后，首先我们要对请求进行校验。先要校验一下用户登录了没有，如果用户已经登录了，就直接执行对应的业务操作就可以了；如果用户没有登录，此时就不允许他执行相关的业务操作，直接给前端响应一个错误的结果，最终跳转到登录页面，要求他登录成功之后，再来访问对应的数据。</li></ul><p>那应该怎么来实现登录校验的操作呢？具体的实现思路可以分为两部分：</p><ol><li>在员工登录成功后，需要将用户登录成功的信息存起来，记录用户已经登录成功的标记。</li><li>在浏览器发起请求时，需要在服务端进行统一拦截，拦截后进行登录校验。</li></ol><p>我们要完成以上操作，会涉及到web开发中的两个技术：</p><ol><li>会话技术</li><li>统一拦截技术</li></ol><p>而统一拦截技术现实方案也有两种：</p><ol><li>Servlet规范中的Filter过滤器</li><li>Spring提供的interceptor拦截器</li></ol><p>会话跟踪技术有两种：</p><ol><li>Cookie（客户端会话跟踪技术）<ul><li>数据存储在客户端浏览器当中</li></ul></li><li>Session（服务端会话跟踪技术）<ul><li>数据存储在储在服务端</li></ul></li><li>令牌技术</li></ol><p>因为前两个不能跨域，所以基本都用第三个。</p><p>区分跨域的维度：</p><ul><li>协议</li><li>IP&#x2F;协议</li><li>端口</li></ul><p>只要上述的三个维度有任何一个维度不同，那就是跨域操作</p><h2 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>JWT全称：JSON Web Token  （官网：<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></p><ul><li><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><blockquote><p>简洁：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。</p><p>自包含：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。</p><p>简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。</p></blockquote></li></ul><p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p><ul><li><p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：{“alg”:”HS256”,”type”:”JWT”}</p></li><li><p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：{“id”:”1”,”username”:”Tom”}</p></li><li><p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p><blockquote><p>签名的目的就是为了防jwt令牌被篡改，而正是因为jwt令牌最后一个部分数字签名的存在，所以整个jwt 令牌是非常安全可靠的。一旦jwt令牌当中任何一个部分、任何一个字符被篡改了，整个令牌在校验的时候都会失败，所以它是非常安全可靠的。</p></blockquote></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106085442076.png"></p><blockquote><p>JWT是如何将原始的JSON格式数据，转变为字符串的呢？</p><p>其实在生成JWT令牌时，会对JSON格式的数据进行一次编码：进行base64编码</p><p>Base64：是一种基于64个可打印的字符来表示二进制数据的编码方式。既然能编码，那也就意味着也能解码。所使用的64个字符分别是A到Z、a到z、 0- 9，一个加号，一个斜杠，加起来就是64个字符。任何数据经过base64编码之后，最终就会通过这64个字符来表示。当然还有一个符号，那就是等号。等号它是一个补位的符号</p><p>需要注意的是Base64是编码方式，而不是加密方式。</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112114319773.png"> </p><p>JWT令牌最典型的应用场景就是登录认证：</p><ol><li>在浏览器发起请求来执行登录操作，此时会访问登录的接口，如果登录成功之后，我们需要生成一个jwt令牌，将生成的 jwt令牌返回给前端。</li><li>前端拿到jwt令牌之后，会将jwt令牌存储起来。在后续的每一次请求中都会将jwt令牌携带到服务端。</li><li>服务端统一拦截请求之后，先来判断一下这次请求有没有把令牌带过来，如果没有带过来，直接拒绝访问，如果带过来了，还要校验一下令牌是否是有效。如果有效，就直接放行进行请求的处理。</li></ol><p>在JWT登录认证的场景中我们发现，整个流程当中涉及到两步操作：</p><ol><li>在登录成功之后，要生成令牌。</li><li>每一次请求当中，要接收令牌并对令牌进行校验。</li></ol><p>稍后我们再来学习如何来生成jwt令牌，以及如何来校验jwt令牌。</p><h4 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h4><p>简单介绍了JWT令牌以及JWT令牌的组成之后，接下来我们就来学习基于Java代码如何生成和校验JWT令牌。</p><p>首先我们先来实现JWT令牌的生成。要想使用JWT令牌，需要先引入JWT的依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- JWT依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><blockquote><p>在引入完JWT来赖后，就可以调用工具包中提供的API来完成JWT令牌的生成和校验</p><p>工具类：Jwts</p></blockquote><p>生成JWT代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//自定义内容(载荷)          </span>        <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> <span class="token string">"itheima"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签名算法        </span>        <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//有效期   </span>        <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行测试方法：</p><pre><code>eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk</code></pre><p>输出的结果就是生成的JWT令牌,，通过英文的点分割对三个部分进行分割，我们可以将生成的令牌复制一下，然后打开JWT的官网，将生成的令牌直接放在Encoded位置，此时就会自动的将令牌解析出来。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106190950305.png"></p><blockquote><p>第一部分解析出来，看到JSON格式的原始数据，所使用的签名算法为HS256。</p><p>第二个部分是我们自定义的数据，之前我们自定义的数据就是id，还有一个exp代表的是我们所设置的过期时间。</p><p>由于前两个部分是base64编码，所以是可以直接解码出来。但最后一个部分并不是base64编码，是经过签名算法计算出来的，所以最后一个部分是不会解析的。</p></blockquote><p>实现了JWT令牌的生成，下面我们接着使用Java代码来校验JWT令牌(解析生成的令牌)：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"itheima"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定签名密钥（必须保证和生成令牌时使用相同的签名密钥）  </span>        <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span><span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行测试方法：</p><pre><code>&#123;id=1, exp=1672729730&#125;</code></pre><blockquote><p>令牌解析后，我们可以看到id和过期时间，如果在解析的过程当中没有报错，就说明解析成功了。</p></blockquote><p>下面我们做一个测试：把令牌header中的数字9变为8，运行测试方法后发现报错：</p><blockquote><p>原header： eyJhbGciOiJIUzI1NiJ9</p><p>修改为： eyJhbGciOiJIUzI1NiJ8</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106205045658.png"></p><p>结论：篡改令牌中的任何一个字符，在对令牌进行解析时都会报错，所以JWT令牌是非常安全可靠的。</p><p>我们继续测试：修改生成令牌的时指定的过期时间，修改为1分钟</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“id”<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“username”<span class="token punctuation">,</span>“Tom”<span class="token punctuation">)</span><span class="token punctuation">;</span>    String jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//自定义内容(载荷)          </span>        <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> “itheima”<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签名算法        </span>        <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//有效期60秒   </span>        <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出结果：eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"itheima"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定签名密钥</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span><span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>等待1分钟之后运行测试方法发现也报错了，说明：JWT令牌过期后，令牌就失效了，解析的为非法令牌。</p><p>通过以上测试，我们在使用JWT令牌时需要注意：</p><ul><li><p>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是配套的。</p></li><li><p>如果JWT令牌解析校验时报错，则说明 JWT令牌被篡改 或 失效了，令牌非法。</p></li></ul><h4 id="登录下发令牌"><a href="#登录下发令牌" class="headerlink" title="登录下发令牌"></a>登录下发令牌</h4><p>JWT令牌的生成和校验的基本操作我们已经学习完了，接下来我们就需要在案例当中通过JWT令牌技术来跟踪会话。具体的思路我们前面已经分析过了，主要就是两步操作：</p><ol><li>生成令牌<ul><li>在登录成功之后来生成一个JWT令牌，并且把这个令牌直接返回给前端</li></ul></li><li>校验令牌<ul><li>拦截前端请求，从请求中获取到令牌，对令牌进行解析校验</li></ul></li></ol><p>那我们首先来完成：登录成功之后生成JWT令牌，并且把令牌返回给前端。</p><p>JWT令牌怎么返回给前端呢？此时我们就需要再来看一下接口文档当中关于登录接口的描述（主要看响应数据）：</p><ul><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo"</span><span class="token punctuation">}</span></code></pre></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"NOT_LOGIN"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span></code></pre></li></ul><p>解读完接口文档中的描述了，目前我们先来完成令牌的生成和令牌的下发，我们只需要生成一个令牌返回给前端就可以了。</p><p><strong>实现步骤：</strong></p><ol><li>引入JWT工具类<ul><li>在项目工程下创建com.itheima.utils包，并把提供JWT工具类复制到该包下</li></ul></li><li>登录完成后，调用工具类生成JWT令牌并返回</li></ol><p><strong>JWT工具类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String signKey <span class="token operator">=</span> <span class="token string">"itheima"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签名密钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Long expire <span class="token operator">=</span> 43200000L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//有效时间</span>    <span class="token comment" spellcheck="true">/**     * 生成JWT令牌     * @param claims JWT第二部分负载 payload 中存储的内容     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateJwt</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span>        String jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自定义信息（有效载荷）</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> signKey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//签名算法（头部）</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过期时间</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jwt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析JWT令牌     * @param jwt JWT令牌     * @return JWT第二部分负载 payload 中存储的内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">parseJWT</span><span class="token punctuation">(</span>String jwt<span class="token punctuation">)</span><span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>signKey<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定签名密钥</span>                <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定令牌Token</span>                <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>登录成功，生成JWT令牌并返回</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//依赖业务层对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用业务层：登录功能</span>        Emp loginEmp <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断：登录用户是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loginEmp <span class="token operator">!=</span>null <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自定义信息</span>            Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> loginEmp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>loginEmp<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>loginEmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用JWT工具类，生成身份令牌</span>            String token <span class="token operator">=</span> JwtUtils<span class="token punctuation">.</span><span class="token function">generateJwt</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启服务，打开postman测试登录接口：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106212805480.png"></p><p>打开浏览器完成前后端联调操作：利用开发者工具，抓取一下网络请求</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106213419461.png"></p><blockquote><p>登录请求完成后，可以看到JWT令牌已经响应给了前端，此时前端就会将JWT令牌存储在浏览器本地。</p></blockquote><p>服务器响应的JWT令牌存储在本地浏览器哪里了呢？</p><ul><li>在当前案例中，JWT令牌存储在浏览器的本地存储空间local storage中了。 local storage是浏览器的本地存储，在移动端也是支持的。</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106213910049.png"></p><p>我们在发起一个查询部门数据的请求，此时我们可以看到在请求头中包含一个token(JWT令牌)，后续的每一次请求当中，都会将这个令牌携带到服务端。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106214331443.png"></p><h2 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h2><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>什么是Filter？</p><ul><li>Filter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能<ul><li>使用了过滤器之后，要想访问web服务器上的资源，必须先经过滤器，过滤器处理完毕之后，才可以访问对应的资源。</li></ul></li><li>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112120955145.png"> </p><p>下面我们通过Filter快速入门程序掌握过滤器的基本使用操作：</p><ul><li>第1步，定义过滤器 ：1.定义一个类，实现 Filter 接口，并重写其所有方法。</li><li>第2步，配置过滤器：Filter类上加 @WebFilter 注解，配置拦截资源的路径。引导类上加 @ServletComponentScan 开启Servlet组件支持。</li></ul><p><strong>定义过滤器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个类，实现一个标准的Filter过滤器的接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//初始化方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init 初始化方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//拦截到请求之后调用, 调用多次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demo 拦截到了请求...放行前逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//销毁方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy 销毁方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li><p>init方法：过滤器的初始化方法。在web服务器启动的时候会自动的创建Filter过滤器对象，在创建过滤器对象的时候会自动调用init初始化方法，这个方法只会被调用一次。</p></li><li><p>doFilter方法：这个方法是在每一次拦截到请求之后都会被调用，所以这个方法是会被调用多次的，每拦截到一次请求就会调用一次doFilter()方法。</p></li><li><p>destroy方法： 是销毁的方法。当我们关闭服务器的时候，它会自动的调用销毁方法destroy，而这个销毁方法也只会被调用一次。</p></li></ul></blockquote><p>在定义完Filter之后，Filter其实并不会生效，还需要完成Filter的配置，Filter的配置非常简单，只需要在Filter类上添加一个注解：@WebFilter，并指定属性urlPatterns，通过这个属性指定过滤器要拦截哪些请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置过滤器要拦截的请求路径（ /* 表示拦截浏览器的所有请求 ）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//初始化方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init 初始化方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//拦截到请求之后调用, 调用多次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demo 拦截到了请求...放行前逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//销毁方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy 销毁方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们在Filter类上面加了@WebFilter注解之后，接下来我们还需要在启动类上面加上一个注解@ServletComponentScan，通过这个@ServletComponentScan注解来开启SpringBoot项目对于Servlet组件的支持。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ServletComponentScan</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TliasWebManagementApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TliasWebManagementApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动服务，打开浏览器，执行部门管理的请求，可以看到控制台输出了过滤器中的内容：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112121205697.png"> </p><blockquote><p>注意事项：</p><p>​在过滤器Filter中，如果不执行放行操作，将无法访问后面的资源。 放行操作：chain.doFilter(request, response);</p></blockquote><p>现在我们已完成了Filter过滤器的基本使用，下面我们将学习Filter过滤器在使用过程中的一些细节。</p><h4 id="Filter详解"><a href="#Filter详解" class="headerlink" title="Filter详解"></a>Filter详解</h4><p>Filter过滤器的快速入门程序我们已经完成了，接下来我们就要详细的介绍一下过滤器Filter在使用中的一些细节。主要介绍以下3个方面的细节：</p><ol><li>过滤器的执行流程</li><li>过滤器的拦截路径配置</li><li>过滤器链</li></ol><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>首先我们先来看下过滤器的执行流程：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106222559935.png"></p><p>过滤器当中我们拦截到了请求之后，如果希望继续访问后面的web资源，就要执行放行操作，放行就是调用 FilterChain对象当中的doFilter()方法，在调用doFilter()这个方法之前所编写的代码属于放行之前的逻辑。</p><p>在放行后访问完 web 资源之后还会回到过滤器当中，回到过滤器之后如有需求还可以执行放行之后的逻辑，放行之后的逻辑我们写在doFilter()这行代码之后。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//初始化方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init 初始化方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行前逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行后逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//销毁方法, 只调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy 销毁方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106224322625.png"></p><h5 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h5><p>执行流程我们搞清楚之后，接下来再来介绍一下过滤器的拦截路径，Filter可以根据需求，配置不同的拦截资源路径：</p><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问 &#x2F;login 路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><p>下面我们来测试”拦截具体路径”：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//拦截/login具体路径</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行前逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行后逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试1：访问部门管理请求，发现过滤器没有拦截请求</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106225658525.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106230332510.png"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器拦截请求</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106230520229.png"></p><p>下面我们来测试”目录拦截”：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/depts/*"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//拦截所有以/depts开头，后面是什么无所谓</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行前逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行后逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试1：访问部门管理请求，发现过滤器拦截了请求</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106231144348.png"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器没有拦截请求</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230106231220802.png"></p><h5 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h5><p>最后我们在来介绍下过滤器链，什么是过滤器链呢？所谓过滤器链指的是在一个web应用程序当中，可以配置多个过滤器，多个过滤器就形成了一个过滤器链。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107084730393.png"></p><p>比如：在我们web服务器当中，定义了两个过滤器，这两个过滤器就形成了一个过滤器链。</p><p>而这个链上的过滤器在执行的时候会一个一个的执行，会先执行第一个Filter，放行之后再来执行第二个Filter，如果执行到了最后一个过滤器放行之后，才会访问对应的web资源。</p><p>访问完web资源之后，按照我们刚才所介绍的过滤器的执行流程，还会回到过滤器当中来执行过滤器放行后的逻辑，而在执行放行后的逻辑的时候，顺序是反着的。</p><p>先要执行过滤器2放行之后的逻辑，再来执行过滤器1放行之后的逻辑，最后在给浏览器响应数据。</p><p>以上就是当我们在web应用当中配置了多个过滤器，形成了这样一个过滤器链以及过滤器链的执行顺序。下面我们通过idea来验证下过滤器链。</p><p>验证步骤：</p><ol><li>在filter包下再来新建一个Filter过滤器类：AbcFilter</li><li>在AbcFilter过滤器中编写放行前和放行后逻辑</li><li>配置AbcFilter过滤器拦截请求路径为：&#x2F;* </li><li>重启SpringBoot服务，查看DemoFilter、AbcFilter的执行日志</li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107085552176.png"></p><p><strong>AbcFilter过滤器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbcFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Abc 拦截到了请求... 放行前逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Abc 拦截到了请求... 放行后逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>DemoFilter过滤器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行前逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行后逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打开浏览器访问登录接口：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107090425999.png"></p><p>通过控制台日志的输出，大家发现AbcFilter先执行DemoFilter后执行，这是为什么呢？</p><p>其实是和过滤器的类名有关系。以注解方式配置的Filter过滤器，它的执行优先级是按时过滤器类名的自动排序确定的，类名排名越靠前，优先级越高。</p><p>假如我们想让DemoFilter先执行，怎么办呢？答案就是修改类名。</p><p>测试：修改AbcFilter类名为XbcFilter，运行程序查看控制台日志</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XbcFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Xbc 拦截到了请求...放行前逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Xbc 拦截到了请求...放行后逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107093757050.png"></p><p>到此，关于过滤器的使用细节，我们已经全部介绍完毕了。</p><h4 id="登录校验-Filter"><a href="#登录校验-Filter" class="headerlink" title="登录校验-Filter"></a>登录校验-Filter</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>过滤器Filter的快速入门以及使用细节我们已经介绍完了，接下来最后一步，我们需要使用过滤器Filter来完成案例当中的登录校验功能。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107095010089.png"></p><p>我们先来回顾下前面分析过的登录校验的基本流程：</p><ul><li><p>要进入到后台管理系统，我们必须先完成登录操作，此时就需要访问登录接口login。</p></li><li><p>登录成功之后，我们会在服务端生成一个JWT令牌，并且把JWT令牌返回给前端，前端会将JWT令牌存储下来。</p></li><li><p>在后续的每一次请求当中，都会将JWT令牌携带到服务端，请求到达服务端之后，要想去访问对应的业务功能，此时我们必须先要校验令牌的有效性。</p></li><li><p>对于校验令牌的这一块操作，我们使用登录校验的过滤器，在过滤器当中来校验令牌的有效性。如果令牌是无效的，就响应一个错误的信息，也不会再去放行访问对应的资源了。如果令牌存在，并且它是有效的，此时就会放行去访问对应的web资源，执行相应的业务操作。</p></li></ul><p>大概清楚了在Filter过滤器的实现步骤了，那在正式开发登录校验过滤器之前，我们思考两个问题：</p><ol><li><p>所有的请求，拦截到了之后，都需要校验令牌吗？</p><ul><li>答案：<strong>登录请求例外</strong></li></ul></li><li><p>拦截到请求后，什么情况下才可以放行，执行业务操作？</p><ul><li>答案：<strong>有令牌，且令牌校验通过(合法)；否则都返回未登录错误结果</strong></li></ul></li></ol><h5 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h5><p>我们要完成登录校验，主要是利用Filter过滤器实现，而Filter过滤器的流程步骤：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112122130564.png"> </p><p>基于上面的业务流程，我们分析出具体的操作步骤：</p><ol><li>获取请求url</li><li>判断请求url中是否包含login，如果包含，说明是登录操作，放行</li><li>获取请求头中的令牌（token）</li><li>判断令牌是否存在，如果不存在，返回错误结果（未登录）</li><li>解析token，如果解析失败，返回错误结果（未登录）</li><li>放行</li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>分析清楚了以上的问题后，我们就参照接口文档来开发登录功能了，登录接口描述如下：</p><ul><li><p>基本信息</p><pre><code>请求路径：/login请求方式：POST接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 </code></pre></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>password</td><td>string</td><td>必须</td><td>密码</td></tr></tbody></table><p>请求数据样例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"jinyong"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">}</span></code></pre></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo"</span><span class="token punctuation">}</span></code></pre></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"NOT_LOGIN"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>登录校验过滤器：LoginCheckFilter</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//拦截所有请求</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前置：强制转换为http协议的请求对象、响应对象 （转换原因：要使用子类中特有方法）</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取请求url</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求路径：{}"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求路径：http://localhost:8080/login</span>        <span class="token comment" spellcheck="true">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放行请求</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束当前方法的执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.获取请求头中的令牌（token）</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"从请求头中获取的令牌：{}"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Token不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Result responseResult <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NOT_LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span>            String json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>responseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//响应</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.解析token，如果解析失败，返回错误结果（未登录）</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JwtUtils<span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"令牌解析失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Result responseResult <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NOT_LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span>            String json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>responseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//响应</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.放行</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上述过滤器的功能实现中，我们使用到了一个第三方json处理的工具包fastjson。我们要想使用，需要引入如下依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.76<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>登录校验的过滤器我们编写完成了，接下来我们就可以重新启动服务来做一个测试：</p><blockquote><p>测试前先把之前所编写的测试使用的过滤器，暂时注释掉。直接将@WebFilter注解给注释掉即可。</p></blockquote><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，登录校验过滤器返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230105085212629.png"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107102922550.png"></p></li></ul><h2 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h2><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>什么是拦截器？</p><ul><li>是一种动态拦截方法调用的机制，类似于过滤器。</li><li>拦截器是Spring框架中提供的，用来动态拦截控制器方法的执行。</li></ul><p>拦截器的作用：</p><ul><li>拦截请求，在指定方法调用前后，根据业务需要执行预先设定的代码。</li></ul><p>在拦截器当中，我们通常也是做一些通用性的操作，比如：我们可以通过拦截器来拦截前端发起的请求，将登录校验的逻辑全部编写在拦截器当中。在校验的过程当中，如发现用户登录了(携带JWT令牌且是合法令牌)，就可以直接放行，去访问spring当中的资源。如果校验时发现并没有登录或是非法令牌，就可以直接给前端响应未登录的错误信息。</p><p>下面我们通过快速入门程序，来学习下拦截器的基本使用。拦截器的使用步骤和过滤器类似，也分为两步：</p><ol><li><p>定义拦截器</p></li><li><p>注册配置拦截器</p></li></ol><p><strong>自定义拦截器：</strong>实现HandlerInterceptor接口，并重写其所有方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义拦截器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//目标资源方法执行前执行。 返回true：放行    返回false：不放行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true表示放行</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//目标资源方法执行后执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//视图渲染完毕后执行，最后执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：</p><p>​preHandle方法：目标资源方法执行前执行。 返回true：放行    返回false：不放行</p><p>​postHandle方法：目标资源方法执行后执行</p><p>​afterCompletion方法：视图渲染完毕后执行，最后执行</p></blockquote><p><strong>注册配置拦截器</strong>：实现WebMvcConfigurer接口，并重写addInterceptors方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义的拦截器对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginCheckInterceptor loginCheckInterceptor<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//注册自定义拦截器对象</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动SpringBoot服务，打开postman测试：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107105224741.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107105415120.png"></p><p>接下来我们再来做一个测试：将拦截器中返回值改为false</p><p>使用postman，再次点击send发送请求后，没有响应数据，说明请求被拦截了没有放行</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107105815511.png"></p><h4 id="Interceptor详解"><a href="#Interceptor详解" class="headerlink" title="Interceptor详解"></a>Interceptor详解</h4><p>拦截器的入门程序完成之后，接下来我们来介绍拦截器的使用细节。拦截器的使用细节我们主要介绍两个部分：</p><ol><li>拦截器的拦截路径配置</li><li>拦截器的执行流程</li></ol><h5 id="拦截路径-1"><a href="#拦截路径-1" class="headerlink" title="拦截路径"></a>拦截路径</h5><p>首先我们先来看拦截器的拦截路径的配置，在注册配置拦截器的时候，我们要指定拦截器的拦截路径，通过<code>addPathPatterns(&quot;要拦截路径&quot;)</code>方法，就可以指定要拦截哪些资源。</p><p>在入门程序中我们配置的是<code>/**</code>，表示拦截所有资源，而在配置拦截器时，不仅可以指定要拦截哪些资源，还可以指定不拦截哪些资源，只需要调用<code>excludePathPatterns(&quot;不拦截路径&quot;)</code>方法，指定哪些资源不需要拦截。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拦截器对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginCheckInterceptor loginCheckInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册自定义拦截器对象</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置不拦截的请求路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在拦截器中除了可以设置<code>/**</code>拦截所有资源外，还有一些常见拦截路径设置：</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td></tr></tbody></table><p>下面主要来演示下<code>/**</code>与<code>/*</code>的区别： </p><ul><li>修改拦截器配置，把拦截路径设置为<code>/*</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拦截器对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginCheckInterceptor loginCheckInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//注册自定义拦截器对象</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置不拦截的请求路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用postman测试：<a href="http://localhost:8080/emps/1">http://localhost:8080/emps/1</a> </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107111525558.png"></p><p>控制台没有输出拦截器中的日志信息，说明<code>/*</code>没有匹配到拦截路径<code>/emp/1</code> 。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107111812963.png"></p><h5 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h5><p>介绍完拦截路径的配置之后，接下来我们再来介绍拦截器的执行流程。通过执行流程，大家就能够清晰的知道过滤器与拦截器的执行时机。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107112136151.png"></p><ul><li><p>当我们打开浏览器来访问部署在web服务器当中的web应用时，此时我们所定义的过滤器会拦截到这次请求。拦截到这次请求之后，它会先执行放行前的逻辑，然后再执行放行操作。而由于我们当前是基于springboot开发的，所以放行之后是进入到了spring的环境当中，也就是要来访问我们所定义的controller当中的接口方法。</p></li><li><p>Tomcat并不识别所编写的Controller程序，但是它识别Servlet程序，所以在Spring的Web环境中提供了一个非常核心的Servlet：DispatcherServlet（前端控制器），所有请求都会先进行到DispatcherServlet，再将请求转给Controller。</p></li><li><p>当我们定义了拦截器后，会在执行Controller的方法之前，请求被拦截器拦截住。执行<code>preHandle()</code>方法，这个方法执行完成后需要返回一个布尔类型的值，如果返回true，就表示放行本次操作，才会继续访问controller中的方法；如果返回false，则不会放行（controller中的方法也不会执行）。</p></li><li><p>在controller当中的方法执行完毕之后，再回过来执行<code>postHandle()</code>这个方法以及<code>afterCompletion()</code> 方法，然后再返回给DispatcherServlet，最终再来执行过滤器当中放行后的这一部分逻辑的逻辑。执行完毕之后，最终给浏览器响应数据。</p></li></ul><p>接下来我们就来演示下过滤器和拦截器同时存在的执行流程：</p><ul><li>开启LoginCheckInterceptor拦截器</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true表示放行</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拦截器对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginCheckInterceptor loginCheckInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册自定义拦截器对象</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拦截所有请求</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不拦截登录请求</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启DemoFilter过滤器</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行前逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DemoFilter   放行后逻辑....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启SpringBoot服务后，清空日志，打开Postman，测试查询部门：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107113653871.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107114008004.png"></p><p>以上就是拦截器的执行流程。通过执行流程分析，大家应该已经清楚了过滤器和拦截器之间的区别，其实它们之间的区别主要是两点：</p><ul><li>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</li><li>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源。</li></ul><h4 id="登录校验-Interceptor"><a href="#登录校验-Interceptor" class="headerlink" title="登录校验- Interceptor"></a>登录校验- Interceptor</h4><p>讲解完了拦截器的基本操作之后，接下来我们需要完成最后一步操作：通过拦截器来完成案例当中的登录校验功能。</p><p>登录校验的业务逻辑以及操作步骤我们前面已经分析过了，和登录校验Filter过滤器当中的逻辑是完全一致的。现在我们只需要把这个技术方案由原来的过滤器换成拦截器interceptor就可以了。</p><p><strong>登录校验拦截器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义拦截器</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//当前拦截器对象由Spring创建和管理</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置方式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取请求url</span>        <span class="token comment" spellcheck="true">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span>        <span class="token comment" spellcheck="true">//3.获取请求头中的令牌（token）</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"从请求头中获取的令牌：{}"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Token不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建响应结果对象</span>            Result responseResult <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NOT_LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span>            String json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>responseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//响应</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不放行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.解析token，如果解析失败，返回错误结果（未登录）</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JwtUtils<span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"令牌解析失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建响应结果对象</span>            Result responseResult <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NOT_LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span>            String json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>responseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//响应</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.放行</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>注册配置拦截器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拦截器对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginCheckInterceptor loginCheckInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//注册自定义拦截器对象</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>登录校验的拦截器编写完成后，接下来我们就可以重新启动服务来做一个测试： （<strong>关闭登录校验Filter过滤器</strong>）</p><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，校验机制返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230105085212629-1688990156008.png"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230107102922550-1688990156008.png"></p></li></ul><p>到此我们也就验证了所开发的登录校验的拦截器也是没问题的。登录校验的过滤器和拦截器，我们只需要使用其中的一种就可以了。</p><h2 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h2><p>当出现异常时，响应回来的数据是一个JSON格式的数据。但这种JSON格式的数据不是我们开发规范当中所提到的统一响应结果Result。我们的mapper,service,controller三层没有做任何异常处理，只是往上抛异常。</p><p>我们该怎么样定义全局异常处理器？</p><ul><li>定义全局异常处理器非常简单，就是定义一个类，在类上加上一个注解@RestControllerAdvice，加上这个注解就代表我们定义了一个全局异常处理器。</li><li>在全局异常处理器当中，需要定义一个方法来捕获异常，在这个方法上需要加上注解@ExceptionHandler。通过@ExceptionHandler注解当中的value属性来指定我们要捕获的是哪一类型的异常。</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定能够处理的异常类型</span>    <span class="token keyword">public</span> Result <span class="token function">ex</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印堆栈中的异常信息</span>        <span class="token comment" spellcheck="true">//捕获到异常之后，响应一个标准的Result</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"对不起,操作失败,请联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>@RestControllerAdvice &#x3D; @ControllerAdvice + @ResponseBody</p><p>处理异常的方法返回值会转换为json后再响应给前端</p></blockquote><p>重新启动SpringBoot服务，打开浏览器，再来测试一下添加部门这个操作，我们依然添加已存在的 “就业部” 这个部门：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112131232032.png"> </p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day10/image/image-20230112131135272.png"> </p><p>此时，我们可以看到，出现异常之后，异常已经被全局异常处理器捕获了。然后返回的错误信息，被前端程序正常解析，然后提示出了对应的错误提示信息。</p><p>以上就是全局异常处理器的使用，主要涉及到两个注解：</p><ul><li>@RestControllerAdvice  &#x2F;&#x2F;表示当前类为全局异常处理器</li><li>@ExceptionHandler  &#x2F;&#x2F;指定可以捕获哪种类型的异常进行处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day9</title>
      <link href="/2023/07/07/javaweb2023-day9/"/>
      <url>/2023/07/07/javaweb2023-day9/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBootWeb-员工的新增与修改"><a href="#SpringBootWeb-员工的新增与修改" class="headerlink" title="SpringBootWeb-员工的新增与修改"></a>SpringBootWeb-员工的新增与修改</h1><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>新增员工的具体的流程：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216170946166.png"></p><blockquote><p>接口文档规定：</p><ul><li>请求路径：&#x2F;emps</li><li>请求方式：POST</li><li>请求参数：Json格式数据</li><li>响应数据：Json格式数据</li></ul><p>问题1：如何限定请求方式是POST？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span></code></pre><p>问题2：怎么在controller中接收json格式的请求参数？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestBody</span>  <span class="token comment" spellcheck="true">//把前端传递的json数据填充到实体类中</span></code></pre></blockquote><h3 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h3><p><strong>EmpController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新增</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> Result <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Emp emp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录日志</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新增员工, emp:{}"</span><span class="token punctuation">,</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用业务层新增功能</span>        empService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 保存员工信息     * @param emp     */</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//补全数据</span>        emp<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用添加方法</span>        empMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新增员工</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time) "</span> <span class="token operator">+</span>            <span class="token string">"values (#{username}, #{name}, #{gender}, #{image}, #{job}, #{entrydate}, #{deptId}, #{createTime}, #{updateTime});"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>我们先来看看在前端程序中要完成哪些代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    头像: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>上传文件的原始form表单，要求表单必须具备以下三点（上传文件页面三要素）：</p><ul><li><p>表单必须有file域，用于选择要上传的文件</p><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></blockquote></li><li><p>表单提交方式必须为POST</p><blockquote><p>通常上传的文件会比较大，所以需要使用 POST 提交方式</p></blockquote></li><li><p>表单的编码类型enctype必须要设置为：multipart&#x2F;form-data</p><blockquote><p>普通默认的编码格式是不适合传输大型的二进制数据的，所以在文件上传时，表单的编码格式必须设置为multipart&#x2F;form-dat</p></blockquote></li></ul><p>知道了前端程序中需要设置上传文件页面三要素，那我们的后端程序又是如何实现的呢？</p><ul><li><p>首先在服务端定义这么一个controller，用来进行文件上传，然后在controller当中定义一个方法来处理<code>/upload</code> 请求</p></li><li><p>在定义的方法中接收提交过来的数据 （方法中的形参名和请求参数的名字保持一致）</p><ul><li>用户名：String  name</li><li>年龄： Integer  age</li><li>文件： MultipartFile  image</li></ul><blockquote><p>Spring中提供了一个API：MultipartFile，使用这个API就可以来接收到上传的文件</p></blockquote></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216215930807.png"></p><blockquote><p>问题：如果表单项的名字和方法中形参名不一致，该怎么办？</p><ul><li><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>                     Integer age<span class="token punctuation">,</span>                      MultipartFile file<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//file形参名和请求参数名image不一致</span></code></pre></li></ul><p>解决：使用@RequestParam注解进行参数绑定</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>                     Integer age<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span></code></pre></li></ul></blockquote><p><strong>UploadController代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> MultipartFile image<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件上传：{},{},{}"</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>age<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>后端程序编写完成之后，打个断点，以debug方式启动SpringBoot项目</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216222533720.png"></p><blockquote><p>打开浏览器输入：<a href="http://localhost:8080/upload.html">http://localhost:8080/upload.html</a> ， 录入数据并提交</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216222412510.png"></p><p>通过后端程序控制台可以看到，上传的文件是存放在一个临时目录</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216222802617.png"></p><blockquote><p>打开临时目录可以看到以下内容：</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216223328710.png"></p><blockquote><p>表单提交的三项数据(姓名、年龄、文件)，分别存储在不同的临时文件中：</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221216223300846.png"></p><blockquote><p>当我们程序运行完毕之后，这个临时文件会自动删除。 </p><p>所以，我们如果想要实现文件上传，需要将这个临时文件，要转存到我们的磁盘目录中。</p></blockquote><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>前面我们已分析了文件上传功能前端和后端的基础代码实现，文件上传时在服务端会产生一个临时文件，请求响应完成之后，这个临时文件被自动删除，并没有进行保存。下面呢，我们就需要完成将上传的文件保存在服务器的本地磁盘上。</p><p>代码实现：</p><ol><li>在服务器本地磁盘上创建images目录，用来存储上传的文件（例：E盘创建images目录）</li><li>使用MultipartFile类提供的API方法，把临时文件转存到本地磁盘目录下</li></ol><blockquote><p>MultipartFile 常见方法： </p><ul><li>String  getOriginalFilename();  &#x2F;&#x2F;获取原始文件名</li><li>void  transferTo(File dest);     &#x2F;&#x2F;将接收的文件转存到磁盘文件中</li><li>long  getSize();     &#x2F;&#x2F;获取文件的大小，单位：字节</li><li>byte[]  getBytes();    &#x2F;&#x2F;获取文件内容的字节数组</li><li>InputStream  getInputStream();    &#x2F;&#x2F;获取接收到的文件内容的输入流</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> MultipartFile image<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件上传：{},{},{}"</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>age<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取原始文件名</span>        String originalFilename <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将文件存储在服务器的磁盘目录</span>        image<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/images/"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用postman测试：</p><blockquote><p>注意：请求参数名和controller方法形参名保持一致</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221227211742547.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221227214219279.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221227214753358.png"></p><p>通过postman测试，我们发现文件上传是没有问题的。但是由于我们是使用原始文件名作为所上传文件的存储名字，当我们再次上传一个名为1.jpg文件时，发现会把之前已经上传成功的文件覆盖掉。</p><p>解决方案：保证每次上传文件时文件名都唯一的（使用UUID获取随机文件名）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> MultipartFile image<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件上传：{},{},{}"</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>age<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取原始文件名</span>        String originalFilename <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建新的文件名</span>        String extname <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件扩展名</span>        String newFileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>extname<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机名+文件扩展名</span>        <span class="token comment" spellcheck="true">//将文件存储在服务器的磁盘目录</span>        image<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/images/"</span><span class="token operator">+</span>newFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在解决了文件名唯一性的问题后，我们再次上传一个较大的文件(超出1M)时发现，后端程序报错：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221227223851924.png"></p><p>报错原因呢是因为：在SpringBoot中，文件上传时默认单个文件最大大小为1M</p><p>那么如果需要上传大文件，可以在application.properties进行如下配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置单个文件最大上传大小</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">10MB</span><span class="token comment" spellcheck="true">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">100MB</span></code></pre><h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p>引入阿里云OSS上传文件工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSSClientBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-shanghai.aliyuncs.com"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI5t9MZK8iq5T2Av5GLDxX"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String accessKeySecret <span class="token operator">=</span> <span class="token string">"C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String bucketName <span class="token operator">=</span> <span class="token string">"web-framework01"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实现上传图片到OSS     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile multipartFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取上传的文件的输入流</span>        InputStream inputStream <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 避免文件覆盖</span>        String originalFilename <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传文件到 OSS</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件访问路径</span>        String url <span class="token operator">=</span> endpoint<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"//"</span> <span class="token operator">+</span> bucketName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> endpoint<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭ossClient</span>        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把上传到oss的路径返回</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改UploadController代码：</p><pre><code>import com.itheima.pojo.Result;import com.itheima.utils.AliOSSUtils;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;@Slf4j@RestControllerpublic class UploadController &#123;    @Autowired    private AliOSSUtils aliOSSUtils;    @PostMapping(&quot;/upload&quot;)    public Result upload(MultipartFile image) throws IOException &#123;        //调用阿里云OSS工具类，将上传上来的文件存入阿里云        String url = aliOSSUtils.upload(image);        //将图片上传完成后的url返回，用于浏览器回显展示        return Result.success(url);    &#125;    &#125;</code></pre><p>使用postman测试：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230102175353270.png"></p><h2 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h2><h3 id="查询回显"><a href="#查询回显" class="headerlink" title="查询回显"></a>查询回显</h3><p>就是基本的按照ID进行查询一个员工</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221230161841795.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>EmpMapper</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据ID查询员工信息</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time "</span> <span class="token operator">+</span>            <span class="token string">"from emp "</span> <span class="token operator">+</span>            <span class="token string">"where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Emp <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpService</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据ID查询员工     * @param id     * @return     */</span>    <span class="token keyword">public</span> Emp <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpServiceImpl</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Emp <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> empMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpController</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Emp emp <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><h3 id="修改员工-1"><a href="#修改员工-1" class="headerlink" title="修改员工"></a>修改员工</h3><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221230171342318.png"></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>EmpMapper</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改员工信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpMapper.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--更新员工信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null and username !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                username = #{username},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password !<span class="token punctuation">=</span> null and password !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                password = #{password},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null and name !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                name = #{name},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                gender = #{gender},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image !<span class="token punctuation">=</span> null and image !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                image = #{image},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                job = #{job},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                entrydate = #{entrydate},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                dept_id = #{deptId},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateTime !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                update_time = #{updateTime}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 省略... --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><ul><li>EmpService</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 更新员工     * @param emp     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpServiceImpl</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        emp<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新修改时间为当前时间</span>                empMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><ul><li>EmpController</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改员工</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token keyword">public</span> Result <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Emp emp<span class="token punctuation">)</span><span class="token punctuation">{</span>        empService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20221231085558457.png"></p><p>在我们之前编写的程序中进行文件上传时，需要调用AliOSSUtils工具类，将文件上传到阿里云OSS对象存储服务当中。而在调用工具类进行文件上传时，需要一些参数：</p><ul><li>endpoint       &#x2F;&#x2F;阿里云OSS域名</li><li>accessKeyID    &#x2F;&#x2F;用户身份ID</li><li>accessKeySecret   &#x2F;&#x2F;用户密钥</li><li>bucketName      &#x2F;&#x2F;存储空间的名字</li></ul><p>关于以上的这些阿里云相关配置信息，我们是直接写死在java代码中了(硬编码)，如果我们在做项目时每涉及到一个第三方技术服务，就将其参数硬编码，那么在Java程序中会存在两个问题：</p><ol><li>如果这些参数发生变化了，就必须在源程序代码中改动这些参数，然后需要重新进行代码的编译，将Java代码编译成class字节码文件再重新运行程序。（比较繁琐）</li><li>如果我们开发的是一个真实的企业级项目， Java类可能会有很多，如果将这些参数分散的定义在各个Java类当中，我们要修改一个参数值，我们就需要在众多的Java代码当中来定位到对应的位置，再来修改参数，修改完毕之后再重新编译再运行。（参数配置过于分散，是不方便集中的管理和维护）</li></ol><p>为了解决以上分析的问题，我们可以将参数配置在配置文件中。如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#自定义的阿里云OSS配置信息</span><span class="token attr-name">aliyun.oss.endpoint</span><span class="token punctuation">=</span><span class="token attr-value">https://oss-cn-hangzhou.aliyuncs.com</span><span class="token attr-name">aliyun.oss.accessKeyId</span><span class="token punctuation">=</span><span class="token attr-value">LTAI4GCH1vX6DKqJWxd6nEuW</span><span class="token attr-name">aliyun.oss.accessKeySecret</span><span class="token punctuation">=</span><span class="token attr-value">yBshYweHOpqDuhCArrVHwIiBKpyqSL</span><span class="token attr-name">aliyun.oss.bucketName</span><span class="token punctuation">=</span><span class="token attr-value">web-tlias</span></code></pre><p>在将阿里云OSS配置参数交给properties配置文件来管理之后，我们的AliOSSUtils工具类就变为以下形式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*以下4个参数没有指定值（默认值：null）*/</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> String accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String accessKeySecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略其他代码...</span><span class="token punctuation">}</span></code></pre><blockquote><p>而此时如果直接调用AliOSSUtils类当中的upload方法进行文件上传时，这4项参数全部为null，原因是因为并没有给它赋值。</p><p>此时我们是不是需要将配置文件当中所配置的属性值读取出来，并分别赋值给AliOSSUtils工具类当中的各个属性呢？那应该怎么做呢？</p></blockquote><p>因为application.properties是springboot项目默认的配置文件，所以springboot程序在启动时会默认读取application.properties配置文件，而我们可以使用一个现成的注解：@Value，获取配置文件中的数据。</p><p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.endpoint}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.accessKeyId}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessKeyId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.accessKeySecret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessKeySecret<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.bucketName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//省略其他代码...</span> <span class="token punctuation">}</span>   </code></pre><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230102173905913.png"></p><h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h3><ul><li><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.address</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span></code></pre></li><li><p>application.yml </p><pre class=" language-yml"><code class="language-yml">server:  port: 8080  address: 127.0.0.1</code></pre></li><li><p>application.yaml </p><pre class=" language-yml"><code class="language-yml">server:  port: 8080  address: 127.0.0.1</code></pre></li></ul><blockquote><p>yml 格式的配置文件，后缀名有两种：</p><ul><li>yml （推荐）</li><li>yaml</li></ul></blockquote><p>常见配置文件格式对比：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230102181215809.png"></p><p>我们可以看到配置同样的数据信息，yml格式的数据有以下特点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul><p>简单的了解过springboot所支持的配置文件，以及不同类型配置文件之间的优缺点之后，接下来我们就来了解下yml配置文件的基本语法：</p><ul><li>大小写敏感</li><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230103084645450.png"></p><p>了解完yml格式配置文件的基本语法之后，接下来我们再来看下yml文件中常见的数据格式。在这里我们主要介绍最为常见的两类：</p><ol><li>定义对象或Map集合</li><li>定义数组、list或set集合</li></ol><p>对象&#x2F;Map集合</p><pre class=" language-yml"><code class="language-yml">user:  name: zhangsan  age: 18  password: 123456</code></pre><p>数组&#x2F;List&#x2F;Set集合</p><pre class=" language-yml"><code class="language-yml">hobby:   - java  - game  - sport</code></pre><p>熟悉完了yml文件的基本语法后，我们修改下之前案例中使用的配置文件，变更为application.yml配置方式：</p><ol><li>修改application.properties名字为：<code>_application.properties</code>（名字随便更换，只要加载不到即可）</li><li>创建新的配置文件： <code>application.yml</code></li></ol><p>原有application.properties文件：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230103202630793.png"></p><p>新建的application.yml文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/tlias    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">multipart</span><span class="token punctuation">:</span>      <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 10MB      <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 100MB      <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">aliyun</span><span class="token punctuation">:</span>  <span class="token key atrule">oss</span><span class="token punctuation">:</span>    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com    <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> LTAI4GCH1vX6DKqJWxd6nEuW    <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> yBshYweHOpqDuhCArrVHwIiBKpyqSL    <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span><span class="token number">397</span></code></pre><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>讲解完了yml配置文件之后，最后再来介绍一个注解<code>@ConfigurationProperties</code>。在介绍注解之前，我们先来看一个场景，分析下代码当中可能存在的问题：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230103202919756.png"></p><p>我们在application.properties或者application.yml中配置了阿里云OSS的四项参数之后，如果java程序中需要这四项参数数据，我们直接通过@Value注解来进行注入。这种方式本身没有什么问题问题，但是如果说需要注入的属性较多(例：需要20多个参数数据)，我们写起来就会比较繁琐。</p><p>那么有没有一种方式可以简化这些配置参数的注入呢？答案是肯定有，在Spring中给我们提供了一种简化方式，可以直接将配置文件中配置项的值自动的注入到对象的属性中。</p><p>Spring提供的简化方式套路：</p><ol><li><p>需要创建一个实现类，且实体类中的属性名和配置文件当中key的名字必须要一致</p><blockquote><p>比如：配置文件当中叫endpoints，实体类当中的属性也得叫endpoints，另外实体类当中的属性还需要提供 getter &#x2F; setter方法</p></blockquote></li><li><p>需要将实体类交给Spring的IOC容器管理，成为IOC容器当中的bean对象</p></li><li><p>在实体类上添加<code>@ConfigurationProperties</code>注解，并通过perfect属性来指定配置参数项的前缀</p></li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230103210827003.png"></p><p>实体类：AliOSSProperties</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*阿里云OSS相关配置*/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"aliyun.oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//区域</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份ID</span>    <span class="token keyword">private</span> String accessKeyId <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//身份密钥</span>    <span class="token keyword">private</span> String accessKeySecret <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储空间</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AliOSSUtils工具类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSSClientBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//当前类对象由Spring创建和管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOSSUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入配置参数实体类对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AliOSSProperties aliOSSProperties<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/**     * 实现上传图片到OSS     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile multipartFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取上传的文件的输入流</span>        InputStream inputStream <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 避免文件覆盖</span>        String originalFilename <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传文件到 OSS</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件访问路径</span>        String url <span class="token operator">=</span>aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"//"</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> aliOSSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭ossClient</span>        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把上传到oss的路径返回</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在我们添加上注解后，会发现idea窗口上面出现一个红色警告：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day09/image/image-20230103212042823.png"> </p><p>这个警告提示是告知我们还需要引入一个依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>当我们在pom.xml文件当中配置了这项依赖之后，我们重新启动服务，大家就会看到在properties或者是yml配置文件当中，就会提示阿里云 OSS 相关的配置项。所以这项依赖它的作用就是会自动的识别被<code>@Configuration Properties</code>注解标识的bean对象。</p><blockquote><p>刚才的红色警告，已经变成了一个灰色的提示，提示我们需要重新运行springboot服务</p></blockquote><p>@ConfigurationProperties注解我们已经介绍完了，接下来我们就来区分一下@ConfigurationProperties注解以及我们前面所介绍的另外一个@Value注解：</p><p>相同点：都是用来注入外部配置的属性的。</p><p>不同点：</p><ul><li><p>@Value注解只能一个一个的进行外部属性的注入。</p></li><li><p>@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</p></li></ul><p>如果要注入的属性非常的多，并且还想做到复用，就可以定义这么一个bean对象。通过 configuration properties 批量的将外部的属性配置直接注入到 bin 对象的属性当中。在其他的类当中，我要想获取到注入进来的属性，我直接注入 bin 对象，然后调用 get 方法，就可以获取到对应的属性值了</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day8</title>
      <link href="/2023/07/05/javaweb2023-day8/"/>
      <url>/2023/07/05/javaweb2023-day8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBootWeb-部门的CRUD-员工的RD"><a href="#SpringBootWeb-部门的CRUD-员工的RD" class="headerlink" title="SpringBootWeb-部门的CRUD+员工的RD"></a>SpringBootWeb-部门的CRUD+员工的RD</h1><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><p>而在前后端进行交互的时候，我们需要基于当前主流的REST风格的API接口进行交互。</p><p>什么是REST风格呢?</p><ul><li>REST（Representational State Transfer），表述性状态转换，它是一种软件架构风格。</li></ul><p><strong>传统URL风格如下：</strong></p><pre class=" language-url"><code class="language-url">http://localhost:8080/user/getById?id=1     GET：查询id为1的用户http://localhost:8080/user/saveUser         POST：新增用户http://localhost:8080/user/updateUser       POST：修改用户http://localhost:8080/user/deleteUser?id=1  GET：删除id为1的用户</code></pre><p>我们看到，原始的传统URL呢，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p><p><strong>基于REST风格URL如下：</strong></p><pre><code>http://localhost:8080/users/1  GET：查询id为1的用户http://localhost:8080/users    POST：新增用户http://localhost:8080/users    PUT：修改用户http://localhost:8080/users/1  DELETE：删除id为1的用户</code></pre><p>其中总结起来，就一句话：通过URL定位要操作的资源，通过HTTP动词(请求方式)来描述具体的操作。</p><p>在REST风格的URL中，通过四种请求方式，来操作数据的增删改查。 </p><ul><li>GET ： 查询</li><li>POST ：新增</li><li>PUT ：修改</li><li>DELETE ：删除</li></ul><p>我们看到如果是基于REST风格，定义URL，URL将会更加简洁、更加规范、更加优雅。</p><blockquote><p>注意事项：</p><ul><li>REST是风格，是约定方式，约定不是规定，可以打破</li><li>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：users、emps、books…</li></ul></blockquote><p><strong>2、开发规范-统一响应结果</strong></p><p>前后端工程在进行交互时，使用统一响应结果 Result。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应码，1 代表成功; 0 代表失败</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//响应信息 描述字符串</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的数据</span>    <span class="token comment" spellcheck="true">//增删改 成功响应</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询 成功响应</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">success</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//失败响应</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="查询部门"><a href="#查询部门" class="headerlink" title="查询部门"></a>查询部门</h2><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221213235157345.png"></p><h4 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h4><p>通过查看接口文档：部门列表查询</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：GET</p><p>请求参数：无</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@RequestMapping(value = "/depts" , method = RequestMethod.GET)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询所有部门数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> deptList <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>deptList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>@Slf4j注解源码：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221214000909044.png"></p></blockquote><p><strong>DeptService</strong>（业务接口）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有的部门数据     * @return   存储Dept对象的集合     */</span>    List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> <strong>DeptServiceImpl</strong>（业务实现类）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> deptList <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deptList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p><strong>DeptMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有部门数据</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, name, create_time, update_time from dept"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="删除部门"><a href="#删除部门" class="headerlink" title="删除部门"></a>删除部门</h2><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221214102705490.png"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts&#x2F;{id}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><pre><code>@PathVariable</code></pre><p>问题2：如何限定请求方式是delete？</p><pre><code>@DeleteMapping</code></pre></blockquote><h4 id="功能开发-1"><a href="#功能开发-1" class="headerlink" title="功能开发"></a>功能开发</h4><p>通过查看接口文档：删除部门</p><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {id}</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/depts/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//日志记录</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"根据id删除部门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层功能</span>        deptService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id删除部门     * @param id    部门id     */</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用持久层删除功能</span>        deptMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id删除部门信息     * @param id   部门id     */</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from dept where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><h2 id="新增部门"><a href="#新增部门" class="headerlink" title="新增部门"></a>新增部门</h2><h4 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221214115519648.png"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts</li><li>前端请求方式：POST</li><li>前端请求参数 (Json格式)：{ “name”: “教研部” }</li></ul><p>问题1：如何限定请求方式是POST？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span></code></pre><p>问题2：怎么在controller中接收json格式的请求参数？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestBody</span>  <span class="token comment" spellcheck="true">//把前端传递的json数据填充到实体类中</span></code></pre></blockquote><h4 id="功能开发-2"><a href="#功能开发-2" class="headerlink" title="功能开发"></a>功能开发</h4><p>通过查看接口文档：新增部门</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：POST</p><p>请求参数：json格式 </p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Dept dept<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录日志</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新增部门：{}"</span><span class="token punctuation">,</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层添加功能</span>        deptService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 新增部门     * @param dept  部门对象     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//补全部门数据</span>        dept<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用持久层增加功能</span>        deptMapper<span class="token punctuation">.</span><span class="token function">inser</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>DeptMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into dept (name, create_time, update_time) values (#{name},#{createTime},#{updateTime})"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">inser</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><h2 id="请求路径"><a href="#请求路径" class="headerlink" title="请求路径"></a>请求路径</h2><p>我们部门管理的<code>查询</code>、<code>删除</code>、<code>新增</code>功能全部完成了，接下来我们要对controller层的代码进行优化。</p><p>首先我们先来看下目前controller层代码：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215110553435.png"></p><blockquote><p>以上三个方法上的请求路径，存在一个共同点：都是以<code>/depts</code>作为开头。（重复了）</p></blockquote><p>在Spring当中为了简化请求路径的定义，可以把公共的请求路径，直接抽取到类上，在类上加一个注解@RequestMapping，并指定请求路径”&#x2F;depts”。代码参照如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215111110219.png"></p><blockquote><p>优化前后的对比：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215111309042.png"></p></blockquote><blockquote><p>注意事项：一个完整的请求路径，应该是类上@RequestMapping的value属性 + 方法上的 @RequestMapping的value属性</p></blockquote><h2 id="员工的基础分页"><a href="#员工的基础分页" class="headerlink" title="员工的基础分页"></a>员工的基础分页</h2><blockquote><p>后台给前端返回的数据包含：List集合(数据列表)、total(总记录数)</p><p>而这两部分我们通常封装到PageBean对象中，并将该对象转换为json格式的数据响应回给浏览器。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageBean</span> <span class="token punctuation">{</span><span class="token keyword">private</span> Long total<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//总记录数</span><span class="token keyword">private</span> List rows<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前页数据列表</span><span class="token punctuation">}</span></code></pre></blockquote><h5 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h5><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215153413290.png"></p><p>分页查询需要的数据，封装在PageBean对象中：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215154036047.png"></p><h5 id="功能开发-3"><a href="#功能开发-3" class="headerlink" title="功能开发"></a>功能开发</h5><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：跟随在请求路径后的参数字符串。  例：&#x2F;emps?page&#x3D;1&amp;pageSize&#x3D;10</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>PageBean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EmpService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件分页查询</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> Result <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span> Integer pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录日志</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"分页查询，参数：{},{}"</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用业务层分页查询功能</span>        PageBean pageBean <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>@RequestParam(defaultValue&#x3D;”默认值”)   &#x2F;&#x2F;设置请求参数默认值</p></blockquote><p><strong>EmpService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 条件分页查询     * @param page 页码     * @param pageSize 每页展示记录数     * @return     */</span>    PageBean <span class="token function">page</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>EmpServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>EmpMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Emp<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>PageBean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EmpService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PageBean <span class="token function">page</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、获取总记录数</span>        Long count <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、获取分页查询结果列表</span>        Integer start <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算起始索引 , 公式: (页码-1)*页大小</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> empList <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、封装PageBean对象</span>        PageBean pageBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token punctuation">(</span>count <span class="token punctuation">,</span> empList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pageBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取总记录数</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select count(*) from emp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Long <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取当前页的结果列表</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp limit #{start}, #{pageSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>Integer start<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p>对于Mybatis来讲现在最主流的就是PageHelper。</p><blockquote><p>PageHelper是Mybatis的一款功能强大、方便易用的分页插件，支持任何形式的单标、多表的分页查询。</p><p>官网：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215170038833.png"></p><blockquote><p>在执行empMapper.list()方法时，就是执行：select  *  from  emp   语句，怎么能够实现分页操作呢？</p><p>分页插件帮我们完成了以下操作：</p><ol><li>先获取到要执行的SQL语句：select  *  from  emp      </li><li>把SQL语句中的字段列表，变为：count(*)</li><li>执行SQL语句：select  count(*)  from  emp          &#x2F;&#x2F;获取到总记录数</li><li>再对要执行的SQL语句：select  *  from  emp 进行改造，在末尾添加 limit ? , ?</li><li>执行改造后的SQL语句：select  *  from  emp  limit  ? , ?</li></ol></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>当使用了PageHelper分页插件进行分页，就无需再Mapper中进行手动分页了。 在Mapper中我们只需要进行正常的列表查询即可。在Service层中，调用Mapper的方法之前设置分页参数，在调用Mapper方法执行查询之后，解析分页结果，并将结果封装到PageBean对象中返回。</p><p>1、在pom.xml引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、EmpMapper</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前页的结果列表</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>Integer start<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、EmpServiceImpl</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PageBean <span class="token function">page</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置分页参数</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 执行分页查询</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> empList <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取分页结果</span>    Page<span class="token operator">&lt;</span>Emp<span class="token operator">></span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">)</span> empList<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//封装PageBean</span>    PageBean pageBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> pageBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="分页查询（带条件）"><a href="#分页查询（带条件）" class="headerlink" title="分页查询（带条件）"></a>分页查询（带条件）</h2><p>我们看到页面原型及需求中描述，搜索栏的搜索条件有三个，分别是：</p><ul><li>姓名：模糊匹配</li><li>性别：精确匹配</li><li>入职日期：范围匹配</li></ul><h4 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215180528415.png"></p><h4 id="功能开发-4"><a href="#功能开发-4" class="headerlink" title="功能开发"></a>功能开发</h4><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张</td><td>姓名</td></tr><tr><td>gender</td><td>否</td><td>1</td><td>性别 , 1 男 , 2 女</td></tr><tr><td>begin</td><td>否</td><td>2010-01-01</td><td>范围匹配的开始时间(入职日期)</td></tr><tr><td>end</td><td>否</td><td>2020-01-01</td><td>范围匹配的结束时间(入职日期)</td></tr><tr><td>page</td><td>是</td><td>1</td><td>分页查询的页码，如果未指定，默认为1</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>分页查询的每页记录数，如果未指定，默认为10</td></tr></tbody></table></blockquote><p>在原有分页查询的代码基础上进行改造：</p><p><strong>EmpController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件分页查询</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> Result <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span> Integer pageSize<span class="token punctuation">,</span>                       String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> LocalDate begin<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> LocalDate end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录日志</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"分页查询，参数：{},{},{},{},{},{}"</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用业务层分页查询功能</span>        PageBean pageBean <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>EmpService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 条件分页查询     * @param page     页码     * @param pageSize 每页展示记录数     * @param name     姓名     * @param gender   性别     * @param begin   开始时间     * @param end     结束时间     * @return     */</span>    PageBean <span class="token function">page</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span> LocalDate begin<span class="token punctuation">,</span> LocalDate end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>EmpServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PageBean <span class="token function">page</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span> LocalDate begin<span class="token punctuation">,</span> LocalDate end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置分页参数</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行条件分页查询</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> empList <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取查询结果</span>        Page<span class="token operator">&lt;</span>Emp<span class="token operator">></span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">)</span> empList<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装PageBean</span>        PageBean pageBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pageBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前页的结果列表</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span> LocalDate begin<span class="token punctuation">,</span> LocalDate end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 条件分页查询 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null and name !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                name like concat('%',#{name},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and gender = #{gender}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>begin !<span class="token punctuation">=</span> null and end !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and entrydate between #{begin} and #{end}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>        order by update_time desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h2><h4 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day08/image/image-20221215184714815.png"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;emps&#x2F;{ids}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><pre><code>@PathVariable</code></pre><p>问题2：如何限定请求方式是delete？</p><pre><code>@DeleteMapping</code></pre><p>问题3：在Mapper接口中，执行delete操作的SQL语句时，条件中的id值是不确定的是动态的，怎么实现呢？</p><pre><code>Mybatis中的动态SQL：foreach</code></pre></blockquote><h4 id="功能开发-5"><a href="#功能开发-5" class="headerlink" title="功能开发"></a>功能开发</h4><p>通过查看接口文档：删除员工</p><blockquote><p>请求路径：&#x2F;emps&#x2F;{ids}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {ids}</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//批量删除</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{ids}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">{</span>        empService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//条件分页查询</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> Result <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span> Integer pageSize<span class="token punctuation">,</span>                       String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> LocalDate begin<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> LocalDate end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录日志</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"分页查询，参数：{},{},{},{},{},{}"</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用业务层分页查询功能</span>        PageBean pageBean <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//响应</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>EmpService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 批量删除操作     * @param ids id集合     */</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        empMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//批量删除</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略...</span><span class="token punctuation">}</span></code></pre><p><strong>EmpMapper.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--批量删除员工--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from emp where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 省略... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day7</title>
      <link href="/2023/07/02/javaweb2023-day7/"/>
      <url>/2023/07/02/javaweb2023-day7/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis操作"><a href="#Mybatis操作" class="headerlink" title="Mybatis操作"></a>Mybatis操作</h1><h2 id="Mybatis基础操作"><a href="#Mybatis基础操作" class="headerlink" title="Mybatis基础操作"></a>Mybatis基础操作</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//@Delete("delete from emp where id = 17")</span>    <span class="token comment" spellcheck="true">//public void delete();</span>    <span class="token comment" spellcheck="true">//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据</span>    <span class="token comment" spellcheck="true">//SQL语句中的id值不能写成固定数值，需要变为动态的数值</span>    <span class="token comment" spellcheck="true">//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句</span>        <span class="token comment" spellcheck="true">/**     * 根据id删除数据     * @param id    用户id     */</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from emp where id = #{id}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用#{key}方式获取方法中的参数值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>@Delete注解：用于编写delete操作的SQL语句</p></blockquote><blockquote><p>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，如：#{id}、#{value}。但是建议保持名字一致。</p></blockquote><h4 id="日志输入"><a href="#日志输入" class="headerlink" title="日志输入"></a>日志输入</h4><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li><p>打开application.properties文件</p></li><li><p>开启mybatis的日志，并指定输出到控制台</p></li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定mybatis输出日志的位置, 输出控制台</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20220901164225644.png" alt="image-20220901164225644"> </p><blockquote><p>但是我们发现输出的SQL语句：delete from emp where id &#x3D; ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。</p></blockquote><h4 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h4><p>,性能更高，更安全（防止SQL注入）</p><p>在Mybatis中提供的参数占位符有两种：${…} 、#{…}</p><ul><li><p>#{…}</p><ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li><p>${…}</p><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置时使用</li></ul></li></ul><blockquote><p>注意事项：在项目开发中，建议使用#{…}，生成预编译SQL，防止SQL注入安全。</p></blockquote><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>接口方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#{username}, #{name}, #{gender}, #{image}, #{job}, #{entrydate}, #{deptId}, #{createTime}, #{updateTime})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>说明：#{…} 里面写的名称是对象的属性名</p></blockquote><p>那要如何实现在插入数据之后返回所插入行的主键值呢？</p><ul><li>默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个Options注解，并在注解中指定属性useGeneratedKeys&#x3D;true和keyProperty&#x3D;”实体类属性名”</li></ul><p>主键返回代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//会自动将生成的主键值，赋值给emp对象的id属性</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#{username}, #{name}, #{gender}, #{image}, #{job}, #{entrydate}, #{deptId}, #{createTime}, #{updateTime})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>option注解标签useGeneratedKeys&#x3D;true表示使用数据库自动增长的主键，keyColumn用于指定数据库table中的主键，keyProperty用于指定传入对象的成员变量。</p><p>@Options(useGeneratedKeys&#x3D;true,keyProperty&#x3D;”userId”,keyColumn&#x3D;”userId”)<br>这个注解的意思就是，使用数据库自动增长的主键，并从table中userId字段里面把数据放到传入对象的成员变量userId里面。<br>如果我们已经在数据库表中指定了主键，那么keyColumn属性可以缺省。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id修改员工信息     * @param emp     */</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update emp set username=#{username}, name=#{name}, gender=#{gender}, image=#{image}, job=#{job}, entrydate=#{entrydate}, dept_id=#{deptId}, update_time=#{updateTime} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Emp emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Emp <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>我们看到查询返回的结果中大部分字段是有值的，但是deptId，createTime，updateTime这几个字段是没有值的，而数据库中是有对应的字段值的，这是为什么呢？</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212103124490.png" alt="image-20221212103124490"></p><p>原因如下： </p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p> 解决方案：</p><ol><li>起别名</li><li>结果映射</li><li><strong>开启驼峰命名</strong></li></ol><p><strong>起别名</strong>：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, password, name, gender, image, job, entrydate, "</span> <span class="token operator">+</span>        <span class="token string">"dept_id AS deptId, create_time AS createTime, update_time AS updateTime "</span> <span class="token operator">+</span>        <span class="token string">"from emp "</span> <span class="token operator">+</span>        <span class="token string">"where id=#{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Emp <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>再次执行测试类：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212111027396.png" alt="image-20221212111027396"></p></blockquote><p><strong>手动结果映射</strong>：通过 @Results及@Result 进行手动结果映射</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"dept_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"deptId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"updateTime"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Emp <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>@Results源代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Results</span> <span class="token punctuation">{</span>String <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>Result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Result类型的数组</span><span class="token punctuation">}</span></code></pre><p>@Result源代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Results<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span><span class="token keyword">boolean</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示当前列是否为主键（true:是主键）</span>String <span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定表中字段名</span>String <span class="token function">property</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定类中属性名</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">javaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>JdbcType <span class="token function">jdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> JdbcType<span class="token punctuation">.</span>UNDEFINED<span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeHandler</span><span class="token operator">></span> <span class="token function">typeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> UnknownTypeHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>One <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">;</span>Many <span class="token function">many</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>**开启驼峰命名(推荐)**：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</p><blockquote><p>驼峰命名规则：   abc_xyz    &#x3D;&gt;   abcXyz</p><ul><li>表中字段名：abc_xyz</li><li>类中属性名：abcXyz</li></ul></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 在application.properties中添加：</span><span class="token attr-name">mybatis.configuration.map-underscore-to-camel-case</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><blockquote><p>要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。</p></blockquote><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp "</span> <span class="token operator">+</span>            <span class="token string">"where name like concat('%',#{name},'%') "</span> <span class="token operator">+</span>            <span class="token string">"and gender = #{gender} "</span> <span class="token operator">+</span>            <span class="token string">"and entrydate between #{begin} and #{end} "</span> <span class="token operator">+</span>            <span class="token string">"order by update_time desc"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Short gender<span class="token punctuation">,</span> LocalDate begin<span class="token punctuation">,</span> LocalDate end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="参数名说明"><a href="#参数名说明" class="headerlink" title="参数名说明"></a>参数名说明</h4><p>参数名在不同的SpringBoot版本中，处理方案还不同：</p><ul><li>在springBoot的2.x版本（保证参数名一致）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212151156273.png" alt="image-20221212151156273"></p><blockquote><p>springBoot的父工程对compiler编译插件进行了默认的参数parameters配置，使得在编译时，会在生成的字节码文件中保留原方法形参的名称，所以#{…}里面可以直接通过形参名获取对应的值</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212151411154.png" alt="image-20221212151411154"></p></blockquote><ul><li>在springBoot的1.x版本&#x2F;单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212151628715.png" alt="image-20221212151628715"></p><blockquote><p>在编译时，生成的字节码文件当中，不会保留Mapper接口中方法的形参名称，而是使用var1、var2、…这样的形参名字，此时要获取参数值时，就要通过@Param注解来指定SQL语句中的参数名</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212151736274.png" alt="image-20221212151736274"></p></blockquote><h2 id="Mybatis的xml配置文件"><a href="#Mybatis的xml配置文件" class="headerlink" title="Mybatis的xml配置文件"></a>Mybatis的xml配置文件</h2><h3 id="配置规范"><a href="#配置规范" class="headerlink" title="配置规范"></a>配置规范</h3><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li><p>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</p></li><li><p>XML映射文件的namespace属性为Mapper接口全限定名一致</p></li><li><p>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</p></li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212153529732.png" alt="image-20221212153529732"></p><blockquote><p>&lt;select&gt;标签：就是用于编写select查询语句的。</p><ul><li>resultType属性，指的是查询返回的单条记录所封装的类型。</li></ul></blockquote><h3 id="配置文件实现"><a href="#配置文件实现" class="headerlink" title="配置文件实现"></a>配置文件实现</h3><p>第1步：创建XML映射文件</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212154908306.png" alt="image-20221212154908306"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212155304635.png" alt="image-20221212155304635"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212155544404.png" alt="image-20221212155544404"></p><p>第2步：编写XML映射文件</p><blockquote><p>xml映射文件中的dtd约束，直接从mybatis官网复制即可</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "https://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>配置：XML映射文件的namespace属性为Mapper接口全限定名</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212160316644.png" alt="image-20221212160316644"></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "https://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>配置：XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221212163528787.png" alt="image-20221212163528787"></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "https://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询操作--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from emp        where name like concat('%',#{name},'%')              and gender = #{gender}              and entrydate between #{begin} and #{end}        order by update_time desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="动态SQL简介"><a href="#动态SQL简介" class="headerlink" title="动态SQL简介"></a>动态SQL简介</h3><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day07/image/image-20221213122623278.png" alt="image-20221213122623278"></p><p>在Mybatis中提供了很多实现动态SQL的标签，我们学习Mybatis中的动态SQL就是掌握这些动态SQL标签。</p><h3 id="SQL-if"><a href="#SQL-if" class="headerlink" title="SQL-if"></a>SQL-if</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- if做为where标签的子元素 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 and name like concat('%',#{name},'%')             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 and gender = #{gender}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>begin !<span class="token punctuation">=</span> null and end !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 and entrydate between #{begin} and #{end}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>        order by update_time desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>对于更新来说，也可以有 <set></p><h3 id="SQL-foreach"><a href="#SQL-foreach" class="headerlink" title="SQL-foreach"></a>SQL-foreach</h3><p>XML映射文件：</p><ul><li>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合名称<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合遍历出来的元素/项<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>每一次遍历使用的分隔符<span class="token punctuation">"</span></span>  <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>遍历开始前拼接的片段<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>遍历结束后拼接的片段<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--删除操作--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByIds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from emp where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre><h3 id="SQL-sql-amp-include"><a href="#SQL-sql-amp-include" class="headerlink" title="SQL-sql&amp;include"></a>SQL-sql&amp;include</h3><p>在xml映射文件中配置的SQL，有时可能会存在很多重复的片段，此时就会存在很多冗余的代码</p><p>我们可以对重复的代码片段进行抽取，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><code>&lt;sql&gt;</code>：定义可重用的SQL片段</li><li><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</li></ul><p>SQL片段： 抽取重复的代码</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commonSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commonSelect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name like concat('%',#{name},'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and gender = #{gender}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>begin !<span class="token punctuation">=</span> null and end !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and entrydate between #{begin} and #{end}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    order by update_time desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day6</title>
      <link href="/2023/07/01/javaweb2023-day6/"/>
      <url>/2023/07/01/javaweb2023-day6/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot基础-MyBatis基础"><a href="#SpringBoot基础-MyBatis基础" class="headerlink" title="SpringBoot基础+MyBatis基础"></a>SpringBoot基础+MyBatis基础</h1><h2 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h2><p>基于Spring官方骨架，创建SpringBoot工程。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221201184702136.png"></p><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><p>新建一个类，输入以下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World ~"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><p>执行即可。</p><h1 id="SpringBootWeb请求响应"><a href="#SpringBootWeb请求响应" class="headerlink" title="SpringBootWeb请求响应"></a>SpringBootWeb请求响应</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><p>如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span>    <span class="token comment" spellcheck="true">// 请求参数名：name</span>    <span class="token comment" spellcheck="true">//springboot方式</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/simpleParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String username <span class="token punctuation">,</span> Integer age <span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">"  :  "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="实体对象参数"><a href="#实体对象参数" class="headerlink" title="实体对象参数"></a>实体对象参数</h3><p>对于简单的实体参数而言，<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221203131954932.png"></p><p>参数名和实体类属性名不一致时，就不能被接收到。</p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221203160447953.png"></p><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><h3 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h3><p>对于表单的多选框（复选框）。其实也是一个个提交的</p><p><a href="http://localhost:8080/arrayParam?hobby=game&hobby=java">http://localhost:8080/arrayParam?hobby=game&amp;hobby=java</a></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组集合参数</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/arrayParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">arrayParam</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p><p>当然对于这两种方式也可以用集合</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组集合参数</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/listParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">listParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobby<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//日期时间参数</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/dateParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">dateParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span> LocalDateTime updateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JSON参数"><a href="#JSON参数" class="headerlink" title="JSON参数"></a>JSON参数</h3><ul><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221203230457901.png"></p><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><pre><code>http://localhost:8080/user/1http://localhost:880/user/1/0</code></pre><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204001520756.png"></p><p>Controller方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路径参数</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/path/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">pathParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>传递多个路径参数  <a href="http://localhost:8080/1/ITCAST">http://localhost:8080/1/ITCAST</a></p><p>Controller方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路径参数</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/path/{id}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">pathParam2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController &#x3D; @Controller + @ResponseBody</li></ul><p>@RestController源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//元注解（修饰注解的注解）</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//元注解</span><span class="token annotation punctuation">@Documented</span>    <span class="token comment" spellcheck="true">//元注解</span><span class="token annotation punctuation">@Controller</span>   <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> <strong>统一响应结果</strong>：一般会定义一个Result类</p><p>需求：加载并解析xml文件中的数据，完成数据处理，并在页面展示</p><p>Controller代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/listEmp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 加载并解析emp.xml</span>        String file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"emp.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(file);</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> empList <span class="token operator">=</span> XmlParserUtils<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> Emp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 对数据进行转换处理 - gender, job</span>        empList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>emp <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//处理 gender 1: 男, 2: 女</span>            String gender <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span>            String job <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">"讲师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">"班主任"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">"就业指导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 响应数据</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>empList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>统一返回结果实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 成功 , 0 失败</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提示信息</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据 date</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">success</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204191650390.png"> </p><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204193837678.png"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204194207812.png"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204201342490.png"></p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>解耦，不能在EmpController中使用new对象，此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错）。</p><ul><li><ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="IOC-amp-amp-DI入门"><a href="#IOC-amp-amp-DI入门" class="headerlink" title="IOC&amp;&amp;DI入门"></a>IOC&amp;&amp;DI入门</h3><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204212807207.png"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204213328034.png"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204213859112.png"></p><h3 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h3><p>IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>&#x2F;&#x2F;@RestController &#x3D; @Controller + @ResponseBody</p><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204221320230.png"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p>下面我们通过修改项目工程的目录结构，来测试bean对象是否生效：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204223602694.png"></p><p>运行程序后，报错：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204223815554.png"></p><p>为什么没有找到bean对象呢？</p><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204224643683.png"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204225437297.png"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204225815624.png"></p><h3 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h3><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204232154445.png"></p><ul><li>程序运行会报错</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204231616724.png"></p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204232501679.png"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204233333606.png"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image-20221204233637735.png"></p><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="mybatis入门"><a href="#mybatis入门" class="headerlink" title="mybatis入门"></a>mybatis入门</h2><p>application.properties:</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#驱动类名称</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true">#数据库连接的url</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span><span class="token comment" spellcheck="true">#连接数据库的用户名</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment" spellcheck="true">#连接数据库的密码</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span></code></pre><blockquote><p>上述的配置，可以直接复制过去，不要敲错了。 全部都是 spring.datasource.xxxx 开头。</p></blockquote><p>默认我们在UserMapper接口上加的@Select注解中编写SQL语句是没有提示的。 如果想让idea给我们提示对应的SQL语句，我们需要在IDEA中配置与MySQL数据库的链接。 </p><p>默认我们在UserMapper接口上的@Select注解中编写SQL语句是没有提示的。如果想让idea给出提示，可以做如下配置：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image/image-20221210143348119.png"></p><p>配置完成之后，发现SQL语句中的关键字有提示了，但还存在不识别表名(列名)的情况：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image/image-20221210143934318.png"></p><blockquote><p>产生原因：Idea和数据库没有建立连接，不识别表信息</p><p>解决方案：在Idea中配置MySQL数据库连接</p></blockquote><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image/image-20221210144139792.png">) </p><blockquote><p>在配置的时候指定连接那个数据库，如上图所示连接的就是mybatis数据库。</p></blockquote><p>如果我们想把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><ol><li>在pom.xml文件中引入依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Druid连接池依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.druid.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.druid.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span><span class="token attr-name">spring.datasource.druid.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.druid.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span></code></pre><h2 id="lombok的使用"><a href="#lombok的使用" class="headerlink" title="lombok的使用"></a>lombok的使用</h2><p>第1步：在pom.xml文件中引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>第2步：在实体类上添加注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Short age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Short gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day06/image/image/image-20221210170733921.png"></p></blockquote><p>说明：@Data注解中不包含全参构造方法，通常在实体类上，还会添加上：全参构造、无参构造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span> <span class="token comment" spellcheck="true">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span><span class="token annotation punctuation">@NoArgsConstructor</span> <span class="token comment" spellcheck="true">//无参构造</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token comment" spellcheck="true">//全参构造</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Short age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Short gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day5</title>
      <link href="/2023/06/30/javaweb2023-day5/"/>
      <url>/2023/06/30/javaweb2023-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="第五天Maven"><a href="#第五天Maven" class="headerlink" title="第五天Maven"></a>第五天Maven</h1><h2 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a><strong>Maven的作用</strong></h2><p><strong>依赖管理</strong>：</p><ul><li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li></ul><p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20220616001159531.png"></p><p><strong>统一项目结构：</strong></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20221130140132209.png"></p><p><strong>项目构建:</strong></p><p>我们开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20221130222907628.png"></p><p>综上所述，可以得到一个结论：<strong>Maven是一款管理和构建java项目的工具</strong></p><h2 id="maven的一些配置"><a href="#maven的一些配置" class="headerlink" title="maven的一些配置"></a>maven的一些配置</h2><p>项目对象模型，就是将我们自己的项目抽象成一个对象模型，有自己专属的坐标（就是资源(jar包)的唯一标识，通过坐标可以定位到所需资源(jar包)位置）。</p><p>依赖管理模型，是使用坐标来描述当前项目依赖哪些第三方jar包</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20221130174805973.png"></p><p>Maven仓库：用于存储资源，管理各种jar包.</p><p>下载maven后进行解压，解压后的目录结构：</p><ul><li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li><li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li><li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li></ul><p>进入到conf目录下修改settings.xml配置文件 </p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p><p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</p><p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</p><p>4）定位到160行左右，配置阿里云私服</p><pre><code>&lt;mirror&gt;      &lt;id&gt;alimaven&lt;/id&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          &lt;/mirror&gt;</code></pre><p>注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载</p><p>在系统变量处新建一个变量MAVEN_HOME</p><p>PATH环境变量的值，新建一个，设置为：%MAVEN_HOME%\bin</p><p>在cmd中执行mvn-v查看。Maven3.6.1要JDK8才行，之前用JDK6就会报错</p><p>设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20220616103302386.png"></p><p>全局设置一些信息</p><p>选择 IDEA中 File  &#x3D;&gt;  close project</p><p>打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p>创建Maven项目</p><p>填写模块名称，坐标信息，点击finish，创建完成</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20221201100502234.png"></p><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p><ul><li>使用pom.xml文件来实现</li></ul><p>pom.xml文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- POM模型版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 当前项目坐标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven_project1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打包方式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>pom文件详解：</p><ul><li><project> ：pom文件的根标签，表示当前maven项目</li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</li></ul><h2 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h2><blockquote><p>1). 什么是分模块设计：将项目按照功能拆分成若干个子模块</p></blockquote><blockquote><p>2). 为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</p></blockquote><blockquote><p>3). 注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p></blockquote><p>比如说，将pojo包下的实体类，抽取到一个maven模块中 tlias-pojo</p><p>1.创建maven模块 tlias-pojo，存放实体类</p><p>2.然后在tlias-pojo中创建一个包 com.itheima.pojo (和原来案例项目中的pojo包名一致)</p><p>3.将原来案例项目 tlias-web-management 中的pojo包下的实体类，复制到tlias-pojo模块中</p><p>4.在 tlias-pojo 模块的pom.xml文件中引入依赖</p><p>5.删除原有案例项目tlias-web-management的pojo包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-pojo的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tlias-pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="继承与聚合"><a href="#继承与聚合" class="headerlink" title="继承与聚合"></a>继承与聚合</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113113004727.png" alt="image-20230113113004727"> </p><p>工程结构如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113120517216.png" alt="image-20230113120517216"> </p><p>父工程tlias-parent的pom.xml文件配置如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tlias-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre><blockquote><p>Maven打包方式：</p><ul><li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li><li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li><li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li></ul></blockquote><p>2). 在子工程的pom.xml文件中，配置继承关系。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tlias-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../tlias-parent/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tlias-utils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><p>这里是以 tlias-utils 为例，指定了其父工程。其他的模块，都是相同的配置方式。</p><blockquote><p>注意：</p><ul><li>在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动继承父工程的 。</li><li>relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。<ul><li>..&#x2F; 代表的上一级目录</li></ul></li></ul></blockquote><p>3). 在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。删除之后，我们会看到父工程中配置的依赖 lombok，子工程直接继承下来了。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113120408661.png" alt="image-20230113120408661"></p><h3 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h3><p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p><p>父工程：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--统一管理依赖版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--JWT令牌--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p>子工程：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--JWT令牌--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意：</p><ul><li><p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p></li><li><p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p></li></ul></blockquote><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113151533948.png"> </p><ul><li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li><li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>聚合其他模块<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>modules<span class="token operator">></span>    <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span>/tlias<span class="token operator">-</span>pojo<span class="token operator">&lt;</span><span class="token operator">/</span>module<span class="token operator">></span>    <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span>/tlias<span class="token operator">-</span>utils<span class="token operator">&lt;</span><span class="token operator">/</span>module<span class="token operator">></span>    <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span>/tlias<span class="token operator">-</span>web<span class="token operator">-</span>management<span class="token operator">&lt;</span><span class="token operator">/</span>module<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>modules<span class="token operator">></span></code></pre><p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p><p><strong>测试：</strong>执行在聚合工程 tlias-parent 中执行 package 打包指令</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113153347978.png" alt="image-20230113153347978"> </p><p>那 tlias-parent 中所聚合的其他模块全部都会执行 package 指令，这就是通过聚合实现项目的一键构建（一键清理clean、一键编译compile、一键测试test、一键打包package、一键安装install等）。</p><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</li><li><strong>依赖查找顺序：</strong><ul><li>本地仓库</li><li>私服仓库</li><li>中央仓库</li></ul></li><li><strong>注意事项：</strong>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113161116701.png" alt="image-20230113161116701"></p><h3 id="资源上传与下载"><a href="#资源上传与下载" class="headerlink" title="资源上传与下载"></a>资源上传与下载</h3><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h4><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day05/image/image-20230113163307239.png"> </p><p>资源上传与下载，我们需要做三步配置，执行一条指令。</p><p>第一步配置：在maven的配置文件中配置访问私服的用户名、密码。</p><p>第二步配置：在maven的配置文件中配置连接私服的地址(url地址)。</p><p>第三步配置：在项目的pom.xml文件中配置上传资源的位置(url地址)。</p><p>配置好了上述三步之后，要上传资源到私服仓库，就执行执行maven生命周期：deploy。</p><blockquote><p>私服仓库说明：</p><ul><li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li><li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li><li>Central：存储的是从中央仓库下载下来的依赖。</li></ul></blockquote><blockquote><p>项目版本说明：</p><ul><li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li><li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li></ul></blockquote><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p>私服准备好了之后，我们要做如下几步配置：</p><p><strong>1.设置私服的访问用户名&#x2F;密码（在自己maven安装目录下的conf&#x2F;settings.xml中的servers中配置）</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><p><strong>2.设置私服依赖下载的仓库组地址（在自己maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置）</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.150.101:8081/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>allow-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.150.101:8081/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><p><strong>3.IDEA的maven工程的pom文件中配置上传（发布）地址(直接在tlias-parent中配置发布地址)</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- release版本的发布地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.150.101:8081/repository/maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- snapshot版本的发布地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span></code></pre><p>配置完成之后，我们就可以在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。 </p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day4</title>
      <link href="/2023/06/29/javaweb2023-day4/"/>
      <url>/2023/06/29/javaweb2023-day4/</url>
      
        <content type="html"><![CDATA[<h1 id="第四天ElementUI"><a href="#第四天ElementUI" class="headerlink" title="第四天ElementUI"></a>第四天ElementUI</h1><p>注：&amp;#123 的意思是{</p><p>&amp;#125的意思是}</p><p>不知道为啥会有这种格式变换</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>首先我们要掌握ElementUI的快速入门，接下来同学们就一起跟着步骤来操作一下。</p><p>首先，我们先要安装ElementUI的组件库，打开VS Code，停止之前的项目，然后在命令行输入如下命令：</p><pre><code>npm install element-ui@2.15.3 </code></pre><p>具体操作如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669358653297.png"> </p><p>然后我们需要在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>具体操作如图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669358935188.png"></p><p>然后我们需要按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>具体操作如图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669359450896.png"> </p><p>最后我们只需要去ElementUI的官网，找到组件库，然后找到按钮组件，抄写代码即可，具体操作如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669359839574.png"></p><p>然后找到按钮的代码，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669359904272.png"> </p><p>紧接着我们复制组件代码到我们的vue组件文件中，操作如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669360120385.png"></p><p>最后，我们需要在默认访问的根组件<strong>src&#x2F;App.vue</strong>中引入我们自定义的组件，具体操作步骤如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669360320983.png"> </p><p>然后App.vue组件中的具体代码如下，<strong>代码是我们通过上述步骤引入element-view组件时自动生成的</strong>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- {{message}} --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>element-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>element-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> ElementView <span class="token keyword">from</span> <span class="token string">'./views/Element/ElementView.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> ElementView <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello world"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>然后运行我们的vue项目，浏览器直接访问之前的7000端口，展示效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669360502407.png"></p><p>到此，我们ElementUI的入门程序编写成功</p><h2 id="Table表格"><a href="#Table表格" class="headerlink" title="Table表格"></a>Table表格</h2><h4 id="组件演示"><a href="#组件演示" class="headerlink" title="组件演示"></a>组件演示</h4><p>Table 表格：用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。</p><p>接下来我们通过代码来演示。</p><p>首先我们需要来到ElementUI的组件库中，找到表格组件，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669361564197.png"></p><p>然后复制代码到我们之前的ElementVue.vue组件中，需要注意的是，我们组件包括了3个部分，如果官方有除了template部分之外的style和script都需要复制。具体操作如下图所示：</p><p>template模板部分：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669362225501.png"> </p><p>script脚本部分</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669362382846.png"></p><p>ElementView.vue组件文件整体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Button按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">></span></span>默认按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>危险按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Table表格 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>                <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>                <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1517 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1519 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>此时回到浏览器，我们页面呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669362451236.png"></p><h4 id="组件属性详解"><a href="#组件属性详解" class="headerlink" title="组件属性详解"></a>组件属性详解</h4><p>那么我们的ElementUI是如何将数据模型绑定到视图的呢？主要通过如下几个属性：</p><ul><li>data: 主要定义table组件的数据模型</li><li>prop: 定义列的数据应该绑定data中定义的具体的数据模型</li><li>label: 定义列的标题</li><li>width: 定义列的宽度</li></ul><p>其具体示例含义如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669363098610.png"> </p><p><strong>PS:Element组件的所有属性都可以在组件页面的最下方找到</strong>，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669363190361.png"></p><h2 id="Pagination分页"><a href="#Pagination分页" class="headerlink" title="Pagination分页"></a>Pagination分页</h2><h4 id="组件演示-1"><a href="#组件演示-1" class="headerlink" title="组件演示"></a>组件演示</h4><p>Pagination: 分页组件，主要提供分页工具条相关功能。其展示效果图下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669363631302.png"> </p><p>接下来我们通过代码来演示功能。</p><p>首先在官网找到分页组件，我们选择带背景色分页组件，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669363746409.png"> </p><p>然后复制代码到我们的ElementView.vue组件文件的template中，拷贝如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>    <span class="token attr-name">background</span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prev, pager, next<span class="token punctuation">"</span></span>    <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span></code></pre><p>浏览器打开呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669363921750.png"> </p><h4 id="组件属性详解-1"><a href="#组件属性详解-1" class="headerlink" title="组件属性详解"></a>组件属性详解</h4><p>对于分页组件我们需要关注的是如下几个重要属性（可以通过查阅官网组件中最下面的组件属性详细说明得到）：</p><ul><li>background: 添加背景颜色，也就是上图蓝色背景色效果。</li><li>layout: 分页工具条的布局，其具体值包含<code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> 这些值</li><li>total: 数据的总数量</li></ul><p>然后根据官方分页组件提供的layout属性说明，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669364288179.png"> </p><p>我们修改layout属性如下：</p><pre class=" language-js"><code class="language-js"> layout<span class="token operator">=</span><span class="token string">"sizes,prev, pager, next,jumper,total"</span></code></pre><p>浏览器打开呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669364403079.png"></p><p>发现在原来的功能上，添加了一些额外的功能，其具体对应关系如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669364533849.png"> </p><h4 id="组件事件详解"><a href="#组件事件详解" class="headerlink" title="组件事件详解"></a>组件事件详解</h4><p>对于分页组件，除了上述几个属性，还有2个非常重要的事件我们需要去学习：</p><ul><li>size-change ： pageSize 改变时会触发 </li><li>current-change ：currentPage 改变时会触发</li></ul><p>其官方详细解释含义如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669364990991.png"> </p><p>对于这2个事件的参考代码，我们同样可以通过官方提供的完整案例中找到，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669365117644.png"> </p><p>然后我们找到对应的代码，首先复制事件，复制代码如下：</p><pre class=" language-js"><code class="language-js">@size<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>@current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span></code></pre><p>此时Panigation组件的template完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Pagination分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>               <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>               <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>               <span class="token attr-name">background</span>               <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sizes,prev, pager, next,jumper,total<span class="token punctuation">"</span></span>               <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span></code></pre><p>紧接着需要复制事件需要的2个函数，需要注意methods属性和data同级，其代码如下：</p><pre class=" language-json"><code class="language-json">methods<span class="token operator">:</span> <span class="token punctuation">{</span>      handleSizeChange(val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log(`每页 $<span class="token punctuation">{</span>val<span class="token punctuation">}</span> 条`<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      handleCurrentChange(val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console.log(`当前页<span class="token operator">:</span> $<span class="token punctuation">{</span>val<span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>此时Panigation组件的script部分完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1517 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1519 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>回到浏览器中，我们f12打开开发者控制台，然后切换当前页码和切换每页显示的数量，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/JavaWeb2023-Day4/image/1669365585379.png"> </p><h2 id="Dialog对话框"><a href="#Dialog对话框" class="headerlink" title="Dialog对话框"></a>Dialog对话框</h2><h4 id="组件演示-2"><a href="#组件演示-2" class="headerlink" title="组件演示"></a>组件演示</h4><p>Dialog: 在保留当前页面状态的情况下，告知用户并承载相关操作。其企业开发应用场景示例如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669365791037.png"></p><p>首先我们需要在ElementUI官方找到Dialog组件，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669365950945.png"> </p><p>然后复制如下代码到我们的组件文件的template模块中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Dialog 对话框 --></span><span class="token comment" spellcheck="true">&lt;!-- Table --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogTableVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开嵌套表格的 Dialog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>收货地址<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogTableVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><p>并且复制数据模型script模块中：</p><pre><code> gridData: [&#123;          date: &#39;2016-05-02&#39;,          name: &#39;王小虎&#39;,          address: &#39;上海市普陀区金沙江路 1518 弄&#39;        &#125;, &#123;          date: &#39;2016-05-04&#39;,          name: &#39;王小虎&#39;,          address: &#39;上海市普陀区金沙江路 1518 弄&#39;        &#125;, &#123;          date: &#39;2016-05-01&#39;,          name: &#39;王小虎&#39;,          address: &#39;上海市普陀区金沙江路 1518 弄&#39;        &#125;, &#123;          date: &#39;2016-05-03&#39;,          name: &#39;王小虎&#39;,          address: &#39;上海市普陀区金沙江路 1518 弄&#39;        &#125;],        dialogTableVisible: false,</code></pre><p>其完整的script部分代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>        gridData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        dialogTableVisible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1517 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1519 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后我们打开浏览器，点击按钮，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669366365778.png"> </p><h4 id="组件属性详解-2"><a href="#组件属性详解-2" class="headerlink" title="组件属性详解"></a>组件属性详解</h4><p>那么ElementUI是如何做到对话框的显示与隐藏的呢？是通过如下的属性：</p><ul><li>visible.sync ：是否显示 Dialog</li></ul><p>具体释意如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669366903107.png"> </p><p>visible属性绑定的dialogTableVisble属性一开始默认是false，所以对话框隐藏；然后我们点击按钮，触发事件，修改属性值为true，</p><p>然后对话框visible属性值为true，所以对话框呈现出来。</p><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><h4 id="组件演示-3"><a href="#组件演示-3" class="headerlink" title="组件演示"></a>组件演示</h4><p>Form 表单：由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。 </p><p>表单在我们前端的开发中使用的还是比较多的，接下来我们学习这个组件，与之前的流程一样，我们首先需要在ElementUI的官方找到对应的组件示例：如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669369751014.png"> </p><p>我们的需求效果是：在对话框中呈现表单内容，类似如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669365791037.png"></p><p>所以，首先我们先要根据上一小节所学习的内容，制作一个新的对话框，其代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Dialog对话框-Form表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开嵌套Form的 Dialog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Form表单<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><p>还需要注意的是，针对这个新的对话框，我们需要在data中声明新的变量dialogFormVisible来控制对话框的隐藏与显示，代码如下：</p><pre><code> dialogFormVisible: false,</code></pre><p>打开浏览器，此时呈现如图所示的效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669370230214.png"> </p><p>然后我们<strong>复制官网提供的template部分代码到我们的vue组件文件的Dialog组件中</strong>，但是，此处官方提供的表单项标签太多，所以我们只需要保留前面3个表单项组件，其他多余的删除，所以最终template部分代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Form表单<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.region<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>区域一<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shanghai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>区域二<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动时间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择日期<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.date1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-time-picker</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择时间<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.date2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-time-picker</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即创建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span></code></pre><p>观察上述代码，我们发现其中表单项标签使用了v-model双向绑定，所以我们需要在vue的数据模型中声明变量，同样可以从官方提供的代码中复制粘贴，但是我们需要去掉我们不需要的属性，通过观察上述代码，我们发现双向绑定的属性有4个，分别是form.name,form.region,form.date1,form.date2,所以最终数据模型如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669371003680.png"></p><pre><code> form: &#123;          name: &#39;&#39;,          region: &#39;&#39;,          date1: &#39;&#39;,          date2:&#39;&#39;        &#125;,</code></pre><p>同样，官方的代码中，在script部分中，还提供了onSubmit函数，表单的立即创建按钮绑定了此函数，我们可以输入表单的内容，而表单的内容是双向绑定到form对象的，所以我们修改官方的onSubmit函数如下即可，而且我们还需要关闭对话框，最终函数代码如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669371163913.png"> </p><pre><code> onSubmit() &#123;       console.log(this.form); //输出表单内容到控制台        this.dialogFormVisible=false; //关闭表案例的对话框      &#125;</code></pre><p>然后打开浏览器，我们打开对话框，并且输入表单内容，点击立即创建按钮，呈现如下效果；</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669371448683.png"> </p><p>最终vue组件完整代码如下，同学们可以针对form表单案例，参考该案例对应的template部分和script部分代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Button按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">></span></span>默认按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>危险按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Table表格 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>                <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>                <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>                <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Pagination分页 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>            <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>            <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>            <span class="token attr-name">background</span>            <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sizes,prev, pager, next,jumper,total<span class="token punctuation">"</span></span>            <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Dialog 对话框 --></span>        <span class="token comment" spellcheck="true">&lt;!-- Table --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogTableVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开嵌套表格的 Dialog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>收货地址<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogTableVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Dialog对话框-Form表单 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开嵌套Form的 Dialog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Form表单<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogFormVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.region<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择活动区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>区域一<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shanghai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>区域二<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>活动时间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择日期<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.date1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-time-picker</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择时间<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.date2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-time-picker</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即创建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//表单案例的提交事件</span>      <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出表单内容到控制台</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dialogFormVisible<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭表案例的对话框</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//表单案例的数据双向绑定</span>        form<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          region<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          date1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          date2<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        gridData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        dialogTableVisible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        dialogFormVisible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制form表单案例的对话框</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1517 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1519 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><ol><li><p>制作类似格式的页面</p><p>即上面是标题，左侧栏是导航，右侧是数据展示区域</p></li><li><p>右侧需要展示搜索表单</p></li><li><p>右侧表格数据是动态展示的，数据来自于后台</p></li><li><p>实际示例效果如下图所示：</p></li></ol><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669373639681.png"></p><p>上面的页面可以分为，最上面，左边，右边三部分。</p><p>数据Mock地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list%EF%BC%88%E5%B7%B2%E7%BB%8F%E5%85%B3%E9%97%AD%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%EF%BC%89%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://yapi.smart-xwork.cn/mock/169327/emp/list（已经关闭，不能访问），浏览器打开，数据格式如下图所示：</a></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669373386131.png"> </p><p>通过观察数据，我们发现返回的json数据的data属性中，才是返回的人员列表信息</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>首先我们来到VS Code中，在views目录下创建 tlias&#x2F;EmpView.vue这个vue组件，并且编写组件的基本模板代码，其效果如下图所示：其中模板代码在之前的案例中已经提供，此处不再赘述</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669375414710.png"> </p><p>并且需要注意的是，我们默认访问的是App.vue这个组件，而我们App.vue这个组件之前是引入了element-view这个组件，此时我们需要修改成引入emp-view这个组件，并且注释掉之前的element-view这个组件，此时App.vue整体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- {{message}} --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;element-view>&lt;/element-view> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emp-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emp-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> EmpView  <span class="token string">'./views/tlias/EmpView.vue'</span><span class="token comment" spellcheck="true">// import ElementView  './views/Element/ElementView.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>EmpView <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello world"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，我们发现之前的element案例内容没了，从而呈现的是一片空白，那么接下来我们就可以继续开发了。</p><h4 id="整体布局"><a href="#整体布局" class="headerlink" title="整体布局"></a>整体布局</h4><p>此处肯定不需要我们自己去布局的，我们直接来到ElementUI的官网，找到布局组件，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669376226430.png"> </p><p>从官网提供的示例，我们发现由现成的满足我们需求的布局，所以我们只需要做一位代码搬运工即可。拷贝官方提供的如下代码直接粘贴到我们EmpView.vue组件的template模块中即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，此时呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669376527001.png"></p><p>因为我们没有拷贝官方提供的css样式，所以和官方案例的效果不太一样，但是我们需要的布局格式已经有，具体内容我们有自己的安排。首先我们需要调整整体布局的高度，所以我们需要在&lt;el-container&gt;上添加一些样式，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>到此我们布局功能就完成了</p><h4 id="顶部标题"><a href="#顶部标题" class="headerlink" title="顶部标题"></a>顶部标题</h4><p>对于顶部，我们需要实现的效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669376996028.png"></p><p>所以我们需要修改顶部的文本内容，并且提供背景色的css样式，具体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span></code></pre><p>此时浏览器打开，呈现效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669377134623.png"> </p><p>至此，我们的顶部标题就搞定了</p><p>此时整体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="左侧导航栏"><a href="#左侧导航栏" class="headerlink" title="左侧导航栏"></a>左侧导航栏</h4><p>接下来我们来实现左侧导航栏，那么还是在上述布局组件中提供的案例，找到左侧栏的案例，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669377371518.png"> </p><p>所以我们依然只需要搬运代码，然后做简单修改即可。官方提供的导航太多，我们不需要，所以我们需要做删减，在我们的左侧导航栏中粘贴如下代码即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>导航一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span></code></pre><p>删减前后对比图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669377954508.png"></p><p>然后我们打开浏览器，展示如下内容：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669378005930.png"></p><p>最后我们只需要替换文字内容即可。</p><p>此时整体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>系统信息管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="右侧核心内容"><a href="#右侧核心内容" class="headerlink" title="右侧核心内容"></a>右侧核心内容</h4><h5 id="表格编写"><a href="#表格编写" class="headerlink" title="表格编写"></a>表格编写</h5><p>右侧显示的是表单和表格，首先我们先来完成表格的制作，我们同样在官方直接找表格组件，也可以直接通过我们上述容器组件中提供的案例中找到表格相关的案例，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669378360527.png"> </p><p>然后找到表格的代码，复制到我们布局容器的主题区域，template模块代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span></code></pre><p>表格是有数据模型的绑定的，所以我们需要继续拷贝数据模型，代码如下：</p><pre class=" language-js"><code class="language-js">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>                address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span></code></pre><p>浏览器打开，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669378670102.png"> </p><p>但是这样的表格和数据并不是我们所需要的，所以，接下来我们需要修改表格，添加列，并且修改列名。代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>职位<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>最后操作时间<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>需要注意的是，我们列名的prop属性值得内容并不是乱写的，因为我们将来需要绑定后台的数据的，所以如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669379153961.png"></p><p>并且此时我们data中之前的数据模型就不可用了，所以需要清空数据，设置为空数组，代码 如下：</p><pre class=" language-js"><code class="language-js"> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>此时打开浏览器，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669379291238.png"> </p><p>此时整体页面代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>系统信息管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>     <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span>       <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>职位<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>最后操作时间<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h5 id="表单编写"><a href="#表单编写" class="headerlink" title="表单编写"></a>表单编写</h5><p>在表格的上方，还需要如下图所示的表单：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669380411564.png" alt="1669380411564"></p><p>所以接下来我们需要去ElementUI官网，在表单组件中找到与之类似的示例，加以修改从而打成我们希望的效果，官方示例如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669380607025.png"></p><p>所以我们直接拷贝代码主体区域的table组件的上方即可，并且我们需要修改数据绑定的的变量名，最终代码如下：</p><pre class=" language-html"><code class="language-html">      <span class="token comment" spellcheck="true">&lt;!-- 表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span></code></pre><p>代码修改前后对比图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669381155917.png"></p><p>既然我们表单使用v-model进行数据的双向绑定了，所以我们紧接着需要在data中定义searchForm的数据模型，代码如下：</p><pre class=" language-js"><code class="language-js">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>        searchForm<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            gender<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>而且，表单的提交按钮，绑定了onSubmit函数，所以我们还需要在methods中定义onSubmit函数，代码如下：</p><p>注意的是methods属性需要和data属性同级</p><pre><code> methods:&#123;        onSubmit:function()&#123;            console.log(this.searchForm);        &#125;&#125;</code></pre><p>浏览器打开如图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669381520004.png"></p><p>可以发现我们还缺少一个时间，所以可以从elementUI官网找到日期组件，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669381732234.png"></p><p>参考官方代码，然后在我们之前的表单中添加一个日期表单，具体代码如下：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>                        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.entrydate<span class="token punctuation">"</span></span>                        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daterange<span class="token punctuation">"</span></span>                        <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>至<span class="token punctuation">"</span></span>                        <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始日期<span class="token punctuation">"</span></span>                        <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>结束日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><p>我们添加了双向绑定，所以我们需要在data的searchForm中定义出来，需要注意的是这个日期包含2个值，所以我们定义为数组，代码如下：</p><pre><code> searchForm:&#123;            name:&#39;&#39;,            gender:&#39;&#39;,            entrydate:[]&#125;</code></pre><p>此时我们打开浏览器，填写表单，并且点击查询按钮，查看浏览器控制台，可以看到表单的内容，效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669382161813.png"></p><p>此时完整代码如下所示：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>系统信息管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表单 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>                                <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.entrydate<span class="token punctuation">"</span></span>                                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daterange<span class="token punctuation">"</span></span>                                <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>至<span class="token punctuation">"</span></span>                                <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始日期<span class="token punctuation">"</span></span>                                <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>结束日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表格 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>     <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span>       <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>职位<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>最后操作时间<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>        searchForm<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            gender<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            entrydate<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        onSubmit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h5 id="分页工具栏"><a href="#分页工具栏" class="headerlink" title="分页工具栏"></a>分页工具栏</h5><p>分页条我们之前做过，所以我们直接找到之前的案例，复制即可，代码如下：</p><p>其中template模块代码如下：</p><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- Pagination分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>               <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>               <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>               <span class="token attr-name">background</span>               <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sizes,prev, pager, next,jumper,total<span class="token punctuation">"</span></span>               <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span></code></pre><p>同时methods中需要声明2个函数，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>此时打开浏览器，效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669382952832.png"></p><p>此时整体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>系统信息管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表单 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>                                <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.entrydate<span class="token punctuation">"</span></span>                                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daterange<span class="token punctuation">"</span></span>                                <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>至<span class="token punctuation">"</span></span>                                <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始日期<span class="token punctuation">"</span></span>                                <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>结束日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表格 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>     <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span>       <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>职位<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>最后操作时间<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- Pagination分页 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>                        <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>                        <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>                        <span class="token attr-name">background</span>                        <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sizes,prev, pager, next,jumper,total<span class="token punctuation">"</span></span>                        <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>        searchForm<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            gender<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            entrydate<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        onSubmit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="异步数据加载"><a href="#异步数据加载" class="headerlink" title="异步数据加载"></a>异步数据加载</h4><h5 id="异步加载数据"><a href="#异步加载数据" class="headerlink" title="异步加载数据"></a>异步加载数据</h5><p>对于案例，我们只差最后的数据了，而数据的mock地址已经提供：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>我们最后要做的就是异步加载数据，所以我们需要使用axios发送ajax请求。</p><p>在vue项目中，对于axios的使用，分为如下2步：</p><ol><li>安装axios: npm install axios</li><li>需要使用axios时，导入axios:  import axios  ‘axios’</li></ol><p>接下来我们先来到项目的执行终端，然后输入命令，安装axios，具体操作如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669383450054.png"> </p><p>然后<strong>重启项目</strong>，来到我们的EmpView.vue组件页面，通过import命令导入axios，代码如下：</p><pre><code>import axios  &#39;axios&#39;;</code></pre><p>那么我们什么时候发送axios请求呢？页面加载完成，自动加载，所以可以使用之前的mounted钩子函数，并且我们需要将得到的员工数据要展示到表格，所以数据需要赋值给数据模型tableData，所以我们编写如下代码：</p><pre class=" language-js"><code class="language-js"> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resp<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token operator">=</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应数据赋值给数据模型</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>此时浏览器打开，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669383786402.png"> </p><p>但是很明显，性别和图片的内容显示不正确，所以我们需要修复。</p><h5 id="性别内容展示修复"><a href="#性别内容展示修复" class="headerlink" title="性别内容展示修复"></a>性别内容展示修复</h5><p>首先我们来到ElementUI提供的表格组件，找到如下示例：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669384072912.png"></p><p>我们仔细对比效果和功能实现代码，发现其中涉及2个非常重要的点：</p><ul><li>&lt;template&gt; : 用于自定义列的内容<ul><li>slot-scope: 通过属性的row获取当前行的数据</li></ul></li></ul><p>所以接下来，我们可以通过上述的标签自定义列的内容即可，修改性别列的内容代码如下：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         {{scope.row.gender==1?"男":"女"}}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>此时打开浏览器，效果如下图所示：性别一列的值修复成功</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669384537662.png"></p><h5 id="图片内容展示修复"><a href="#图片内容展示修复" class="headerlink" title="图片内容展示修复"></a>图片内容展示修复</h5><p>图片内容的修复和上述一致，需要借助&lt;template&gt;标签自定义列的内容，需要需要展示图片，直接借助&lt;img&gt;标签即可，并且需要设置图片的宽度和高度，所以直接修改图片列的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>     <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.image<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p>此时回到浏览器，效果如下图所示：图片展示修复成功</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/JavaWeb2023-Day4/image/1669384726550.png"> </p><p>此时整个案例完整，其完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tlias 智能学习辅助系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230px<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>系统信息管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                                                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表单 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>                                <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchForm.entrydate<span class="token punctuation">"</span></span>                                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>daterange<span class="token punctuation">"</span></span>                                <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>至<span class="token punctuation">"</span></span>                                <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始日期<span class="token punctuation">"</span></span>                                <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>结束日期<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 表格 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>     <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.image<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                {{scope.row.gender==1?"男":"女"}}                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span>       <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>职位<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entrydate<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>入职日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>最后操作时间<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>230<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- Pagination分页 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>                        <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>                        <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>                        <span class="token attr-name">background</span>                        <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sizes,prev, pager, next,jumper,total<span class="token punctuation">"</span></span>                        <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios  <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>        searchForm<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            gender<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            entrydate<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        onSubmit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`每页 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前页: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resp<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token operator">=</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="VUE路由"><a href="#VUE路由" class="headerlink" title="VUE路由"></a>VUE路由</h2><h3 id="路由介绍"><a href="#路由介绍" class="headerlink" title="路由介绍"></a>路由介绍</h3><p>将子代码&#x2F;vue-project(路由)&#x2F;vue-project&#x2F;src&#x2F;views&#x2F;tlias&#x2F;DeptView.vue拷贝到我们当前EmpView.vue同级，其结构如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669385311576.png"> </p><p>此时我们希望基于4.4案例中的功能，实现点击侧边栏的部门管理，显示部门管理的信息，点击员工管理，显示员工管理的信息，效果如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669385425617.png"></p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669385446343.png"></p><p>这就需要借助我们的vue的路由功能了。</p><p>前端路由：URL中的hash(#号之后的内容）与组件之间的对应关系，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669385782145.png"></p><p>当我们点击左侧导航栏时，浏览器的地址栏会发生变化，路由自动更新显示与url所对应的vue组件。</p><p>而我们vue官方提供了路由插件Vue Router,其主要组成如下：</p><ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li>&lt;router-link&gt;：请求链接组件，浏览器会解析成&lt;a&gt;</li><li>&lt;router-view&gt;：动态视图组件，用来渲染展示与路由路径对应的组件</li></ul><p>其工作原理如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669386261570.png"></p><p>首先VueRouter根据我们配置的url的hash片段和路由的组件关系去维护一张路由表;</p><p>然后我们页面提供一个&lt;router-link&gt;组件,用户点击，发出路由请求;</p><p>接着我们的VueRouter根据路由请求，在路由表中找到对应的vue组件；</p><p>最后VueRouter会切换&lt;router-view&gt;中的组件，从而进行视图的更新</p><h3 id="路由入门"><a href="#路由入门" class="headerlink" title="路由入门"></a>路由入门</h3><p>接下来我们来演示vue的路由功能。</p><p>首先我们需要先安装vue-router插件，可以通过如下命令</p><pre><code>npm install vue-router@3.5.1</code></pre><p><strong>但是我们不需要安装，因为当初我们再创建项目时，已经勾选了路由功能，已经安装好了。</strong></p><p>然后我们需要在<strong>src&#x2F;router&#x2F;index.js</strong>文件中定义路由表，根据其提供的模板代码进行修改，最终代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue  <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter  <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/emp'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//地址hash</span>    name<span class="token punctuation">:</span> <span class="token string">'emp'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tlias/EmpView.vue'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//对应的vue组件</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/dept'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'dept'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tlias/DeptView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><p>注意需要去掉没有引用的import模块。</p><p>在main.js中，我们已经引入了router功能，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669387519004.png"></p><p>路由基本信息配置好了，路由表已经被加载，此时我们还缺少2个东西，就是&lt;router-lin&gt;和&lt;router-view&gt;,所以我们需要修改2个页面（EmpView.vue和DeptView.vue）我们左侧栏的2个按钮为router-link,其代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>员工管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span></code></pre><p>然后我们还需要在内容展示区域即App.vue中定义route-view，作为组件的切换，其App.vue的完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- {{message}} --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;element-view>&lt;/element-view> --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;emp-view>&lt;/emp-view> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// import EmpView  './views/tlias/EmpView.vue'</span><span class="token comment" spellcheck="true">// import ElementView  './views/Element/ElementView.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello world"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>但是我们浏览器打开地址： <a href="http://localhost:7000/">http://localhost:7000/</a> ，发现一片空白，因为我们默认的路由路径是&#x2F;,但是路由配置中没有对应的关系，</p><p>所以我们需要在路由配置中&#x2F;对应的路由组件，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/emp'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'emp'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tlias/EmpView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/dept'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'dept'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/tlias/DeptView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span><span class="token string">'/emp'</span> <span class="token comment" spellcheck="true">//表示重定向到/emp即可</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>此时我们打开浏览器，访问<a href="http://localhost:7000/">http://localhost:7000</a> 发现直接访问的是emp的页面，并且能够进行切换了，其具体如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669388755027.png"> </p><p>到此我们的路由实现成功。</p><h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><p>我们的前端工程开发好了，但是我们需要发布，那么如何发布呢？主要分为2步：</p><ol><li>前端工程打包</li><li>通过nginx服务器发布前端工程</li></ol><h3 id="前端工程打包"><a href="#前端工程打包" class="headerlink" title="前端工程打包"></a>前端工程打包</h3><p>接下来我们先来对前端工程进行打包</p><p>我们直接通过VS Code的NPM脚本中提供的build按钮来完整，如下图所示，直接点击即可：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669389052906.png"></p><p>然后会在工程目录下生成一个dist目录，用于存放需要发布的前端资源，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669389147027.png"></p><h3 id="部署前端工程"><a href="#部署前端工程" class="headerlink" title="部署前端工程"></a>部署前端工程</h3><h4 id="nginx介绍"><a href="#nginx介绍" class="headerlink" title="nginx介绍"></a>nginx介绍</h4><p>nginx: Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。</p><p>niginx在windows中的安装是比较方便的，直接解压即可。所以我们直接将资料中的nginx-1.22.0.zip压缩文件拷贝到<strong>无中文的目录下</strong>，直接解压即可，如下图所示就是nginx的解压目录以及目录结构说明：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669389642057.png"></p><p><strong>很明显，我们如果要发布，直接将资源放入到html目录中。</strong></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>将我们之前打包的前端工程dist目录下得内容拷贝到nginx的html目录下，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669389950696.png"></p><p>然后我们通过双击nginx下得nginx.exe文件来启动nginx，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669390029156.png"></p><p>nginx服务器的端口号是80，所以启动成功之后，我们浏览器直接访问<a href="http://localhost/">http://localhost:80</a> 即可，其中80端口可以省略，其浏览器展示效果如图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669390177896.png"></p><p>到此，我们的前端工程发布成功。</p><p>PS: 如果80端口被占用，我们需要通过<strong>conf&#x2F;nginx.conf</strong>配置文件来修改端口号。如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day04/image/1669390312206.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day3</title>
      <link href="/2023/06/28/javaweb2023-day3/"/>
      <url>/2023/06/28/javaweb2023-day3/</url>
      
        <content type="html"><![CDATA[<h1 id="第三天VUE"><a href="#第三天VUE" class="headerlink" title="第三天VUE"></a>第三天VUE</h1><h2 id="概述和入门"><a href="#概述和入门" class="headerlink" title="概述和入门"></a>概述和入门</h2><p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul><p>如图所示就是MVVM开发思想的含义：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668857055058.png"></p><p>基于上述的MVVM思想，其中的Model我们可以通过Ajax来发起请求从后台获取;对于View部分，我们将来会学习一款ElementUI框架来替代HTML+CSS来更加方便的搭建View;而今天我们要学习的就是侧重于ViewModel部分开发的vue前端框架，用来替代JavaScript的DOM操作，让数据展示到视图的代码开发变得更加的简单。可以简单到什么程度呢？可以参考下图对比：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668858213508.png"></p><p>在更加复杂的dom操作中，vue只会变得更加的简单！在上述的代码中，我们看不到之前的DOM操作，因为vue全部帮我们封装好了。</p><p>Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>快速入门</p><p>第一步导入vue.js文件</p><p>第二步:然后编写&lt;script&gt;标签来引入vue.js文件，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>第三步：在js代码区域定义vue对象,代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">"Hello Vue"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。这个我们在后面就会用到</li></ul><p>第四步：在html区域编写视图，其中两个大括号是插值表达式，用来将vue对象中定义的model展示到页面上的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>浏览器打开效果如图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668859214102.png"></p><p>全部代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-快速入门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">"Hello Vue"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h3 id="1-v-bind-和v-model"><a href="#1-v-bind-和v-model" class="headerlink" title="1.v-bind 和v-model"></a>1.v-bind 和v-model</h3><p>我们需要给&lt;a&gt;标签的href属性赋值，并且值应该来自于vue对象的数据模型中的url变量。所以编写如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>在上述的代码中，v-bind指令是可以省略的，但是:不能省略，所以第二个超链接的代码编写如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>注意：html属性前面有:表示采用的vue的属性绑定！</strong></p></li><li><p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p><ul><li>vue对象的data属性中的数据变化，视图展示会一起变化</li><li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li><li><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></li></ul><p>data属性中数据变化，我们知道可以通过赋值来改变，但是视图数据为什么会发生变化呢？<strong>只有表单项标签！所以双向绑定一定是使用在表单项标签上的</strong>。编写如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，我们修改表单项标签，发现vue对象data中的数据也发生了变化，如下图所示：</p></li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668860425429.png"></p><p>代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-指令-v-bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>           url<span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2-v-on"><a href="#2-v-on" class="headerlink" title="2.v-on"></a>2.v-on</h3><p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p><ul><li><p>v-on语法给标签的事件绑定的函数，必须是vue对象中声明的函数</p></li><li><p>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</p><p>例如：在js中，事件绑定demo函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>vue中，事件绑定demo函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><p>接下来我们通过代码演示。</p><p>我们需要在vue对象的methods属性中定义事件绑定时需要的handle()函数，代码如下：</p><pre class=" language-js"><code class="language-js"> methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你点我了一下..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们给第一个按钮，通过v-on指令绑定单击事件，代码如下：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我一下<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>同样，v-on也存在简写方式，即v-on: 可以替换成@，所以第二个按钮绑定单击事件的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我一下<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-指令-v-on<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我一下<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我一下<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你点我了一下..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-v-if-和-v-show"><a href="#3-v-if-和-v-show" class="headerlink" title="3.v-if 和 v-show"></a>3.v-if 和 v-show</h3><p>代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>经判定,为:        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age &lt;<span class="token punctuation">=</span> 35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年轻人(35及以下)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age <span class="token punctuation">></span> 35 &amp;&amp; age &lt; 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中年人(35-60)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>老年人(60及以上)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>经判定,为:        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age &lt;<span class="token punctuation">=</span> 35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年轻人(35及以下)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age <span class="token punctuation">></span> 35 &amp;&amp; age &lt; 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中年人(35-60)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age <span class="token punctuation">></span><span class="token punctuation">=</span> 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>老年人(60及以上)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668864558419.png"></p><p>可以发现，浏览器呈现的效果是一样的，但是浏览器中html源码不一样。v-if指令，不满足条件的标签代码直接没了，而v-show指令中，不满足条件的代码依然存在，只是添加了css样式来控制标签不去显示。</p><h3 id="4-v-for"><a href="#4-v-for" class="headerlink" title="4.v-for"></a>4.v-for</h3><p>直接上代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-指令-v-for<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>           addrs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后分别编写2种遍历语法，来遍历数组，展示数据，代码如下：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr in addrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{addr}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(addr,index) in addrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{index + 1}} : {{addr}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>浏览器打开，呈现如下效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668866805981.png"></p><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668868100828.png"></p><ul><li><p>如上图所示，我们提供好了数据模型，users是数组集合，提供了多个用户信息。然后我们需要将数据以表格的形式，展示到页面上，其中，性别需要转换成中文男女，等级需要将分数数值转换成对应的等级。</p></li><li><p>分析：</p><p>首先我们肯定需要遍历数组的，所以需要使用v-for标签；然后我们每一条数据对应一行，所以v-for需要添加在tr标签上；其次我们需要将编号，所以需要使用索引的遍历语法；然后我们要将数据展示到表格的单元格中，所以我们需要使用双大括号插值表达式；最后，我们需要转换内容，所以我们需要使用v-if指令，进行条件判断和内容的转换</p></li><li><p>步骤：</p><ul><li>使用v-for的带索引方式添加到表格的&lt;tr&gt;标签上</li><li>使用双大括号插值表达式展示内容到单元格</li><li>使用索引+1来作为编号</li><li>使用v-if来判断，改变性别和等级这2列的值</li></ul></li></ul><p>完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-指令-案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>等级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(user,index) in users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index + 1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.score}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.score <span class="token punctuation">></span><span class="token punctuation">=</span> 85<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.score <span class="token punctuation">></span><span class="token punctuation">=</span> 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>不及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                score<span class="token punctuation">:</span> <span class="token number">78</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                score<span class="token punctuation">:</span> <span class="token number">86</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                score<span class="token punctuation">:</span> <span class="token number">90</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                score<span class="token punctuation">:</span> <span class="token number">52</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p>下图是 Vue 官网提供的从创建 Vue 到效果 Vue 对象的整个过程及各个阶段对应的钩子函数：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668867134683.png"></p><p>其中我们需要重点关注的是**mounted,**其他的我们了解即可。</p><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p><p>我们编写mounted声明周期的钩子函数，与methods同级.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义Vue对象</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//vue接管区域</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>        mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"vue挂载完成,发送请求到服务端"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>浏览器打开，运行结果如下：我们发现，自动打印了这句话，因为页面加载完成，vue对象创建并且完成了挂在，此时自动触发mounted所绑定的钩子函数，然后自动执行，弹框。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668867458156.png"></p><h2 id="Ajax-Axios"><a href="#Ajax-Axios" class="headerlink" title="Ajax-Axios"></a>Ajax-Axios</h2><p>我们前端应该如何从后台获取数据呢？Ajax技术</p><p>Ajax: 全称Asynchronous JavaScript And XML，异步的JavaScript和XML。其作用有如下2点：</p><ul><li>与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul><p>原生的Ajax请求的代码编写起来还是比较繁琐的，所以接下来我们学习一门更加简单的发送Ajax请求的技术Axios 。Axios是对原生的AJAX进行封装，简化书写。Axios官网是：<code>https://www.axios-http.cn</code></p><h3 id="Axios的基本使用"><a href="#Axios的基本使用" class="headerlink" title="Axios的基本使用"></a>Axios的基本使用</h3><p>Axios的使用比较简单，主要分为2步：</p><ul><li><p>引入Axios文件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/axios-0.18.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种，如下</p><ul><li><p>发送 get 请求</p><pre class=" language-js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">"http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>发送 post 请求</p><pre class=" language-js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">"http://localhost:8080/ajax-demo1/aJAXDemo1"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token string">"username=zhangsan"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li>method属性：用来设置请求方式的。取值为 get 或者 post。</li><li>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</li><li>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</li></ul><p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p></li></ul><h3 id="Axios快速入门"><a href="#Axios快速入门" class="headerlink" title="Axios快速入门"></a>Axios快速入门</h3><p>先导入需要的包</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1669108792555.png"></p><p>直接上代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Ajax-Axios<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/axios-0.18.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取数据GET<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>删除数据POST<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过axios发送异步请求-get</span>        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 通过axios发送异步请求-post</span>        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/deleteById"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token string">"id=1"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h3><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url [, config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url [, config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url [, data[, config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url [, data[, config]])</td><td>发送put请求</td></tr></tbody></table><p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>post请求改写成如下：</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/deleteById"</span><span class="token punctuation">,</span><span class="token string">"id=1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>需求：基于Vue及Axios完成数据的动态加载展示，如下图所示</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1669139756551.png"></p><ul><li><p>我们需要使用Ajax请求获取后台的数据。但是Ajax请求什么时候发送呢？页面的数据应该是页面加载完成，自动发送请求，展示数据，所以我们需要借助vue的mounted钩子函数。那么拿到数据了，我们该怎么将数据显示表格中呢？这里就得借助v-for指令来遍历数据，展示数据。</p></li><li><p>步骤：</p><ol><li>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</li><li>我们需要在vue的mounted钩子函数中发送ajax请求，获取数据</li><li>拿到数据，数据需要绑定给vue的data属性</li><li>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据</li></ol></li><li><p>代码实现</p></li><li><ol><li><p>在vue的mounted钩子函数，编写Ajax请求，请求数据，代码如下：</p><pre class=" language-js"><code class="language-js">mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//发送异步请求,加载数据</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>ajax请求的数据我们应该绑定给vue的data属性，之后才能进行数据绑定到视图；并且浏览器打开后台地址，数据返回格式如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1669141982809.png" alt="1669141982809"> </p><p>因为服务器响应的json中的data属性才是我们需要展示的信息，所以我们应该将员工列表信息赋值给vue的data属性，代码如下：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//发送异步请求,加载数据</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>emps <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>其中，data中生命emps变量，代码如下：</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    emps<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据，其中需要注意的是图片的值，需要使用vue的属性绑定，男女的展示需要使用条件判断，其代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(emp,index) in emps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index + 1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.image<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.job}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.entrydate}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.updatetime}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><p>完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Ajax-Axios-案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/axios-0.18.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>职位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>入职日期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>最后操作时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(emp,index) in emps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index + 1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.image<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.job}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.entrydate}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{emp.updatetime}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         emps<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//发送异步请求,加载数据</span>          axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://yapi.smart-xwork.cn/mock/169327/emp/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>emps <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h3 id="创建VUE项目"><a href="#创建VUE项目" class="headerlink" title="创建VUE项目"></a>创建VUE项目</h3><p>首先，我们再桌面创建vue文件夹，然后双击进入文件夹，来到地址目录，输入cmd，然后进入到vue文件夹的cmd窗口界面，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669294790640.png" alt="1669294790640"></p><p>然后进入如下界面：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669294846601.png" alt="1669294846601"></p><p>然后再当前目录下，直接输入命令<code>vue ui</code>进入到vue的图形化界面，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669294939067.png" alt="1669294939067"> </p><p>然后我门选择创建按钮，在vue文件夹下创建项目，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669295020228.png" alt="1669295020228"></p><p>然后来到如下界面，进行vue项目的创建</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669301661722.png" alt="1669301661722"></p><p>然后预设模板选择手动，如下图所示：</p><p> <img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669301737491.png" alt="1669301737491"> </p><p>然后再功能页面开启路由功能，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669301859936.png" alt="1669301859936"> </p><p>然后再配置页面选择语言版本和语法检查规范，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669301965095.png" alt="1669301965095"> </p><p>然后创建项目，进入如下界面：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669302091090.png" alt="1669302091090"></p><p>最后我们只需要等待片刻，即可进入到创建创建成功的界面，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669302171975.png" alt="1669302171975"> </p><p> 到此，vue项目创建结束</p><h3 id="VUE项目目录结构介绍"><a href="#VUE项目目录结构介绍" class="headerlink" title="VUE项目目录结构介绍"></a>VUE项目目录结构介绍</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1669302973198.png"></p><h3 id="运行VUE项目"><a href="#运行VUE项目" class="headerlink" title="运行VUE项目"></a>运行VUE项目</h3><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li><p>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669303687468.png" alt="1669303687468"></p><p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669303846100.png" alt="1669303846100"> </p><p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669304009602.png" alt="1669304009602"></p><p>其实此时访问的是 <strong>src&#x2F;App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669304267724.png" alt="1669304267724"></p><p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669304385826.png" alt="1669304385826"></p><p>这就是我们vue项目的热更新功能 </p><p>对于8080端口，经常被占用，所以我们可以去修改默认的8080端口。我们修改vue.config.js文件的内容，添加如下代码：</p><pre class=" language-json"><code class="language-json">devServer<span class="token operator">:</span><span class="token punctuation">{</span>    port<span class="token operator">:</span><span class="token number">7000</span><span class="token punctuation">}</span></code></pre><p>如下图所示，然后我们关闭服务器，并且重新启动，</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669305444633.png" alt="1669305444633"></p></li></ul><p>​       重新启动如下图所示：</p><p>​<img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669305570022.png" alt="1669305570022"> </p><p>​端口更改成功，可以通过浏览器访问7000端口来访问我们之前的项目</p><ul><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669304694076.png" alt="1669304694076"></p></li></ul><p>补充：NPM脚本窗口调试出来</p><p>第一步：通过<strong>设置&#x2F;用户设置&#x2F;扩展&#x2F;MPM</strong>更改NPM默认配置，如下图所示</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669304930336.png" alt="1669304930336"></p><p>然后重启VS Code，并且<strong>双击打开package.json文件</strong>，然后点击<strong>资源管理器处的3个小点</strong>，<strong>勾选npm脚本选项</strong>，如图所示</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669305068434.png" alt="1669305068434"> </p><p>然后就能都显示NPM脚本小窗口了。</p><h3 id="VUE项目开发流程"><a href="#VUE项目开发流程" class="headerlink" title="VUE项目开发流程"></a>VUE项目开发流程</h3><p>那么我们访问的首页是index.html，但是我们找到public&#x2F;index.html文件，打开之后发现，里面没有什么代码，但是能够呈现内容丰富的首页：如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669308098856.png" alt="1669308098856"> </p><p>我们自习观察发现，index.html的代码很简洁，但是浏览器所呈现的index.html内容却很丰富，代码和内容不匹配，所以vue是如何做到的呢？接下来我们学习一下vue项目的开发流程。</p><p>对于vue项目，index.html文件默认是引入了入口函数main.js文件，我们找到<strong>src&#x2F;main.js</strong>文件，其代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>来到<strong>public&#x2F;index.html</strong>中，我们<strong>删除div的id&#x3D;app属性</strong>，打开浏览器，发现之前访问的首页一片空白，如下图所示，这样就证明了，我们main.js中通过代码挂在到index.html的id&#x3D;app的标签区域的。</p><p>此时我们知道了vue创建的dom对象挂在到id&#x3D;app的标签区域，但是我们还是没有解决最开始的问题：首页内容如何呈现的？这就涉及到render中的App了，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669313364004.png" alt="1669313364004"> </p><p>那么这个App对象怎么回事呢，我们打开App.vue,注意的是.vue结尾的都是vue组件。而vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><p>如下图所示就是一个vue组件的小案例：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669313699186.png" alt="1669313699186"></p><p>此时我们可以打开App.vue，观察App.vue的代码，其中可以发现，App.vue组件的template部分内容，和我们浏览器访问的首页内容是一致的，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669313894258.png" alt="1669313894258">)</p><p>接下来我们可以简化模板部分内容，添加script部分的数据模型，删除css样式，完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{message}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello world"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>保存直接，回到浏览器，我们发现首页展示效果发生了变化，如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/day03/image/1669314115641.png" alt="1669314115641"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day2</title>
      <link href="/2023/06/27/javaweb2023-day2/"/>
      <url>/2023/06/27/javaweb2023-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="第二天JS"><a href="#第二天JS" class="headerlink" title="第二天JS"></a>第二天JS</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>.js代码也是书写在html中的，那么html中如何引入js代码呢？主要通过下面的2种引入方式：</p><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p>例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript"</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><p>例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>注意：demo.js中只有js代码，没有&lt;script&gt;标签</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS-引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 内部脚本 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script>        alert('Hello JS');    &lt;/script> --></span>    <span class="token comment" spellcheck="true">&lt;!-- 外部脚本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们需要借助js中3钟输出语句，来演示书写语法</p><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><p>js中主要通过如下3个关键字来声明变量的：</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><p>在js中声明变量还需要注意如下几点：</p><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><p>var声明的变量可以接受任何数据类型的值。并且var声明的变量的作用于是全局的.可以重复声明</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>     <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>let</strong>关键字来定义变量，它的用法类似于 var，但是所声明的变量，只在 let关键字所在的代码块内有效，且不允许重复声明。</p><p>JS中的数据类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><p>使用typeof函数可以返回变量的数据类型 <code>alert(typeof 3); //number</code></p><ul><li>=&#x3D;：只比较值是否相等，不区分数据类型，哪怕类型不一致，&#x3D;&#x3D;也会自动转换类型进行值得比较</li><li>&#x3D;&#x3D;&#x3D;：不光比较值，还要比较类型，如果类型不一致，直接返回false</li></ul><p>类型转换</p><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12A45"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//12</span></code></pre><p>0,null,undefined,””,NaN理解成false,反之理解成true。</p><p>函数定义的两种方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义函数-1</span>    <span class="token comment" spellcheck="true">// function add(a,b){</span>    <span class="token comment" spellcheck="true">//    return  a + b;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//定义函数-2</span>    <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//函数调用</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><p>Array对象时用来定义数组的。常用语法格式有如下2种：</p><p>方式1：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>元素列表<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,2,3,4 是存储在数组中的数据（元素）</span></code></pre><p>方式2：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token punctuation">[</span> 元素列表 <span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,2,3,4 是存储在数组中的数据（元素）</span></code></pre><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//特点: 长度可变 类型可变</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出效果：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668590895662.png"></p><p>属性和方法。</p><p>属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><ul><li><p>length属性：</p><p>length属性可以用来获取数组的长度，所以我们可以借助这个属性，来遍历数组中的元素，添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>forEach()函数</p><p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//e是形参，接受的是数组遍历时的值</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当然了，在ES6中，引入箭头函数的写法，语法类似java中lambda表达式，修改上述代码如下：</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre></li></ul><p>注意的是，没有元素的内容是不会输出的，因为forEach只会遍历有值的元素</p><ul><li><p>push()函数</p><p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//push: 添加元素到数组末尾</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>splice()函数</p><p>splice()函数用来数组中的元素，函数中填入2个参数。</p><p>参数1：表示从哪个索引位置删除</p><p>参数2：表示删除元素的个数</p><p>如下代码表示：从索引2的位置开始删，删除2个元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//splice: 删除元素</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>String对象</p><p>方式一：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方式二：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Hello String'</span><span class="token punctuation">;</span></code></pre><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><p>substring()函数用于截取字符串的，函数有2个参数。</p><p>参数1：表示从那个索引位置开始截取。包含</p><p>参数2：表示到那个索引位置结束。不包含</p><p>JSON对象</p><p>首先介绍一下自定义对象。</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// eat: function(){</span>        <span class="token comment" spellcheck="true">//      console.log("用膳~");</span>        <span class="token comment" spellcheck="true">//  }</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用膳~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"key"</span><span class="token punctuation">:</span>value<span class="token punctuation">,</span>    <span class="token string">"key"</span><span class="token punctuation">:</span>value<span class="token punctuation">,</span>    <span class="token string">"key"</span><span class="token punctuation">:</span>value<span class="token punctuation">}</span></code></pre><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型</strong>。</p><p>jsonstr是一个json字符串，不是json对象。可以通过JSON.parse()转换。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// //定义json</span>    <span class="token keyword">var</span> jsonstr <span class="token operator">=</span> <span class="token string">'{"name":"Tom", "age":18, "addr":["北京","上海","西安"]}'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//alert(jsonstr.name);  输出undefined</span>    <span class="token comment" spellcheck="true">// //json字符串--js对象</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//alert(obj.name);</span>    <span class="token comment" spellcheck="true">// //js对象--json字符串</span>    <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BOM对象-主要是和浏览器相关的几个对象"><a href="#BOM对象-主要是和浏览器相关的几个对象" class="headerlink" title="BOM对象(主要是和浏览器相关的几个对象)"></a>BOM对象(主要是和浏览器相关的几个对象)</h3><p>BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。</p><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><p>上述5个对象与浏览器各组成对应的关系如下图所示：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/image-20210815194911914.png"></p><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.例如：我们之前学习的alert()函数其实是属于window对象的,其完整的代码如下：</p><pre><code>window.alert(&#39;hello&#39;);</code></pre><p>其可以省略window.  所以可以简写成</p><pre><code>alert(&#39;hello&#39;)</code></pre><p>所以对于window对象的属性和方法，我们都是采用简写的方式。window提供了很多属性和方法，下表列出了常用属性和方法</p><p>window对象提供了获取其他BOM对象的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>也就是说我们要使用location对象，只需要通过代码<code>window.location</code>或者简写<code>location</code>即可使用</p><p>window也提供了一些常用的函数，如下表格所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><ul><li><p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p><p>fn:函数，需要周期性执行的功能代码</p><p>毫秒值：间隔时间</p><p>注释掉之前的代码，添加代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定时器 - setInterval -- 周期性的执行某一个函数</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     i<span class="token operator">++</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器执行了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>刷新页面，浏览器每个一段时间都会在控制台输出，结果如下：</p><p><img src="D:/Java/heima/JavaWeb2023/资料/day02-JavaScript-Vue/讲义/assets/1668795435780.png" alt="1668795435780"> </p></li><li><p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p><p>注释掉之前的代码，添加代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定时器 - setTimeout -- 延迟指定时间执行一次 </span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"JS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器打开，3s后弹框，关闭弹框，发现再也不会弹框了。</p></li></ul><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息，添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取浏览器地址栏信息</span><span class="token function">alert</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置浏览器地址栏信息</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://www.itcast.cn"</span><span class="token punctuation">;</span></code></pre><h3 id="DOM对象-JavaScript中将html的每一个标签都封装成一个对象"><a href="#DOM对象-JavaScript中将html的每一个标签都封装成一个对象" class="headerlink" title="DOM对象(JavaScript中将html的每一个标签都封装成一个对象)"></a>DOM对象(JavaScript中将html的每一个标签都封装成一个对象)</h3><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p><p>所以学习DOM,主要的核心就是学习如下2点：</p><ul><li>如何获取DOM中的元素对象（Element对象 ，也就是标签）</li><li>如何操作Element对象的属性,也就是标签的属性。</li></ul><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><p>示例代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS-对象-DOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>传智教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑马程序员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 电影    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 旅游    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//1. 获取Element元素</span>    <span class="token comment" spellcheck="true">//1.1 获取元素-根据ID获取</span>    <span class="token comment" spellcheck="true">// var img = document.getElementById('h1');</span>    <span class="token comment" spellcheck="true">// alert(img);</span>    <span class="token comment" spellcheck="true">//1.2 获取元素-根据标签获取 - div</span>    <span class="token comment" spellcheck="true">// var divs = document.getElementsByTagName('div');</span>    <span class="token comment" spellcheck="true">// for (let i = 0; i &lt; divs.length; i++) {</span>    <span class="token comment" spellcheck="true">//     alert(divs[i]);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//1.3 获取元素-根据name属性获取</span>    <span class="token comment" spellcheck="true">// var ins = document.getElementsByName('hobby');</span>    <span class="token comment" spellcheck="true">// for (let i = 0; i &lt; ins.length; i++) {</span>    <span class="token comment" spellcheck="true">//     alert(ins[i]);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//1.4 获取元素-根据class属性获取</span>    <span class="token comment" spellcheck="true">// var divs = document.getElementsByClassName('cls');</span>    <span class="token comment" spellcheck="true">// for (let i = 0; i &lt; divs.length; i++) {</span>    <span class="token comment" spellcheck="true">//     alert(divs[i]);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//2. 查询参考手册, 属性、方法</span>    <span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> div1 <span class="token operator">=</span> divs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        div1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"传智教育666"</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668800646200.png"></p><p>代码实现：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS-对象-DOM-案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>传智教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑马程序员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 电影    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 旅游    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//1. 点亮灯泡 : src 属性值</span>    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 将所有div标签的内容后面加上: very good (红色字体) -- &lt;font color='red'>&lt;/font></span>    <span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> divs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> div <span class="token operator">=</span> divs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;font color='red'>very good&lt;/font>"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// //3. 使所有的复选框呈现选中状态</span>    <span class="token keyword">var</span> ins <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> check <span class="token operator">=</span> ins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        check<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选中</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h2><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p><ul><li>按钮被点击</li><li>鼠标移到元素上</li><li>输入框失去焦点</li><li>……..</li></ul><p>而我们可以给这些事件绑定函数，当事件触发时，可以自动的完成对应的功能。这就是事件监听。</p><p>JavaScript对于事件的绑定提供了2种方式：</p><ul><li><p>方式1：通过html标签中的事件属性进行绑定</p><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p></li><li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。此时我们再次添加一个按钮</p></li></ul><p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS-事件-事件绑定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>事件绑定1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>事件绑定2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮1被点击了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮2被点击了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><p>上面案例中使用到了 <code>onclick</code> 事件属性，那都有哪些事件属性供我们使用呢？下面就给大家列举一些比较常用的事件属性</p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h3 id="升级案例"><a href="#升级案例" class="headerlink" title="升级案例"></a>升级案例</h3><p>需求如下3个：</p><ol><li>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</li><li>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</li><li>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</li></ol><p>效果如图所示</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/1668806049390.png"></p><h4 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h4><ul><li><p>需求：</p><p>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</p></li><li><p>分析：</p><p>点击按钮的时候触发，所以我们需要绑定单击事件。不管是点亮还是熄灭，都是图片的变化，所以我们需要修改图片。但是修改图片我们还需要先获取标签图片标签对象。</p></li><li><p>步骤：</p><ul><li>首先给点亮按钮和熄灭按钮都绑定单击事件。分别绑定函数on()和off（）</li><li>然后在js中定义on()和off()函数</li><li>on()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换点亮的图片</li><li>off()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换熄灭的图片</li></ul></li><li><p>代码实现：</p><p>事件绑定</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点亮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>熄灭<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>on()和off()函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 点击 "点亮" 按钮, 点亮灯泡; 点击 "熄灭" 按钮, 熄灭灯泡; -- onclick</span><span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a. 获取img元素对象</span>    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 设置src属性</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a. 获取img元素对象</span>    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 设置src属性</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/off.gif"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h4><ul><li><p>需求：</p><p>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</p></li><li><p>分析：</p><p>聚焦和失焦的时候完成功能，所以我们需要给input标签绑定onfocus和onblur事件；我们要切换大小写，那么我们可定要获取原本输入框的内容，通过查询资料，需要使用input标签对象的value属性，然后进行大小写切换；切换完成我们需要重新填入，所以还是通过value属性来设置input标签输入框的内容</p></li><li><p>步骤:</p><ul><li>给input标签的onfocus和onblur事件分别绑定lower()和upper()函数</li><li>然后在js中定义lower()和upper()函数</li><li>对于lower()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toLowerCase()函数来进行小写转换</li><li>对于upper()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toupperCase()函数来进行大写转换</li></ul></li><li><p>代码实现：、</p><p>事件绑定：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ITCAST<span class="token punctuation">"</span></span> <span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lower()<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upper()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>lower()和upper()函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span><span class="token keyword">function</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//小写</span>    <span class="token comment" spellcheck="true">//a. 获取输入框元素对象</span>    <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 将值转为小写</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//大写</span>    <span class="token comment" spellcheck="true">//a. 获取输入框元素对象</span>    <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 将值转为大写</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h4><ul><li><p>需求：</p><p>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</p></li><li><p>分析：</p><p>点击按钮完成功能，所以我们需要给2个按钮绑定单击事件；我们需要设置所有复选框的状态，通过我们之前的案例，我们知道，我们需要获取所有的复选框，然后遍历，可以通过设置checked属性为true，来设置复选框为选中；那么反之，设置checked属性为false，来设置复选框为未选中。</p></li><li><p>步骤：</p><ul><li>给全选和反选按钮绑定单击事件，分别绑定函数checkAll()和reverse()</li><li>在js中定义checkAll()和reverse()函数</li><li>对于checkAll()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为true即可</li><li>对于reverse()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为false即可</li></ul></li><li><p>代码实现：</p><p>事件绑定：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkAll()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>反选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reverse()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>checkAll()和reverse()函数</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//3. 点击 "全选" 按钮使所有的复选框呈现选中状态 ; 点击 "反选" 按钮使所有的复选框呈现取消勾选的状态 ; </span><span class="token keyword">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a. 获取所有复选框元素对象</span>    <span class="token keyword">var</span> hobbys <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 设置选中状态</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hobbys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> hobbys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a. 获取所有复选框元素对象</span>    <span class="token keyword">var</span> hobbys <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b. 设置未选中状态</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hobbys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> hobbys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS-事件-案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点亮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>熄灭<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ITCAST<span class="token punctuation">"</span></span> <span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lower()<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upper()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 电影    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 旅游    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 游戏    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkAll()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>反选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reverse()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//1. 点击 "点亮" 按钮, 点亮灯泡; 点击 "熄灭" 按钮, 熄灭灯泡; -- onclick</span>    <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//a. 获取img元素对象</span>        <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 设置src属性</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//a. 获取img元素对象</span>        <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 设置src属性</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/off.gif"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span>    <span class="token keyword">function</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//小写</span>        <span class="token comment" spellcheck="true">//a. 获取输入框元素对象</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 将值转为小写</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//大写</span>        <span class="token comment" spellcheck="true">//a. 获取输入框元素对象</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 将值转为大写</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3. 点击 "全选" 按钮使所有的复选框呈现选中状态 ; 点击 "反选" 按钮使所有的复选框呈现取消勾选的状态 ; -- onclick</span>    <span class="token keyword">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//a. 获取所有复选框元素对象</span>        <span class="token keyword">var</span> hobbys <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 设置选中状态</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hobbys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> element <span class="token operator">=</span> hobbys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//a. 获取所有复选框元素对象</span>        <span class="token keyword">var</span> hobbys <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b. 设置未选中状态</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hobbys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> element <span class="token operator">=</span> hobbys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2023-Day1</title>
      <link href="/2023/06/26/javaweb2023-day1/"/>
      <url>/2023/06/26/javaweb2023-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="第一天HTMLCSS"><a href="#第一天HTMLCSS" class="headerlink" title="第一天HTMLCSS"></a>第一天HTMLCSS</h1><h2 id="标题排版"><a href="#标题排版" class="headerlink" title="标题排版"></a>标题排版</h2><p>首先html有固定的基本结构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML 快速入门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其中&lt;html&gt;是根标签，&lt;head&gt;和&lt;body&gt;是子标签，&lt;head&gt;中的字标签&lt;title&gt;是用来定义网页的标题的，里面定义的内容会显示在浏览器网页的标题位置。</p><p>而 &lt;body&gt; 中编写的内容，就网页中显示的核心内容。</p><p>图片标签img</p><p>A. 图片标签: <img></p><p>B. 常见属性:<br>    src: 指定图像的url (可以指定 绝对路径 , 也可以指定 相对路径)<br>    width: 图像的宽度 (像素 &#x2F; 百分比 , 相对于父元素的百分比)<br>    height: 图像的高度 (像素 &#x2F; 百分比 , 相对于父元素的百分比)</p><p>标题标签 h 系列， 标题标签: <h1> - <h6></p><p> 水平分页线标签 <hr></p><p><strong>html 文件创建好之后，在其中输入 ！，然后直接回车，就可以生成 HTML 的基础结构标签</strong></p><h2 id="标题样式"><a href="#标题样式" class="headerlink" title="标题样式"></a>标题样式</h2><h5 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h5><p>具体有3种引入方式，语法如下表格所示：</p><table><thead><tr><th>名称</th><th>语法描述</th><th>示例</th></tr></thead><tbody><tr><td>行内样式</td><td>在标签内使用style属性，属性值是css属性键值对</td><td>&lt;h1 style&#x3D;”xxx:xxx;”&gt;中国新闻网&lt;&#x2F;h1&gt;</td></tr><tr><td>内嵌样式</td><td>定义&lt;style&gt;标签，在标签内部定义css样式</td><td>&lt;style&gt; h1 {…} &lt;&#x2F;style&gt;</td></tr><tr><td>外联样式</td><td>定义&lt;link&gt;标签，通过href属性引入外部css文件</td><td>&lt;link rel&#x3D;”stylesheet” href&#x3D;”css&#x2F;news.css”&gt;</td></tr></tbody></table><p>对于上述3种引入方式，企业开发的使用情况如下：</p><ol><li>内联样式会出现大量的代码冗余，不方便后期的维护，所以不常用。</li><li>内部样式，通过定义css选择器，让样式作用于当前页面的指定的标签上。</li><li>外部样式，html和css实现了完全的分离，企业开发常用方式。</li></ol><h5 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h5><p>在前端程序开发中，颜色的表示方式常见的有如下三种：</p><table><thead><tr><th><strong>表示方式</strong></th><th><strong>表示含义</strong></th><th><strong>取值</strong></th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><p>实例：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式二: 内嵌样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* color: red; */</span>            <span class="token comment" spellcheck="true">/* color: rgb(0, 0, 255); */</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4D4F53</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式三: 外联样式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;link rel="stylesheet" href="css/news.css"> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/news_logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 新浪政务 > 正文    <span class="token comment" spellcheck="true">&lt;!-- 方式一: 行内样式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;h1 style="color: red;">焦点访谈：中国底气 新思想夯实大国粮仓&lt;/h1> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    2023年03月02日 21:50 央视网    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其中对应的news.css为</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这边引出CSS选择器</p><p><strong>选择器通用语法如下</strong>：</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器名   </span><span class="token punctuation">{</span>    css样式名：css样式值<span class="token punctuation">;</span>    css样式名：css样式值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们需要学习的3种选择器是元素选择器，id选择器，class选择器，语法以及作用如下：</p><p><strong>1.元素（标签）选择器：</strong> </p><ul><li>选择器的名字必须是标签的名字</li><li>作用：选择器中的样式会作用于所有同名的标签上</li></ul><pre><code>元素名称 &#123;    css样式名:css样式值；&#125;</code></pre><p>例子如下：</p><pre class=" language-css"><code class="language-css"> <span class="token selector">div</span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>2.id选择器:</strong></p><ul><li>选择器的名字前面需要加上#</li><li>作用：选择器中的样式会作用于指定id的标签上，而且有且只有一个标签（由于id是唯一的）</li></ul><pre><code>#id属性值 &#123;    css样式名:css样式值；&#125;</code></pre><p>例子如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#did</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3.类选择器：</strong></p><ul><li>选择器的名字前面需要加上 .</li><li>作用：选择器中的样式会作用于所有class的属性值和该名字一样的标签上，可以是多个</li></ul><pre><code>.class属性值 &#123;    css样式名:css样式值；&#125;</code></pre><p>例子如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.cls</span></span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>实例：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4D4F53</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 元素选择器 */</span>        <span class="token comment" spellcheck="true">/* span {            color: red;        } */</span>        <span class="token comment" spellcheck="true">/* 类选择器 */</span>        <span class="token comment" spellcheck="true">/* .cls {            color: green;        } */</span>                <span class="token comment" spellcheck="true">/* ID选择器 */</span>        <span class="token selector"><span class="token id">#time</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#968D92</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置字体大小 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/news_logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 新浪政务 > 正文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023年03月02日 21:50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在设置字体的大小时，font-size单位px不能省略，否则不生效。</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul><li>标签: &lt;a href&#x3D;”…” target&#x3D;”…”&gt;央视网</a></li><li>属性:<ul><li>href: 指定资源访问的url</li><li>target: 指定在何处打开资源链接<ul><li>_self: 默认值，在当前页面打开</li><li>_blank: 在空白页面打开</li></ul></li></ul></li></ul><p>具体实现</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4D4F53</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector"><span class="token id">#time</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#968D92</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置字体大小 */</span>        <span class="token punctuation">}</span>        <span class="token selector">a </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置文本为一个标准的文本 , 去除掉 超链接 下面默认的下划线 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/news_logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://gov.sina.com.cn/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新浪政务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  > 正文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023年03月02日 21:50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="正文实现-页面布局"><a href="#正文实现-页面布局" class="headerlink" title="正文实现+页面布局"></a>正文实现+页面布局</h2><p><strong>1). 视频、音频标签</strong></p><ul><li><p>视频标签: &lt;video&gt;</p><ul><li>属性: <ul><li>src: 规定视频的url</li><li>controls: 显示播放控件</li><li>width: 播放器的宽度</li><li>height: 播放器的高度</li></ul></li></ul></li><li><p>音频标签: &lt;audio&gt;</p><ul><li>属性:<ul><li>src: 规定音频的url</li><li>controls: 显示播放控件</li></ul></li></ul></li></ul><p><strong>2). 段落标签</strong></p><ul><li>换行标签: &lt;br&gt;<ul><li>注意: 在HTML页面中,我们在编辑器中通过回车实现的换行, 仅仅在文本编辑器中会看到换行效果, 浏览器是不会解析的, HTML中换行需要通过br标签</li></ul></li></ul><p>​</p><ul><li>段落标签: &lt;p&gt;<ul><li>如: &lt;p&gt; 这是一个段落 &lt;&#x2F;p&gt;</li></ul></li></ul><p><strong>3). 文本格式标签</strong></p><table><thead><tr><th>效果</th><th>标签</th><th>标签(强调)</th></tr></thead><tbody><tr><td>加粗</td><td>b</td><td>strong</td></tr><tr><td>倾斜</td><td>i</td><td>em</td></tr><tr><td>下划线</td><td>u</td><td>ins</td></tr><tr><td>删除线</td><td>s</td><td>del</td></tr></tbody></table><p>前面的标签 b、i、u、s 就仅仅是实现加粗、倾斜、下划线、删除线的效果，是没有强调语义的。 而后面的strong、em、ins、del在实现加粗、倾斜、下划线、删除线的效果的同时，还带有强调语义。</p><p>一些实现：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4D4F53</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector"><span class="token id">#time</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#968D92</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置字体大小 */</span>        <span class="token punctuation">}</span>        <span class="token selector">a </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置文本为一个标准的文本 */</span>        <span class="token punctuation">}</span>        <span class="token selector">p </span><span class="token punctuation">{</span>            <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置首行缩进 */</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置行高 */</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#plast</span> </span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 对齐方式 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/news_logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://gov.sina.com.cn/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新浪政务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  > 正文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023年03月02日 21:50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 正文 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 视频 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/1.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>950px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 音频 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;audio src="audio/1.mp3" controls>&lt;/audio> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>央视网消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plast<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        责任编辑：王树淼 SN242    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在上述的正文排版实现中，还用到了几个CSS属性： </p><ul><li>text-indent: 设置段落的首行缩进 </li><li>line-height: 设置行高</li><li>text-align: 设置对齐方式, 可取值为 left &#x2F; center &#x2F; right</li></ul><p>注意事项: </p><ul><li><p>在HTML页面中无论输入了多少个空格, 最多只会显示一个。 可以使用空格占位符（&amp;nbsp；）来生成空格，如果需要多个空格，就使用多次占位符。</p></li><li><p>那在HTML中，除了空格占位符以外，还有一些其他的占位符(了解, 只需要知道空格的占位符写法即可)，如下：</p><ul><li><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">占位符</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&amp;nbsp;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&amp;lt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&amp;gt;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;amp;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&amp;quot;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&amp;apos;</td></tr></tbody></table></li></ul></li></ul><p>页面布局</p><p>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/image-20230310092820616.png"></p><ul><li><p>布局标签：实际开发网页中，会大量频繁的使用 div 和 span 这两个没有语义的布局标签。</p></li><li><p>标签：<div> <span></p></li><li><p>特点：</p><ul><li><p>div标签：</p><ul><li><p>一行只显示一个（独占一行）</p></li><li><p>宽度默认是父元素的宽度，高度默认由内容撑开</p></li><li><p>可以设置宽高（width、height）</p></li></ul></li><li><p>span标签：</p><ul><li>一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高（width、height）</li></ul></li></ul></li></ul><p>测试：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        A     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        A     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        A A    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        A     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>A</p><p>A</p><p>AA</p><p>盒子模型代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>盒子模型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 宽度 */</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 高度 */</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 指定width height为盒子的高宽 */</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 背景色 */</span>                        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 内边距, 上 右 下 左 , 边距都一行, 可以简写: padding: 20px;*/</span>             <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 边框, 宽度 线条类型 颜色 */</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">30</span>px <span class="token number">30</span>px <span class="token number">30</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 外边距, 上 右 下 左 , 边距都一行, 可以简写: margin: 30px; */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果如下图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/image-20230310094312355.png"></p><p>布局实现。</p><ul><li>第一步：需要将body中的新闻标题部分、正文部分使用一个 div 布局标签将其包裹起来，方便通过css设置内容占用的宽度，比如：65%。</li><li>第二步：通过css为该div设置外边距，左右的外边距分别为：17.5%，上下外边距靠边展示即可，为：0%。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#4D4F53</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector"><span class="token id">#time</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#968D92</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置字体大小 */</span>        <span class="token punctuation">}</span>        <span class="token selector">a </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置文本为一个标准的文本 */</span>        <span class="token punctuation">}</span>        <span class="token selector">p </span><span class="token punctuation">{</span>            <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置首行缩进 */</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置行高 */</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#plast</span> </span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 对齐方式 */</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* margin: 0% 17.5% 0% 17.5% ; */</span> <span class="token comment" spellcheck="true">/* 外边距, 上 右 下 左 */</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 标题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/news_logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://gov.sina.com.cn/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新浪政务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  > 正文        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023年03月02日 21:50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正文 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 视频 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/1.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>950px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 音频 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;audio src="audio/1.mp3" controls>&lt;/audio> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>央视网消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plast<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            责任编辑：王树淼 SN242        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>标签：</strong></p><ul><li>&lt;table&gt; : 用于定义整个表格, 可以包裹多个 &lt;tr&gt;， 常用属性如下： <ul><li>border：规定表格边框的宽度</li><li>width：规定表格的宽度</li><li>cellspacing: 规定单元之间的空间</li></ul></li><li>&lt;tr&gt; : 表格的行，可以包裹多个 &lt;td&gt;  </li><li>&lt;td&gt; : 表格单元格(普通)，可以包裹内容 , 如果是表头单元格，可以替换为 &lt;th&gt;</li></ul><p>代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML-表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">td </span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 单元格内容居中展示 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>品牌Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>品牌名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>企业名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/huawei.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>华为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>华为技术有限公司<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/alibaba.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>阿里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>阿里巴巴集团控股有限公司<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>结果如下图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/image-20230309175121361.png"></p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li><p>表单场景: 表单就是在网页中负责数据采集功能的，如：注册、登录的表单。 </p></li><li><p>表单标签: &lt;form&gt;</p></li><li><p>表单属性:</p><ul><li>action: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li><li>method: 规定用于发送表单数据的方式，常见为： GET、POST。<ul><li>GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username&#x3D;Tom&amp;age&#x3D;12，url中能携带的表单数据大小是有限制的。</li><li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li></ul></li></ul></li><li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p><ul><li>input: 定义表单项，通过type属性控制输入形式</li><li>select: 定义下拉列表</li><li>textarea: 定义文本域</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML-表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--     form表单属性:         action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面        method: 表单的提交方式 .            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值            post: 在消息体(请求体)中传递的, 参数大小无限制的.    --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以为get也可以为post</p><p>表单中的所有表单项，要想能够正常的采集数据，在提交的时候能提交到服务端，表单项必须指定name属性。 否则，无法提交该表单项。</p><pre class=" language-html"><code class="language-html">用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>表单项</p><p>在一个表单中，可以存在很多的表单项，而虽然表单项的形式各式各样，但是表单项的标签其实就只有三个，分别是：</p><ul><li><p>&lt;input&gt;: 表单项 , 通过type属性控制输入形式。</p><table><thead><tr><th>type取值</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table></li><li><p>&lt;select&gt;: 定义下拉列表, &lt;option&gt; 定义列表项</p></li><li><p>&lt;textarea&gt;: 文本域</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML-表单项标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- value: 表单项提交的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      性别: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 男          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     爱好: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> java <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> game <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> sing <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     图像: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     生日: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     日期时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetime-local<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     邮箱: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     学历: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>degree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>----------- 请选择 -----------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大专<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>硕士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     描述: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 表单常见按钮 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果图：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/JavaWeb2023/image-20230309221308252.png"></p><h1 id="文档查阅"><a href="#文档查阅" class="headerlink" title="文档查阅"></a>文档查阅</h1><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><p>可以在w3c上进行学习</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>输入输出流</title>
      <link href="/2023/06/26/shu-ru-shu-chu-liu/"/>
      <url>/2023/06/26/shu-ru-shu-chu-liu/</url>
      
        <content type="html"><![CDATA[<p>针对于笔试的一些输入输出数据做一些小结。</p><p>主要是关于String相关的，当然也有一点数组和输入数据相关的。</p><span id="more"></span><h1 id="1-针对于一行未确定数量的数字，再加下一行的一个数字"><a href="#1-针对于一行未确定数量的数字，再加下一行的一个数字" class="headerlink" title="1.针对于一行未确定数量的数字，再加下一行的一个数字"></a>1.针对于一行未确定数量的数字，再加下一行的一个数字</h1><p>用Java语言的话：</p><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> input<span class="token punctuation">)</span> R<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先把一行作为字符串提取，再转为Int ，对于下一行的数字直接sc.nextInt即可</p><p><strong>读取一行字符串就用sc.nextLine(); 读取一个数字就用 sc.nextInt();</strong></p><p>判断有没有就用 sc.hasNextLine() 和 sc.hasNextInt();</p><p>用Python的话</p><p>R &#x3D; [int(c) for c in input().split(“ “)]<br>cnt &#x3D; int(input())</p><p>用C++不好写；</p><h1 id="2-关于初始化数组"><a href="#2-关于初始化数组" class="headerlink" title="2.关于初始化数组"></a>2.关于初始化数组</h1><p>用C++写：</p><p>dp &#x3D; vector(n, INT_MIN);</p><p>用Java写：<br>dp &#x3D; new int[n];<br>Arrays.fill(dp, Integer.MIN_VALUE);</p><h1 id="3-关于字符串-Java"><a href="#3-关于字符串-Java" class="headerlink" title="3.关于字符串-Java"></a>3.关于字符串-Java</h1><h2 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h2><p>substring(int beginIndex) 从索引开始位置到结尾处的字符串部分</p><p>substring(int beginIndex, int endIndex) 左闭右开</p><p>A的ASCII码为65 ，a 的ASCII码为91， 中间差32</p><h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>String str&#x3D;“hello”;</p><p>String str&#x3D;new String();</p><p>String set1&#x3D;new String(“hello”);</p><p>char a[]&#x3D;{‘h’,’e’,’l’,’l’,’o’};</p><p>String sChar&#x3D;new String(a)</p><p>String(char[]value, int offset, int count);</p><h2 id="String-和-int-的相互转换"><a href="#String-和-int-的相互转换" class="headerlink" title="String 和 int 的相互转换"></a>String 和 int 的相互转换</h2><p>String 字符串转整型 int 有以下两种方式：</p><ul><li><strong>Integer.parseInt(str)</strong></li><li>Integer.valueOf(str).intValue()</li></ul><p>整型 int 转 String 字符串类型有以下 3 种方法：</p><ul><li>String s &#x3D; String.valueOf(i);</li><li><strong>String s &#x3D; Integer.toString(i);</strong></li><li>String s &#x3D; “” + i;</li></ul><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>可以直接用+号，也可以str1.concat(str2);</p><h2 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h2><p>str1.toLowerCase() &#x2F;&#x2F;将字符串所有字母全部转换为小写</p><p>str2.toUpperCase() &#x2F;&#x2F;将字符串中所有字母全部转换为大写</p><p>注意是返回值变为了大小写，而不是其本身。</p><h2 id="去除字符串中的空格"><a href="#去除字符串中的空格" class="headerlink" title="去除字符串中的空格"></a>去除字符串中的空格</h2><p>str.trim()</p><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><p>String 类的 split() 方法可以按指定的分割符对目标字符串进行分割，分割后的内容存放在字符串数组中。该方法主要有如下两种重载形式：</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>String sign<span class="token punctuation">)</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>String sign<span class="token punctuation">,</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span></code></pre><p>其中它们的含义如下：</p><ul><li>str 为需要分割的目标字符串。</li><li>sign 为指定的分割符，可以是任意字符串。</li><li>limit 表示分割后生成的字符串的限制个数，如果不指定，则表示不限制，直到将整个目标字符串完全分割为止。</li></ul><p>使用分隔符注意如下：</p><p>1）“.”和“|”都是转义字符，必须得加“\”。</p><ul><li>如果用“.”作为分隔的话，必须写成<code>String.split(&quot;\\.&quot;)</code>，这样才能正确的分隔开，不能用<code>String.split(&quot;.&quot;)</code>。</li><li>如果用“|”作为分隔的话，必须写成<code>String.split(&quot;\\|&quot;)</code>，这样才能正确的分隔开，不能用<code>String.split(&quot;|&quot;)</code>。</li></ul><p>2）如果在一个字符串中有多个分隔符，可以用“|”作为连字符，比如：“acount&#x3D;? and uu &#x3D;? or n&#x3D;?”，把三个都分隔出来，可以用<code>String.split(&quot;and|or&quot;)</code></p><h2 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h2><p>String 类提供了 3 种字符串替换方法，分别是 replace()、replaceFirst() 和 replaceAll()</p><p>replace() 方法用于将目标字符串中的指定字符（串）替换成新的字符（串），其语法格式如下：</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>String oldChar<span class="token punctuation">,</span> String newChar<span class="token punctuation">)</span></code></pre><p>replaceFirst() 方法用于将目标字符串中匹配某正则表达式的第一个子字符串替换成新的字符串，其语法形式如下：</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span></code></pre><p>replaceAll() 方法用于将目标字符串中匹配某正则表达式的所有子字符串替换成新的字符串，其语法形式如下：</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span></code></pre><p>&#x2F;&#x2F; 将文本中的所有”时”和”使”都替换为”是”</p><p>String newStrFirst &#x3D; intro.replaceAll(“[时使]”, “是”);</p><h2 id="Java字符串的比较"><a href="#Java字符串的比较" class="headerlink" title="Java字符串的比较"></a>Java字符串的比较</h2><p>比较字符串的常用方法有 3 个：equals() 方法、equalsIgnoreCase() 方法、 compareTo() 方法。</p><p>equals() 方法将逐个地比较两个字符串的每个字符是否相同。</p><p>唯一不同的是 equalsIgnoreCase() 比较时不区分大小写。</p><p>equals() 方法比较字符串对象中的字符。而<code>==</code>运算符比较两个对象引用看它们是否引用相同的实例。</p><p>compareTo() 方法用于按字典顺序比较两个字符串的大小，该比较是基于字符串各个字符的 Unicode 值</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>String otherstr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果按字典顺序 str 位于 otherster 参数之前，比较结果为一个负整数；如果 str 位于 otherstr 之后，比较结果为一个正整数；如果两个字符串相等，则结果为 0。</p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>String 类的 indexOf() 方法和 lastlndexOf() 方法用于在字符串中获取匹配字符（串）的索引值。</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span></code></pre><p>也可以根据索引查找 str.charAt(0);</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer 类提供了 3 个构造方法来创建一个字符串，如下所示：</p><ul><li>StringBuffer() 构造一个空的字符串缓冲区，并且初始化为 16 个字符的容量。</li><li>StringBuffer(int length) 创建一个空的字符串缓冲区，并且初始化为指定长度 length 的容量。</li><li>StringBuffer(String str) 创建一个字符串缓冲区，并将其内容初始化为指定的字符串内容 str，字符串缓冲区的初始容量为 16 加上字符串 str 的长度。</li></ul><p>StringBuffer 类的 append() 方法用于向原有 StringBuffer 对象中追加字符串。该方法的语法格式如下：</p><pre class=" language-java"><code class="language-java">StringBuffer 对象<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span></code></pre><p>StringBuffer 类的 setCharAt() 方法用于在字符串的指定索引位置替换一个字符。该方法的语法格式如下：</p><pre class=" language-java"><code class="language-java">StringBuffer 对象<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>StringBuffer 类中的 reverse() 方法用于将字符串序列用其反转的形式取代。该方法的语法格式如下：</p><pre class=" language-java"><code class="language-java">StringBuffer 对象<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>deleteCharAt() 方法用于移除序列中指定位置的字符，该方法的语法格式如下：</p><pre class=" language-java"><code class="language-java">StringBuffer 对象<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>delete() 方法用于移除序列中子字符串的字符，该方法的语法格式如下：</p><pre class=" language-java"><code class="language-java">StringBuffer 对象<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="String、StringBuffer和StringBuilder类的区别"><a href="#String、StringBuffer和StringBuilder类的区别" class="headerlink" title="String、StringBuffer和StringBuilder类的区别"></a>String、StringBuffer和StringBuilder类的区别</h2><p>Java 提供了 String 类来创建和操作字符串。String 类是不可变类.</p><p>两个可变字符串类 StringBuffer 和 StringBuilder. StringBuffer 是线程安全的，而 StringBuilder 则没有实现线程安全功能</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简历总结</title>
      <link href="/2023/06/26/ge-ren-jian-li/"/>
      <url>/2023/06/26/ge-ren-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="0-JavaGuide"><a href="#0-JavaGuide" class="headerlink" title="0.JavaGuide"></a>0.JavaGuide</h1><p><a href="https://javaguide.cn/">https://javaguide.cn/</a></p><p>这里面的东西也是推荐要看一看的。</p><span id="more"></span><h1 id="1-Java"><a href="#1-Java" class="headerlink" title="1.Java"></a>1.Java</h1><h2 id="ArrayList源码"><a href="#ArrayList源码" class="headerlink" title="ArrayList源码"></a>ArrayList源码</h2><p><a href="https://www.bilibili.com/video/BV17F411T7Ao?p=190&vd_source=6ed7f19911310aba47123ac6cc1674a0">参考资料</a></p><p>1.用空参创建的集合，在底层创建一个默认长度为0的数组。</p><p>2.添加第一个元素时，底层会创建一个新的长度为10的数组。</p><p>3.存满时，会扩容1.5倍。</p><p>4.如果一次添加多个元素，1.5倍还放不下，则新创建数组的长度以实际为准。</p><p>ctrl+shift+t 可以查ArrayList源码</p><p>ctrl + o 搜索指定的方法。</p><p>源码：add函数 add(e,elementData,size)</p><p>参数一：当前要添加的元素 参数二：集合底层的数组名字 参数三：集合的长度&#x2F;当前元素应存入的位置</p><p>源码 newLength(int oldLength,int minGrowth,int prefGrowth)</p><p>int prefLength&#x3D;oldLength+Math.max(minGrowth,prefGrowth);</p><p>扩容因子1.5，一方面是位运算比较快，一方面是1.5可以让之前的内存空间可以得到复用。</p><h2 id="HashMap源码"><a href="#HashMap源码" class="headerlink" title="HashMap源码"></a>HashMap源码</h2><p><a href="https://www.bilibili.com/video/BV1A84y1M73v/?spm_id_from=333.999.0.0&vd_source=6ed7f19911310aba47123ac6cc1674a0">参考资料1</a></p><p>加载因子0.75， 超过时会扩容为2倍。扩容之后桶下标要重新计算。</p><p>树化：当容量大于等于64时，且一个Key下面的链表长度大于8。 将链表转为红黑树</p><p>退化：扩容会拆分，当树的元素个数小于等于6，会退化为链表。remove之前，如果root.root.left, root.right, root.left.left如果有一个为null,则会退化为链表</p><p>数组容量为什么是2的n次幂？ 计算索引时，如果是2的n次幂，可以使用位与运算代替取模，效率更高；扩容时oldCap &amp; hash &#x3D;&#x3D;0 的元素留在原来位置，否则新位置&#x3D;旧位置+oldCap</p><p>例子：容量16时，10&amp;16&#x3D;0,26&amp;16&#x3D;16.这俩都在10的位置。(新位置)26&#x3D;10+16</p><p>但是这样可能会导致哈希分布性不好，所以也推荐选质数。比如HashTable{0-&gt;11-&gt;23-&gt;47-&gt;95}</p><p>HashMap不是线程安全的，多线程操作会造成数据错乱现象。</p><p>HashMap的key可以为Null，其他的map不行</p><p>作为key的对象，必须要实现hashCode和equals,并且Key的内容不能修改</p><p>String对象的hashCode（）如何设计才能让散列的更加均匀？</p><p>每个字符串的hashCode足够独特，$S_0$×$31^{n-1}$+……+$S_{n-1}$×$31^0$</p><p>31×h又可以被优化为h&lt;&lt;5 - h</p><h1 id="2-计算机网络"><a href="#2-计算机网络" class="headerlink" title="2.计算机网络"></a>2.计算机网络</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="1-从输入URL到页面展示到底发生了什么？（打开一个网页，整个过程会使用哪些协议）"><a href="#1-从输入URL到页面展示到底发生了什么？（打开一个网页，整个过程会使用哪些协议）" class="headerlink" title="1)从输入URL到页面展示到底发生了什么？（打开一个网页，整个过程会使用哪些协议）"></a>1)从输入URL到页面展示到底发生了什么？（打开一个网页，整个过程会使用哪些协议）</h3><p>注意是OSPF协议。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/url%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="img"></p><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><p>DNS解析：一个网址到IP地址的转换。</p><p>浏览器中有DNS缓存，DNS负载均衡可以把最近的IP地址返回给用户。DNS端口是53</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/1618288278-57f00bf9444dd.png" alt="img"></p><h3 id="2-HTTP-和-HTTPS-的区别"><a href="#2-HTTP-和-HTTPS-的区别" class="headerlink" title="2)HTTP 和 HTTPS 的区别"></a>2)HTTP 和 HTTPS 的区别</h3><p><strong>端口号</strong> ：HTTP 默认是 80，HTTPS 默认是 443</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/http-vs-https.png" alt="img"></p><h3 id="3-HTTP1-0-和-HTTP1-1的区别"><a href="#3-HTTP1-0-和-HTTP1-1的区别" class="headerlink" title="3)HTTP1.0 和 HTTP1.1的区别"></a>3)HTTP1.0 和 HTTP1.1的区别</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/http1.0-vs-http1.1.png" alt="img"></p><p>连接方式：HTTP&#x2F;1.0 为短连接，HTTP&#x2F;1.1 支持长连接。</p><p>状态响应码： HTTP&#x2F;1.1 中新加入了大量的状态码，</p><p>缓存机制：HTTP&#x2F;1.1 则引入了更多的缓存控制策略</p><p>带宽： HTTP&#x2F;1.1它允许只请求资源的某个部分，即返回码是 206（Partial Content）</p><p>Host 头（Host Header）处理 :HTTP&#x2F;1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。</p><h3 id="4-HTTP1-1-和-HTTP2-0-的区别"><a href="#4-HTTP1-1-和-HTTP2-0-的区别" class="headerlink" title="4)HTTP1.1 和 HTTP2.0 的区别"></a>4)HTTP1.1 和 HTTP2.0 的区别</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/http1.1-vs-http2.0.png" alt="img"></p><p><strong>IO 多路复用（Multiplexing）</strong> ：HTTP&#x2F;2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP&#x2F;1.1 中长链接的升级版本）。HTTP&#x2F;1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP&#x2F;2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。</p><p><strong>二进制帧（Binary Frames）</strong> ：HTTP&#x2F;2.0 使用二进制帧进行数据传输，而 HTTP&#x2F;1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。</p><p><strong>头部压缩（Header Compression）</strong> ：HTTP&#x2F;1.1 支持<code>Body</code>压缩，<code>Header</code>不支持压缩。HTTP&#x2F;2.0 支持对<code>Header</code>压缩，减少了网络开销。</p><p><strong>服务器推送（Server Push）</strong>：HTTP&#x2F;2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP&#x2F;1.1 需要客户端自己发送请求来获取相关资源。</p><h3 id="5-HTTP2-0-和-HTTP-3-0的区别"><a href="#5-HTTP2-0-和-HTTP-3-0的区别" class="headerlink" title="5)HTTP2.0 和 HTTP 3.0的区别"></a>5)HTTP2.0 和 HTTP 3.0的区别</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/http2.0-vs-http3.0.png" alt="img"></p><p><strong>传输协议</strong> ：HTTP&#x2F;2.0 是基于 TCP 协议实现的，HTTP&#x2F;3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS&#x2F;SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP&#x2F;3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP&#x2F;3 最大的改造就是使用了 QUIC。</p><p><strong>连接建立</strong> ：HTTP&#x2F;2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP&#x2F;3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。</p><p><strong>队头阻塞</strong> ：HTTP&#x2F;2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP&#x2F;3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。</p><p><strong>错误恢复</strong> ：HTTP&#x2F;3.0 具有更好的错误恢复机制，当出现丢包、延迟等网络问题时，可以更快地进行恢复和重传。而 HTTP&#x2F;2.0 则需要依赖于 TCP 的错误恢复机制。</p><p><strong>安全性</strong> ：HTTP&#x2F;2.0 和 HTTP&#x2F;3.0 在安全性上都有较高的要求，支持加密通信，但在实现上有所不同。HTTP&#x2F;2.0 使用 TLS 协议进行加密，而 HTTP&#x2F;3.0 基于 QUIC 协议，包含了内置的加密和身份验证机制，可以提供更强的安全性。</p><h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2><h3 id="1-TCP-与-UDP-的区别"><a href="#1-TCP-与-UDP-的区别" class="headerlink" title="1)TCP 与 UDP 的区别"></a>1)TCP 与 UDP 的区别</h3><ol><li><strong>是否面向连接</strong> ：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li><li><strong>是否是可靠传输</strong>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。</li><li><strong>是否有状态</strong> ：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（<strong>这很渣男！</strong>）。</li><li><strong>传输效率</strong> ：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。</li><li><strong>传输形式</strong> ： TCP 是面向字节流的，UDP 是面向报文的。</li><li><strong>首部开销</strong> ：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。</li><li><strong>是否提供广播或多播服务</strong> ：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li></ol><h3 id="2-TCP-的三次握手的过程"><a href="#2-TCP-的三次握手的过程" class="headerlink" title="2) TCP 的三次握手的过程"></a>2) TCP 的三次握手的过程</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/tcp-shakes-hands-three-times.png" alt="img"></p><p>三次握手能够保证自己和对方的发送和接收功能都是正常的。</p><h3 id="3-四次挥手"><a href="#3-四次挥手" class="headerlink" title="3)四次挥手"></a>3)四次挥手</h3><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/tcp-waves-four-times.png" alt="img"></p><p>为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</p><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送.</p><p>当被动关闭方（服务端）在 TCP 挥手过程中，「没有数据要发送」并且「开启了 TCP 延迟确认机制」，那么第二和第三次挥手就会合并传输，这样就出现了三次挥手。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/d7b349efa4f94453943b433b704a4ca8.webp" alt="img"></p><p>然后因为 TCP 延迟确认机制是默认开启的，所以导致我们抓包时，看见三次挥手的次数比四次挥手还多。</p><p>当发送没有携带数据的 ACK，它的网络效率也是很低的，因为它也有 40 个字节的 IP 头 和 TCP 头，但却没有携带数据报文。 为了解决 ACK 传输效率低问题，所以就衍生出了 <strong>TCP 延迟确认</strong>。 TCP 延迟确认的策略：</p><ul><li>当有响应数据要发送时，ACK 会随着响应数据一起立刻发送给对方</li><li>当没有响应数据要发送时，ACK 将会延迟一段时间，以等待是否有响应数据可以一起发送</li><li>如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会立刻发送 ACK</li></ul><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/33f3d2d54a924b0a80f565038327e0e4.webp" alt="img"></p><h3 id="4-TCP传输可靠性保证"><a href="#4-TCP传输可靠性保证" class="headerlink" title="4)TCP传输可靠性保证"></a>4)TCP传输可靠性保证</h3><p><a href="https://javaguide.cn/cs-basics/network/tcp-reliability-guarantee.html#tcp-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7">JavaGuide链接</a></p><h3 id="5-NAT的作用"><a href="#5-NAT的作用" class="headerlink" title="5) NAT的作用"></a>5) NAT的作用</h3><p><strong>NAT（Network Address Translation，网络地址转换）</strong> 主要用于在不同网络之间转换 IP 地址。它允许将私有 IP 地址（如在局域网中使用的 IP 地址）映射为公有 IP 地址（在互联网中使用的 IP 地址）或者反向映射，从而实现局域网内的多个设备通过单一公有 IP 地址访问互联网。</p><p>NAT 不光可以缓解 IPv4 地址资源短缺的问题，还可以隐藏内部网络的实际拓扑结构，使得外部网络无法直接访问内部网络中的设备，从而提高了内部网络的安全性。</p><h1 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h1><p>软件设计原则：</p><p>开闭原则：对拓展开放，对修改封闭。<br>里式代换原则：任何基类可以出现的地方，子类一定可以出现，反之不一定。<br>依赖倒转原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象。<br>接口隔离原则：客户端不应该被迫依赖于它不使用的方法，一个类对另一个类的依赖应该建立在最小的接口上。<br>迪米特法则：只和你的直接朋友交谈，不跟 “陌生人” 说话<br>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>设计模式分类：</p><p>创建型：专注于对象的创建</p><p>结构型：关注类和对象的组织</p><p>行为型：关注对象之间的相互交互</p><p>创建型模式：单例模式、工厂模式、原型模式、建造者模式</p><p>结构型模式：代理模式、适配器模式、装饰器模式、桥接模式、外观模式、组合模式、享元模式</p><p>行为型模式：模板方法模式、策略模式、命令模式、职责链模式、状态模式、观察者模式、中介者模式、迭代器模式、访问者模式、备忘录模式、解释器模式</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>一个类只有一个实例</p><p>掌握单例模式常见五种实现方式</p><p>了解jdk中有哪些地方体现了单例模式</p><ul><li><strong>饿汉式</strong>：类加载就会导致该单实例对象被创建</li><li><strong>懒汉式</strong>：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</li></ul><p><a href="https://luzhenyu.blog.csdn.net/article/details/122308030">文章</a></p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>简单工厂模式：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/26943a5bf49846279f3b92999aa966dc.png" alt="img"></p><pre><code>简单咖啡工厂类，用来生产咖啡``*/``public class SimpleCoffeeFactory &#123;``public Coffee createCoffee(String type) &#123;``// 声明Coffee类型的变量，根据不同类型创建不同的coffee子类对象``Coffee coffee = null;``if (&quot;american&quot;.equals(type)) &#123;``coffee = new AmericanCoffee();``&#125; else if (&quot;latte&quot;.equals(type)) &#123;``coffee = new LatteCoffee();``&#125; else &#123;``throw new RuntimeException(&quot;对不起，您所点的咖啡没有&quot;);``&#125;``return coffee;``&#125;``&#125;</code></pre><p>你传入type，然后工厂来生产。如果要增加新产品直接修改工厂类，容易扩展，但也违反了“开闭”原则。</p><p>工厂方法模式：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/76b882ee722549eaa15930d73d92b741.png" alt="img"></p><p>分为抽象工厂，具体工厂；抽象产品，具体产品。</p><p>无需对原工厂修改，满足开闭原则。但是有新产品就要新建工厂。</p><p>抽象工厂模式：</p><p><strong>工厂方法模式</strong>：一个工厂生产一种类对象的模式。</p><p><strong>抽象工厂模式</strong>：一个工厂可以生产多种类对象的模式。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/6c9c12ff920545b4b910a3864548a36a.png" alt="img"></p><p>意大利风味的甜品工厂 ,生产拿铁咖啡和提拉米苏甜品</p><p>美式风味的甜品工厂 ，生产美式咖啡和抹茶慕斯</p><p>有咖啡和甜品两个产品族。</p><p><a href="https://luzhenyu.blog.csdn.net/article/details/122318746">文章</a></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式的作用：保护、增强、解耦</p><p>当访问对象不适合或者不能直接引用目标对象，可以提供一个代理以控制对该对象的访问，代理对象作为访问对象和目标对象之间的中介。</p><p>Java 中的代理按照代理类生成时机不同又分为静态代理和动态代理；</p><p>静态代理代理类在编译期就生成，而动态代理代理类则是在 Java 运行时动态生成；</p><p>动态代理又有 JDK 代理和 CGLib 代理两种。</p><p>静态代理：火车站是目标对象，代售点是代理对象。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/7accab7a41f149fe8605f3d99b8e1c2c.png" alt="img"></p><p><strong>JDK 动态代理要求必须定义接口，因为它只能对接口进行代理。</strong></p><p>获取代理对象的工厂类 ProxyFactory。</p><p>CGLIB 动态代理可以不代理接口，直接代理类。</p><p>使用场景：远程代理我们只能访问接口。</p><p><a href="https://luzhenyu.blog.csdn.net/article/details/122362769#518__404">文章</a></p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>原来的话：<br><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/5feae29f62384cc881b0960a4ed82883.png" alt="img"></p><p>改进之后：<br><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/62b392a8f1b34e939ca4f6cd9676e630.png" alt="img"></p><p>使用场景：</p><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p><p>JDK里面的IO流的包装类用到了装饰器模式</p><p>BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。</p><p>BufferedWriter 使用装饰者模式对 Writer 子实现类进行了增强，添加了缓冲区，提高了写数据的效率</p><p>代理和装饰者的区别：</p><p>相同点：</p><p>都要实现与目标类相同的业务接口<br>在两个类中都要声明目标对象<br>都可以在不修改目标类的前提下增强目标方法<br>不同点：</p><p>目的不同</p><p>装饰者是为了增强目标对象<br>静态代理是为了保护和隐藏目标对象（装饰者可以迭代增强，代理只能增强一次）</p><p>获取目标对象构建的地方不同<br>装饰者是由外界传递进来，可以通过构造方法传递<br>静态代理是在代理类内部创建，以此来隐藏目标对象</p><p><a href="https://luzhenyu.blog.csdn.net/article/details/122579712">文章</a></p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>又被称为 发布 - 订阅（Publish &#x2F; Subscribe）模式, 监听器。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/dfb0e1b6e46b478ca073786f554effcc.png" alt="img"></p><p>优点：解耦，可以实现广播机制。</p><h1 id="4-MySQL"><a href="#4-MySQL" class="headerlink" title="4.MySQL"></a>4.MySQL</h1><h2 id="索引底层原理"><a href="#索引底层原理" class="headerlink" title="索引底层原理"></a>索引底层原理</h2><p>索引（Index）是帮助MySQL高效获取数据的数据结构.</p><p>优点：查的快，降低IO成本； 通过创建唯一索引，可以保证数据的唯一性； 加速表与表之间的连接，减低分组和排序子句的时间。</p><p>缺点：创建索引和维护索引要耗费时间； 索引需要占磁盘空间； 索引会降低更新表的速度。</p><p>底层数据结构：B+树，很适合排序查找和范围查找。</p><p>聚簇索引：所有的用户记录都存在了叶⼦节点，数据即索引，索引即数据。以主键值大小进行排序。</p><p>非聚簇索引：以别的键为搜索条件时使用，回表。</p><p>联合索引：可以先按C2列排序，再按C3列排序。</p><p>InnoDB的B+树索引的注意事项</p><p>1.根页面位置不动 2.非叶子节点目录项记录唯一 3.一个页面最少存储两条记录</p><p>MyISAM索引：将数据和索引分开存储，索引树的叶子节点存的是主键值+数据记录地址</p><p>MyISAM与InnoDB的对比：<br>1.InnoDB中，根据主键值对聚簇索引进行一次查询即可。而在MyISAM中，要进行一次回表。MyISAM的回表操作是十分 快速 的。</p><p>2.InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是 分离的 ，索引文件仅保存数 据记录的地址。</p><p>3.InnoDB的非聚簇索引data域存储相应记录 主键的值 ，而MyISAM索引记录的是 地址 。</p><p>4.InnoDB要求表 必须有主键 （ MyISAM可以没有 ）。如果没有显式指定，则MySQL系统会自动选择一个 可以非空且唯一标识数据记录的列作为主键。再没有的话可以生成一个隐含字段。</p><p>B+树优点：B+树查询效率更稳定（要访问到叶子节点）； B+树的查询效率更高（一般比B树更矮胖）；B+树的磁盘读写代价更低（因为内部非叶子节点存储的东西更少）</p><p>B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO？ InnoDB存储引擎中页的大小为16KB，一个int类型或者一个指针也就4个字节或者8个字节。所以一个页可以存储16KB&#x2F;(8B+8B)&#x3D;1000个键值。则深度为3的树就可以存储$10^3$×*$10^3$×$10^3$&#x3D;一亿条数据</p><h2 id="Innodb存储引擎"><a href="#Innodb存储引擎" class="headerlink" title="Innodb存储引擎"></a>Innodb存储引擎</h2><p>InnoDB中页的大小默认为16KB，以页作为磁盘和内存之间交互的基本单位。</p><p>因为每次是将这个记录所在的页加载到内存中进行读取。一个页中有上千条记录。所以普通索引和唯一索引的性能差异不大。</p><p>引入 区 的概念，一个区就是在物理位置上连续的 64个页。因为InnoDB 中的页大小默认是16KB，所以 一个区的大小是64*16KB&#x3D; 1MB 。</p><p>InnoDB对 B+树的 叶子节点 和 非叶子节点 进行了区别对待，也就是说叶子节点有自己独有的区，非叶子节点也有自 己独有的区。存放叶子节点的区的集合就算是一个 段( segment) ，存放非叶子节点的区的集合也算是 一个段。</p><p>段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念，由若干个零散的页面以及一些 完整的区组成。</p><p>为了考虑以完整的区为单位分配给某个段对于 数据量较小 的表太浪费存储空间的这种情况，InnoDB提 出了一个 碎片(fragment)区 的概念。在一个碎片区中，并不是所有的页都是为了存储同一个段的数据 而存在的，而是碎片区中的页可以用于不同的目的，比如有些页用于段A，有些页用于段B，有些页甚至 哪个段都不属于。 碎片区直属于表空间 ，并不属于任何一个段。</p><p>表空间可以看做是InnoDB存储引擎逻辑结构的最高层，所有的数据都存放在表空间中。 表空间是一个 逻辑容器 ，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只 能属于一个表空间。</p><h2 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h2><p>首先要开启慢查询，指定一下阈值(默认是10s)</p><p>慢查询日志分析工具：mysqldumpslow</p><p>EXPLAIN加在查询语句前面。</p><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><p>最佳左前缀法则</p><p>计算，函数，类型转换导致索引失效。</p><p>范围条件右边的列索引失效</p><p>不等于(!&#x3D; 或者 &lt;&gt;)索引失效</p><p>is null 可以使用索引， is not null 无法使用索引</p><p>like 以通配符%开头索引失效</p><p>OR前后存在非索引的列，索引失效</p><p>覆盖索引：简单说就是， 索引列+主键 包含 SELECT 到 FROM之间查询的列 。。</p><p>索引下推：本来有100条需要回表，但是where里面有 name like %张%, 所以也可以用一下这种索引去查张，把回表数降为10.</p><p>关于exits和In</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/QQ%E5%9B%BE%E7%89%8720230519205651.png" alt="img"></p><h2 id="事务与锁"><a href="#事务与锁" class="headerlink" title="事务与锁"></a>事务与锁</h2><h3 id="1-事务基础知识"><a href="#1-事务基础知识" class="headerlink" title="1)事务基础知识"></a>1)事务基础知识</h3><p>在MySQL中，只有InnoDB是支持事务的。</p><p>事务的ACID特性：<br>原子性（atomicity): 要么全部提交，要么全部失败回滚。</p><p>一致性(consistency)：指事务执行前后，数据从一个 合法性状态 变换到另外一个 合法性状态 。</p><p>隔离性(isolation): 指一个事务的执行 不能被其他事务干扰 ，即一个事务内部的操作及使用的数据对 并发 的 其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>持久性(durability): 一个事务一旦被提交，它对数据库中数据的改变就是 永久性的 ，接下来的其他操作和数据库 故障不应该对其有任何影响。</p><p>事务的状态：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230423093117.png" alt="img"></p><p>事务的使用： BEGIN; COMMIT; ROLLBACK;</p><p>数据并发问题 : 脏写，脏读，不可重复读，幻读</p><p>1)脏写（Dirty Write): 事务Session A 修改了 另一个 未提交 事务Session B 修改过 的数据</p><ol><li>脏读(Dirty Read): Session A 读取 了已经被 Session B <strong>更新 但还 没有被提交</strong> 的字段。 之后若 Session B 回滚 ，Session A 读取 的内容就是 临时且无效 的.</li><li>不可重复读(Non-Repeatable Read):Session A 读取 了一个字段，然后 Session B 更新 了该字段。 之后 Session A 再次读取 同一个字段， 值就不同 了。</li></ol><p>4)幻读(Phantom): Session A 从一个表中 读取 了一个字段, 然后 Session B 在该表中 插 入 了一些新的行。 之后, 如果 Session A 再次读取 同一个表, 就会多出几行。</p><p>四种隔离级别：未提交读，提交读，可重复读，序列化</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230423104501.png" alt="img"></p><p>脏写的问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。</p><p>MySQL的默认隔离级别为REPEATABLE READ。</p><h3 id="2-MySQL事务日志"><a href="#2-MySQL事务日志" class="headerlink" title="2)MySQL事务日志"></a>2)MySQL事务日志</h3><p>事务有4种特性：原子性、一致性、隔离性和持久性。那么事务的四种特性到底是基于什么机制实现呢？</p><p>事务的隔离性由 锁机制 实现。 而事务的原子性、一致性和持久性由事务的 redo 日志和undo 日志来保证。</p><p><strong>REDO LOG</strong> 称为 重做日志 ，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持 久性。</p><p><strong>UNDO LOG</strong> 称为 回滚日志 ，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。</p><p>redo log:只需要把 修改 了哪些东西 记录一下 就好.</p><p>好处：redo日志降低了刷盘频率 redo日志占用的空间非常小</p><p>特点：redo日志是顺序写入磁盘的 事务执行过程中，redo log不断记录</p><p>redo log的组成：(保存在内存中的) 重做日志的缓冲 (redo log buffer)，(保存在磁盘中的)重做日志文件 (redo log file)</p><p>redo log 的流程：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230423112516.png" alt="img"></p><p>刷盘：就是将redo log buffer的东西写入到磁盘中（即redo log file)中。</p><p>InnoDB给出 innodb_flush_log_at_trx_commit 参数，该参数控制 commit提交事务 时，如何将 redo log buffer 中的日志刷新到 redo log file 中。</p><p>它支持三种策略：</p><p>设置为0 ：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日 志的同步）</p><p>设置为1 ：表示每次事务提交时都将进行同步，刷盘操作（ 默认值 ）</p><p>设置为2 ：表示每次事务提交时都只把 redo log buffer 内容写入 page cache，不进行同步。由os自己决定什么时候同步到磁盘文件。</p><p>redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中 更新数据 的 前置操作 其实是要 先写入一个 undo log 。</p><p>undo log 的作用： 1. 回滚 2.MVCC</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230423134009.png" alt="img"></p><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。</p><p>redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程.</p><h3 id="3-锁"><a href="#3-锁" class="headerlink" title="3)锁"></a>3)锁</h3><p>事务的隔离性由 锁来实现</p><p>怎么解决脏读 、 不可重复读 、 幻读 这些问题呢？其实有两种可选的解决方案：</p><p>方案一：读操作利用多版本并发控制（ MVCC ，下章讲解），写操作进行 加锁 。</p><p>方案二：读、写操作都采用 加锁 的方式。</p><p>锁的分类：</p><p>按对数据的操作类型划分：读锁&#x2F;共享锁(S)， 写锁&#x2F;排他锁(X)</p><p>按锁的粒度划分： 表级锁， 行级锁， 页级锁</p><p>按对锁的态度：悲观锁，乐观锁</p><p>按加锁方式： 隐式锁， 显示锁</p><p><strong>Java中 synchronized 和 ReentrantLock 等独占锁就是 悲观锁思想的实现</strong></p><p>乐观锁：在更新 的时候会判断一下在此期间别人有没有去更新这个数据。在程序上，我们可以采用 版本号机制 或者 CAS机制 实现。在Java中 java.util.concurrent.atomic 包下的原子变量类就是使用了<strong>乐观锁的CAS</strong>实现的。</p><p>发生死锁应该怎么办？：1，直接进入等待，直到超时。2，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务。</p><h2 id="MVCC机制"><a href="#MVCC机制" class="headerlink" title="MVCC机制"></a>MVCC机制</h2><p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过数据行的多个版 本管理来实现数据库的 并发控制 。这项技术使得在InnoDB的事务隔离级别下执行 一致性读 操作有了保 证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样 在做查询的时候就不用等待另一个事务释放锁。</p><p>MVCC是快照读，是一种乐观锁的体现</p><p>MVCC的实现依赖于：隐藏字段、 Undo Log版本链、 Read View</p><p>隐藏字段，trx_id, 最近被哪个事务修改过，记录其Id。 roll_pointer 是undo log 版本链的指针。</p><p>核心问 题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</p><p>ReadView就是事务A在使用MVCC机制进行快照读操作时产生的读视图。</p><p>ReadView里面的内容：1.创建这个ReadView的事务Id, 2.生成ReadView时，当前系统中活跃的事务id的列表</p><p>3.活跃的事务中最小的事务Id 4. 生成ReadView时系统中应该分配给下一个事务的id. (所有事务id中最大的id+1)</p><p>查找规则：按照ReadView里面的事务id去Undo Log里面去查，找一样的版本。或者小于活跃的最小值，或者在活跃的最大值和最小值之间，但是不在ReadView里（即不活跃，已提交的事务）</p><p>操作流程：</p><ol><li>首先获取事务自己的版本号，也就是事务 ID；</li><li>获取 ReadView；</li><li>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</li><li>如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；</li><li>最后返回符合规则的数据</li></ol><p>因为读未提交可以读到最新数据，串行化读也是。所以只考虑读已提交和可重复读的MVCC</p><p>READ COMMITTED ：每次读取数据前都生成一个ReadView。</p><p>使用 REPEATABLE READ 隔离级别的事务来说，只会在第一次执行查询语句时生成一个 ReadView ，之 后的查询就不会重复生成了。</p><p>可重复读如何解决幻读的？因为只生成了最开始的一个ReadView，生成ReadView的时机。</p><h1 id="5-多线程编程"><a href="#5-多线程编程" class="headerlink" title="5.多线程编程"></a>5.多线程编程</h1><h2 id="synchronized-amp-wait-amp-notify-amp-sleep-amp-lock"><a href="#synchronized-amp-wait-amp-notify-amp-sleep-amp-lock" class="headerlink" title="synchronized &amp; wait &amp; notify &amp;sleep &amp;lock"></a>synchronized &amp; wait &amp; notify &amp;sleep &amp;lock</h2><h3 id="wait-vs-sleep"><a href="#wait-vs-sleep" class="headerlink" title="wait vs sleep"></a>wait vs sleep</h3><p>共同点</p><ul><li>wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</li></ul><p>不同点</p><ul><li><p>方法归属不同</p><ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</li></ul></li><li><p>醒来时机不同</p><ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li>wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul></li><li><p>锁特性不同（重点）</p><ul><li><strong>wait 方法的调用必须先获取 wait 对象的锁</strong>，而 sleep 则无此限制</li><li><strong>wait 方法执行后会释放对象锁</strong>，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）</li><li><strong>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁</strong>（我放弃 cpu，你们也用不了）</li></ul><p>备注：<br>没有获得对象锁，是不能调用wait()的。 Lock.wait()是不对的。要synchronized(Lock){Lock.wait();}</p></li></ul><h3 id="lock-vs-synchronized"><a href="#lock-vs-synchronized" class="headerlink" title="lock vs synchronized"></a>lock vs synchronized</h3><p>不同点</p><ul><li>语法层面<ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li><li><strong>使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁</strong></li></ul></li><li>功能层面<ul><li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li><li><strong>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量</strong></li><li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li></ul></li><li>性能层面<ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul></li></ul><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><pre class=" language-java"><code class="language-java">ReentrantLock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//任务</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ReentrantLock的lock方法"><a href="#ReentrantLock的lock方法" class="headerlink" title="ReentrantLock的lock方法"></a>ReentrantLock的lock方法</h3><p>进入到lock方法后，发现内部调用了sync.lock()方法，他有两个实现</p><p>FairSync:公平锁 NonfairSync:非公平锁,先用CAS抢锁，然后再排队 源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AQS(AbstractQueuedSynchronizer)内部维护着一个队列（或者说是双向链表）</p><p>AQS内部三个变量，head,tail,state. 线程用CAS的方法让state从0变为1，这样就是获得锁了。</p><p>没有拿到锁的线程就进入AQS的队列了。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/QQ%E5%9B%BE%E7%89%8720230430230101.jpg" alt="img"></p><p>对于NonfairSync来说</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于FairSync来说</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>tryAcquire方法：tryAcquire方法是AQS提供的，内部没有任何实现，需要继承AQS的类自己去实现逻辑代码。</p><p>查看到tryAcquire在ReentrantLock中提供了两种实现：公平锁、非公平锁。</p><p>addWaiter方法：在线程没有通过tryAcquire拿到锁资源时，需要将当前线程封装为Node对象，去AQS内部排队。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>acquiredQueued方法：查看当前线程是否排在队伍前面，如果是，则取获取锁；如果长时间没拿到锁，则需要将当前线程挂起。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>unlock释放锁操作不分为公平和非公平，都是执行sync的release方法</p><p>释放锁的核心，就是将state从大于0的数更改为0即为释放锁成功</p><p>并且unlock方法应该会涉及到将AQS队列中阻塞的线程进行唤醒，阻塞用的方法是park方法，唤醒必然是unpark方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p><strong>要求</strong></p><ul><li>掌握线程安全要考虑的三个问题-可见性，有序性，原子性</li><li>掌握 volatile 能解决哪些问题-可以解决可见性和有序性，不能解决原子性</li></ul><p>可见性：一个线程对共享变量修改，另一个线程能看到最新的结果</p><p>有序性：一个线程内代码按编写顺序执行</p><p>原子性：一个线程内多行代码以一个整体运行，期间不能有其他线程的代码插队</p><p><strong>原子性</strong></p><ul><li>起因：多线程下，不同线程的<strong>指令发生了交错</strong>导致的共享变量的读写混乱</li><li>解决：用悲观锁或乐观锁解决，volatile 并不能解决原子性</li></ul><p><strong>可见性</strong></p><ul><li>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致的对共享变量所做的修改另外的线程看不到</li><li>解决：<strong>用 volatile 修饰共享变量</strong>，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见</li></ul><p><strong>有序性</strong></p><ul><li><p>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致指令的实际执行顺序与编写顺序不一致</p></li><li><p>解决：<strong>用 volatile 修饰共享变量</strong>会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果</p></li><li><p>注意：</p><p>内存屏障</p><ul><li><strong>volatile 变量写</strong>加的屏障是阻止上方其它写操作越过屏障排到 <strong>volatile 变量写</strong>之下</li><li><strong>volatile 变量读</strong>加的屏障是阻止下方其它读操作越过屏障排到 <strong>volatile 变量读</strong>之上</li><li>volatile 读写加入的屏障只能防止同一线程内的指令重排</li></ul></li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>乐观锁的代表是 AtomicInteger，使用 CAS(compare and swap)来保证原子性。AtomicInteger的底层是Unsafe。</p><ul><li>其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】</li><li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li><li>它需要多核 cpu 支持，且线程数不应超过 cpu 核数</li></ul><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><strong>ConcurrentHashMap 1.7</strong></p><ul><li>数据结构：<code>Segment(大数组) + HashEntry(小数组) + 链表</code>，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突</li><li>并发度：Segment 数组大小即并发度，决定了同一时刻最多能有多少个线程并发访问。Segment 数组不能扩容，意味着并发度在 ConcurrentHashMap 创建时就固定了</li><li>三个初始变量（capacity, factor, clevel)小数组的长度等于capacity&#x2F;clevel,小于2则取2.</li><li>索引计算<ul><li>假设大数组长度是 $2^m$，key 在大数组内的索引是 key 的二次 hash 值的高 m 位</li><li>假设小数组长度是 $2^n$，key 在小数组内的索引是 key 的二次 hash 值的低 n 位</li></ul></li><li>扩容：每个小数组的扩容相对独立，小数组在超过扩容因子时会触发扩容，每次扩容翻倍</li><li>Segment[0] 原型：首次创建其它小数组时，会以此原型为依据，数组长度，扩容因子都会以原型为准</li></ul><p><strong>ConcurrentHashMap 1.8</strong></p><ul><li>数据结构：<code>Node 数组 + 链表或红黑树</code>，数组的每个头节点作为锁，如果多个线程访问的头节点不同，则不会冲突。首次生成头节点时如果发生竞争，利用 cas 而非 syncronized，进一步提升性能</li><li>并发度：Node 数组有多大，并发度就有多大，与 1.7 不同，Node 数组可以扩容</li><li>扩容条件：Node 数组满 3&#x2F;4 时就会扩容(3&#x2F;4指的是元素个数&#x2F;数组长度)</li><li>扩容单位：以链表为单位从后向前迁移链表，迁移完成的将旧数组头节点替换为 ForwardingNode</li><li>扩容时并发 get<ul><li>根据是否为 ForwardingNode 来决定是在新数组查找还是在旧数组查找，不会阻塞</li><li>如果链表长度超过 1，则需要对节点进行复制（创建新节点），怕的是节点迁移后 next 指针改变</li><li>如果链表最后几个元素扩容后索引不变，则节点无需复制</li></ul></li><li>扩容时并发 put<ul><li>如果 put 的线程与扩容线程操作的链表是同一个，put 线程会阻塞</li><li>如果 put 的线程操作的链表还未迁移完成，即头节点不是 ForwardingNode，则可以并发执行</li><li>如果 put 的线程操作的链表已经迁移完成，即头结点是 ForwardingNode，则可以协助扩容</li></ul></li><li>与 1.7 相比是懒惰初始化</li><li>capacity 代表预估的元素个数，capacity &#x2F; factory 来计算出初始数组大小，需要贴近 $2^n$ （即当capacity&#x3D;16,且factor&#x3D;0.75时，会初始化出一个size&#x3D;32的数组）</li><li>loadFactor 只在计算初始数组大小时被使用，之后扩容固定为 3&#x2F;4</li><li>超过树化阈值时的扩容问题，如果容量已经是 64，直接树化，否则在原来容量基础上做 3 轮扩容</li></ul><h2 id="ThreadLocal-不会"><a href="#ThreadLocal-不会" class="headerlink" title="ThreadLocal(不会)"></a>ThreadLocal(不会)</h2><p><strong>要求</strong></p><ul><li>掌握 ThreadLocal 的作用与原理</li><li>掌握 ThreadLocal 的内存释放时机</li></ul><p><strong>作用</strong></p><ul><li>ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题</li><li>ThreadLocal 同时实现了线程内的资源共享</li></ul><p><strong>原理</strong></p><p>每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p><ul><li>调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</li><li>调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</li><li>调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</li></ul><p>ThreadLocalMap 的一些特点</p><ul><li>key 的 hash 值统一分配</li><li>初始容量 16，扩容因子 2&#x2F;3，扩容容量翻倍</li><li>key 索引冲突后用开放寻址法解决冲突</li></ul><p><strong>弱引用 key</strong></p><p>ThreadLocalMap 中的 key 被设计为弱引用，原因如下</p><ul><li>Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存</li></ul><p><strong>内存释放时机</strong></p><ul><li>被动 GC 释放 key<ul><li>仅是让 key 的内存释放，关联 value 的内存并不会释放</li></ul></li><li>懒惰被动释放 value<ul><li>get key 时，发现是 null key，则释放其 value 内存</li><li>set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关</li></ul></li><li>主动 remove 释放 key，value<ul><li>会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存</li><li>推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收</li></ul></li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程状态：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230426153243.png" alt="img"></p><p>线程池的核心参数：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/QQ%E5%9B%BE%E7%89%8720230427155254.png" alt="img"></p><p>keepAliveTime是没有任务以后救急线程会生存多久。</p><p>当核心线程和阻塞队列满了之后，才会创造救急线程。</p><p>比如1和2任务在被核心线程被执行，3和4任务在阻塞队列中，5任务来了。生成救急线程，执行5任务，然后再执行3任务和4任务。</p><p>代码实现：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/%E7%AE%80%E5%8E%861/QQ%E5%9B%BE%E7%89%8720230427160251.jpg" alt="img"></p><h1 id="6-Redis"><a href="#6-Redis" class="headerlink" title="6.Redis"></a>6.Redis</h1><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><p>详细请参考<a href="https://cloud.tencent.com/developer/article/2238792">这篇文章</a></p><p>五种基本数据类型：字符串（strings），散列表（hashes）， 列表（lists），集合（set），有序集合（sortedset）</p><p>三种特殊数据类型：地理位置（Geospatial），基数统计(Hyperloglog), 位图(Bitmap)</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇笔记-主题和内容介绍</title>
      <link href="/2023/06/26/di-yi-pian-bi-ji/"/>
      <url>/2023/06/26/di-yi-pian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><p>这边主要是按照<a href="https://wushishu.xyz/post/be8880ea.html">wushishu</a>(不过这个网站现在已经寄了）的来进行搭建，还参考了<a href="https://zhuanlan.zhihu.com/p/305812430">这篇知乎文章</a>,还要把Blog下的_config.yml中的https改为http;</p><p>风格主题的话采用的就是我的友链<a href="https://argvchs.netlify.app/2022/05/10/hexo-theme-particlex/">argvchs</a>（现在换了个风格，用的<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a>里的</p><p>整个过程都比较顺利，没有遇到很大挫折，几个小时就做好了。</p><p>后来因为D盘格式化，笔记都丢了，在新电脑上重新搞了一下，一些无太大意义的文章也删除了。</p><span id="more"></span><h1 id="上传笔记"><a href="#上传笔记" class="headerlink" title="上传笔记"></a>上传笔记</h1><p>先创建笔记</p><pre class=" language-cmd"><code class="language-cmd">hexo new post "新建博客文章名"</code></pre><p>再上传笔记</p><pre class=" language-cmd"><code class="language-cmd">hexo clhexo ghexo shexo d</code></pre><h1 id="笔记记录与分享"><a href="#笔记记录与分享" class="headerlink" title="笔记记录与分享"></a>笔记记录与分享</h1><p>也正是这种开源精神，可以让人少走很多弯路。</p><p>我这边也想谈谈我这几年的一些学习资源和过程</p><p>比如当年springboot的配置问题就是找了好几个网课都不会，最后是动力节点给解决的。</p><p>也正好对学习资料进行一个总结，除把CSDN的笔记搬运过来，也可以把我有道云笔记上的也整合一下。</p><p>不过一些C++的笔记（当年也看了好多书，做了好多笔记）就不打算整理了，毕竟已经决定要走Java开发了。</p><p>大概应该会有</p><ul><li>Java基础（<a href="https://www.bilibili.com/video/BV1Kb411W75N/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">尚硅谷</a>）</li><li>Linux（<a href="https://www.bilibili.com/video/BV1n84y1i7td/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>）</li><li>MySQL（<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">尚硅谷</a>）</li><li>JavaWeb2023(<a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>一些项目(<a href="https://www.bilibili.com/video/BV1nV4y1s7ZN/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">全栈开发</a>)</li><li>瑞吉外卖(<a href="https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>设计模式（<a href="https://www.bilibili.com/video/BV1Np4y1z7BU/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>）</li><li>MyBatis（<a href="https://www.bilibili.com/video/BV1JP4y1Z73S/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">动力节点</a>）</li><li>Spring (<a href="https://www.bilibili.com/video/BV1Ft4y1g7Fb/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">动力节点</a>)</li><li>SpringMVC(<a href="https://www.bilibili.com/video/BV1sk4y167pD/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">动力节点</a>)</li><li>SpringBoot(<a href="https://www.bilibili.com/video/BV1XQ4y1m7ex/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">动力节点</a>)</li><li>MyBatisPlus(<a href="https://www.bilibili.com/video/BV1Bc411W7Wj/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">动力节点</a>)</li><li>算法练习（力扣剑指offer+codetop）</li><li>算法训练（<a href="https://www.bilibili.com/video/BV13g41157hK/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">左程云</a>）</li><li>Redis(<a href="https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>springcloud(<a href="https://www.bilibili.com/video/BV1LQ4y127n4/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)（里面包含ElasticSearch的内容）</li><li>并发编程（<a href="https://www.bilibili.com/video/BV16J411h7Rd/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>）（这个比较难，后面可以再看一遍）</li><li>kafka(<a href="https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">尚硅谷</a>)</li><li>Java程序员应该会的前端(<a href="https://www.bilibili.com/video/BV1Tt4y1772f/?p=3&spm_id_from=333.880.my_history.page.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>JVM(<a href="https://www.bilibili.com/video/BV1yE411Z7AP/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>12306（<a href="https://coding.imooc.com/class/641.html">慕课网</a>）</li><li>Java面试题(<a href="https://www.bilibili.com/video/BV1yT411H7YK/?p=117&spm_id_from=333.880.my_history.page.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>Java面试题(<a href="https://www.bilibili.com/video/BV1ay4y1D7o7/?spm_id_from=333.880.my_history.page.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">马士兵</a>)</li><li>黑马头条(<a href="https://www.bilibili.com/video/BV1Qs4y1v7x4/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">黑马</a>)</li><li>《Effective Java》(<a href="https://www.zhihu.com/column/c_1612941363640799232">知乎</a>)</li><li>ClickHouse(<a href="https://www.bilibili.com/video/BV1Yh411z7os/?spm_id_from=333.337.search-card.all.click&vd_source=6ed7f19911310aba47123ac6cc1674a0">尚硅谷</a>)</li></ul><p>不过这些等找到实习以后再说吧，可能要明年了，当然也可能下半年下班以后写。而且写的时候估计可能还要重学一遍。</p><p>当然还有一些失败的学习就不说了，比如极客时间的丁雪丰老师的Spring就太难了。</p><p>总体的学习路线是先打基础，用尚硅谷康师傅的Java和sql，然后做几个简单的项目（黑马）。然后发现对SSM和springboot原理掌握不足，再去看动力节点的SSM。像并发编程和微服务生态Redis,ES,springcloud，看黑马。中间穿插刷点算法题。基本就可以出师准备校招了。</p><p>其实主要还是看老师，尚硅谷的康师傅，动力节点的老杜和王妈妈，黑马的虎翼和满一航老师。</p><p>黑马的springcloud是包含很多的ES内容的。像Redis,ES,MQ这三大件。还是要熟悉使用和原理的。</p><p>本来是想写上黑马的学成在线的。不过我看他第一天的微服务拆分的不是很好。是横着拆的，不是按业务垂直拆的。就暂时没看。换了最新的黑马头条</p><p>如果想速成，请按下面走：</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/image-20230901084108396.png"></p><p>还有平时看过的一些书。《算法（第四版）》，DDIA，CSAPP，On Java</p><p>以及不知道怎么整理的计算机网络（直接去看小林coding和经典书籍吧）。</p><p>平时做项目也要多思考难点，亮点。</p><p><img src="https://web-1107.oss-cn-nanjing.aliyuncs.com/_53d3ec3590e30e05ff2135dd99796e26_-564986219_Screenshot_20230831_211650.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
